commit 90b940d49e8b8b77233a92cb24e519fc54ccb9f8
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Thu 2018-12-13 09:26:25-0500

    increase max_map_count for hardened malloc
    
    Signed-off-by: anupritaisno1 <www.anuprita804@gmail.com>
---
 rootdir/init.rc | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/rootdir/init.rc b/rootdir/init.rc
index d10689a011b43d45c9fe28db1bd7d7046388463f..606b001925875238f63734aab96bc2a811a3bf60 100644
--- a/rootdir/init.rc
+++ b/rootdir/init.rc
@@ -1000,20 +1000,22 @@ on boot
     chmod 0664 /sys/block/zram0/writeback
 
     # to access F2FS sysfs on dm-<num> directly
     mkdir /dev/sys/fs/by-name 0755 system system
     symlink /sys/fs/f2fs/${dev.mnt.blk.data} /dev/sys/fs/by-name/userdata
 
     # to access dm-<num> sysfs
     mkdir /dev/sys/block/by-name 0755 system system
     symlink /sys/devices/virtual/block/${dev.mnt.blk.data} /dev/sys/block/by-name/userdata
 
+    write /proc/sys/vm/max_map_count 1048576
+
     # F2FS tuning. Set cp_interval larger than dirty_expire_centisecs, 30 secs,
     # to avoid power consumption when system becomes mostly idle. Be careful
     # to make it too large, since it may bring userdata loss, if they
     # are not aware of using fsync()/sync() to prepare sudden power-cut.
     write /dev/sys/fs/by-name/userdata/cp_interval 200
     write /dev/sys/fs/by-name/userdata/gc_urgent_sleep_time 50
     write /dev/sys/fs/by-name/userdata/iostat_enable 1
 
     # limit discard size to 128MB in order to avoid long IO latency
     # for filesystem tuning first (dm or sda)

commit eecd1fdbed774849676f992fb426af11b5e80baf
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Fri 2015-02-06 11:46:34-0500

    tighten up mount permissions
    
    Signed-off-by: anupritaisno1 <www.anuprita804@gmail.com>
---
 init/first_stage_init.cpp | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/init/first_stage_init.cpp b/init/first_stage_init.cpp
index 78e5b60a191b94351631328f5ee24388b5571ccd..3044ffbd71147d3036fd24493f668f634ed5850c 100644
--- a/init/first_stage_init.cpp
+++ b/init/first_stage_init.cpp
@@ -195,35 +195,35 @@ int FirstStageMain(int argc, char** argv) {
     umask(0);
 
     CHECKCALL(clearenv());
     CHECKCALL(setenv("PATH", _PATH_DEFPATH, 1));
     // Get the basic filesystem setup we need put together in the initramdisk
     // on / and then we'll let the rc file figure out the rest.
     CHECKCALL(mount("tmpfs", "/dev", "tmpfs", MS_NOSUID, "mode=0755"));
     CHECKCALL(mkdir("/dev/pts", 0755));
     CHECKCALL(mkdir("/dev/socket", 0755));
     CHECKCALL(mkdir("/dev/dm-user", 0755));
-    CHECKCALL(mount("devpts", "/dev/pts", "devpts", 0, NULL));
+    CHECKCALL(mount("devpts", "/dev/pts", "devpts", MS_NOSUID|MS_NOEXEC, NULL));
 #define MAKE_STR(x) __STRING(x)
-    CHECKCALL(mount("proc", "/proc", "proc", 0, "hidepid=2,gid=" MAKE_STR(AID_READPROC)));
+    CHECKCALL(mount("proc", "/proc", "proc", MS_NOSUID|MS_NODEV|MS_NOEXEC, "hidepid=2,gid=" MAKE_STR(AID_READPROC)));
 #undef MAKE_STR
     // Don't expose the raw commandline to unprivileged processes.
     CHECKCALL(chmod("/proc/cmdline", 0440));
     std::string cmdline;
     android::base::ReadFileToString("/proc/cmdline", &cmdline);
     // Don't expose the raw bootconfig to unprivileged processes.
     chmod("/proc/bootconfig", 0440);
     std::string bootconfig;
     android::base::ReadFileToString("/proc/bootconfig", &bootconfig);
     gid_t groups[] = {AID_READPROC};
     CHECKCALL(setgroups(arraysize(groups), groups));
-    CHECKCALL(mount("sysfs", "/sys", "sysfs", 0, NULL));
+    CHECKCALL(mount("sysfs", "/sys", "sysfs", MS_NOSUID|MS_NODEV|MS_NOEXEC, NULL));
     CHECKCALL(mount("selinuxfs", "/sys/fs/selinux", "selinuxfs", 0, NULL));
 
     CHECKCALL(mknod("/dev/kmsg", S_IFCHR | 0600, makedev(1, 11)));
 
     if constexpr (WORLD_WRITABLE_KMSG) {
         CHECKCALL(mknod("/dev/kmsg_debug", S_IFCHR | 0622, makedev(1, 11)));
     }
 
     CHECKCALL(mknod("/dev/random", S_IFCHR | 0666, makedev(1, 8)));
     CHECKCALL(mknod("/dev/urandom", S_IFCHR | 0666, makedev(1, 9)));

commit 4528ed1f682015f87259abcff82d7bef65a89c47
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Wed 2016-06-15 17:51:42-0400

    add properties for controlling deny_new_usb
    
    Signed-off-by: anupritaisno1 <www.anuprita804@gmail.com>
---
 rootdir/init.rc | 12 ++++++++++++
 1 file changed, 12 insertions(+)

diff --git a/rootdir/init.rc b/rootdir/init.rc
index 606b001925875238f63734aab96bc2a811a3bf60..a08adaf0d14da11850ea1ba9a76c1c683e6f8a45 100644
--- a/rootdir/init.rc
+++ b/rootdir/init.rc
@@ -1141,20 +1141,32 @@ on property:sys.sysctl.extra_free_kbytes=*
 
 # Allow users to drop caches
 on property:perf.drop_caches=3
     write /proc/sys/vm/drop_caches 3
     setprop perf.drop_caches 0
 
 # "tcp_default_init_rwnd" Is too long!
 on property:net.tcp_def_init_rwnd=*
     write /proc/sys/net/ipv4/tcp_default_init_rwnd ${net.tcp_def_init_rwnd}
 
+on property:persist.security.deny_new_usb=disabled
+    write /proc/sys/kernel/deny_new_usb 0
+
+on property:persist.security.deny_new_usb=enabled
+    write /proc/sys/kernel/deny_new_usb 1
+
+on property:persist.security.deny_new_usb=dynamic
+    write /proc/sys/kernel/deny_new_usb 1
+
+on property:security.deny_new_usb=*
+    write /proc/sys/kernel/deny_new_usb ${security.deny_new_usb}
+
 # perf_event_open syscall security:
 # Newer kernels have the ability to control the use of the syscall via SELinux
 # hooks. init tests for this, and sets sys_init.perf_lsm_hooks to 1 if the
 # kernel has the hooks. In this case, the system-wide perf_event_paranoid
 # sysctl is set to -1 (unrestricted use), and the SELinux policy is used for
 # controlling access. On older kernels, the paranoid value is the only means of
 # controlling access. It is normally 3 (allow only root), but the shell user
 # can lower it to 1 (allowing thread-scoped pofiling) via security.perf_harden.
 on property:sys.init.perf_lsm_hooks=1
     write /proc/sys/kernel/perf_event_paranoid -1

commit 74226c1bbfd2a875328a70b3debd157c46b25a45
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Tue 2019-07-16 14:49:29-0400

    enable kernel mitigations for link races
    
    Signed-off-by: anupritaisno1 <www.anuprita804@gmail.com>
---
 rootdir/init.rc | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/rootdir/init.rc b/rootdir/init.rc
index a08adaf0d14da11850ea1ba9a76c1c683e6f8a45..abe986d08d82ebccf26a2995d9704644fd0f6ca7 100644
--- a/rootdir/init.rc
+++ b/rootdir/init.rc
@@ -276,20 +276,23 @@ on init
     mkdir /mnt/runtime/full/self 0755 root root
 
     # Symlink to keep legacy apps working in multi-user world
     symlink /storage/self/primary /mnt/sdcard
     symlink /mnt/user/0/primary /mnt/runtime/default/self/primary
 
     write /proc/sys/kernel/panic_on_oops 1
     write /proc/sys/kernel/hung_task_timeout_secs 0
     write /proc/cpu/alignment 4
 
+    write /proc/sys/fs/protected_hardlinks 1
+    write /proc/sys/fs/protected_symlinks 1
+
     # scheduler tunables
     # Disable auto-scaling of scheduler tunables with hotplug. The tunables
     # will vary across devices in unpredictable ways if allowed to scale with
     # cpu cores.
     write /proc/sys/kernel/sched_tunable_scaling 0
     write /proc/sys/kernel/sched_latency_ns 10000000
     write /proc/sys/kernel/sched_wakeup_granularity_ns 2000000
     write /proc/sys/kernel/sched_child_runs_first 0
 
     write /proc/sys/kernel/randomize_va_space 2

commit 9abff2c581d49ef06f06b77b1d6f8e0373368813
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Tue 2019-07-16 14:54:28-0400

    enable kernel mitigations for file spoofing
    
    Signed-off-by: anupritaisno1 <www.anuprita804@gmail.com>
---
 rootdir/init.rc | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/rootdir/init.rc b/rootdir/init.rc
index abe986d08d82ebccf26a2995d9704644fd0f6ca7..3b36489f7e1763cb79c8081554818747aedb2d43 100644
--- a/rootdir/init.rc
+++ b/rootdir/init.rc
@@ -279,20 +279,23 @@ on init
     symlink /storage/self/primary /mnt/sdcard
     symlink /mnt/user/0/primary /mnt/runtime/default/self/primary
 
     write /proc/sys/kernel/panic_on_oops 1
     write /proc/sys/kernel/hung_task_timeout_secs 0
     write /proc/cpu/alignment 4
 
     write /proc/sys/fs/protected_hardlinks 1
     write /proc/sys/fs/protected_symlinks 1
 
+    write /proc/sys/fs/protected_fifos 2
+    write /proc/sys/fs/protected_regular 2
+
     # scheduler tunables
     # Disable auto-scaling of scheduler tunables with hotplug. The tunables
     # will vary across devices in unpredictable ways if allowed to scale with
     # cpu cores.
     write /proc/sys/kernel/sched_tunable_scaling 0
     write /proc/sys/kernel/sched_latency_ns 10000000
     write /proc/sys/kernel/sched_wakeup_granularity_ns 2000000
     write /proc/sys/kernel/sched_child_runs_first 0
 
     write /proc/sys/kernel/randomize_va_space 2

commit 029945a5403b49236b7c3e891aa2971f2fbc6311 (HEAD, tag: SQ1A.220105.002.2022010500, m/master, grapheneos/12)
Author: flawedworld <38294951+flawedworld@users.noreply.github.com>
Date:   Mon 2021-04-05 03:02:51+0100

    add a property for controlling ptrace_scope
    
    Signed-off-by: anupritaisno1 <www.anuprita804@gmail.com>
---
 rootdir/init.rc | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/rootdir/init.rc b/rootdir/init.rc
index 3b36489f7e1763cb79c8081554818747aedb2d43..85ee182b05a0bbd02cd786d1193c9f57e29a870e 100644
--- a/rootdir/init.rc
+++ b/rootdir/init.rc
@@ -1159,20 +1159,26 @@ on property:persist.security.deny_new_usb=disabled
 
 on property:persist.security.deny_new_usb=enabled
     write /proc/sys/kernel/deny_new_usb 1
 
 on property:persist.security.deny_new_usb=dynamic
     write /proc/sys/kernel/deny_new_usb 1
 
 on property:security.deny_new_usb=*
     write /proc/sys/kernel/deny_new_usb ${security.deny_new_usb}
 
+on property:persist.native_debug=true
+    write /proc/sys/kernel/yama/ptrace_scope 0
+
+on property:persist.native_debug=false
+    write /proc/sys/kernel/yama/ptrace_scope 2
+
 # perf_event_open syscall security:
 # Newer kernels have the ability to control the use of the syscall via SELinux
 # hooks. init tests for this, and sets sys_init.perf_lsm_hooks to 1 if the
 # kernel has the hooks. In this case, the system-wide perf_event_paranoid
 # sysctl is set to -1 (unrestricted use), and the SELinux policy is used for
 # controlling access. On older kernels, the paranoid value is the only means of
 # controlling access. It is normally 3 (allow only root), but the shell user
 # can lower it to 1 (allowing thread-scoped pofiling) via security.perf_harden.
 on property:sys.init.perf_lsm_hooks=1
     write /proc/sys/kernel/perf_event_paranoid -1
