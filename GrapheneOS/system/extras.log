commit da1020cc2923c0a61a3dd55109aa342bd2097c1b (HEAD, tag: RQ2A.210305.006.2021.03.02.10, m/master)
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Wed 2020-09-09 01:53:11-0400

    pad filenames to 32 bytes instead of 16 or 4 bytes
    
    This was adopted before the earliest stable release of GrapheneOS, so
    backwards compatibility is not implemented anymore.
---
 libfscrypt/fscrypt.cpp | 13 ++-----------
 1 file changed, 2 insertions(+), 11 deletions(-)

diff --git a/libfscrypt/fscrypt.cpp b/libfscrypt/fscrypt.cpp
index a52ed90c28e4a976f3ad14d3e81f7bb4613a7e9d..7852349ff2e00f63e4e24aabd259f6e30512cb39 100644
--- a/libfscrypt/fscrypt.cpp
+++ b/libfscrypt/fscrypt.cpp
@@ -221,31 +221,22 @@ bool ParseOptionsForApiLevel(unsigned int first_api_level, const std::string& op
                 options->flags |= FSCRYPT_POLICY_FLAG_IV_INO_LBLK_32;
             } else if (flag == "wrappedkey_v0") {
                 options->use_hw_wrapped_key = true;
             } else {
                 LOG(ERROR) << "Unknown flag: " << flag;
                 return false;
             }
         }
     }
 
-    // In the original setting of v1 policies and AES-256-CTS we used 4-byte
-    // padding of filenames, so retain that on old first_api_levels.
-    //
-    // For everything else, use 16-byte padding.  This is more secure (it helps
-    // hide the length of filenames), and it makes the inputs evenly divisible
-    // into cipher blocks which is more efficient for encryption and decryption.
-    if (!is_gki && options->version == 1 && options->filenames_mode == FSCRYPT_MODE_AES_256_CTS) {
-        options->flags |= FSCRYPT_POLICY_FLAGS_PAD_4;
-    } else {
-        options->flags |= FSCRYPT_POLICY_FLAGS_PAD_16;
-    }
+    // GrapheneOS has always used the maximum 32 byte padding.
+    options->flags |= FSCRYPT_POLICY_FLAGS_PAD_32;
 
     // Use DIRECT_KEY for Adiantum, since it's much more efficient but just as
     // secure since Android doesn't reuse the same master key for multiple
     // encryption modes.
     if (options->contents_mode == FSCRYPT_MODE_ADIANTUM) {
         if (options->filenames_mode != FSCRYPT_MODE_ADIANTUM) {
             LOG(ERROR) << "Adiantum must be both contents and filenames mode or neither, invalid options: " << options_string;
             return false;
         }
         options->flags |= FSCRYPT_POLICY_FLAG_DIRECT_KEY;
