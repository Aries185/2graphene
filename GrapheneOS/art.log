commit 290124f03583d79e9d444af3a047137d65d27870 (HEAD, tag: SP2A.220305.012.2022030801, m/master, grapheneos/12.1)
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Sun 2021-10-10 16:45:59-0400

    constify JNINativeMethod tables
---
 runtime/native/dalvik_system_BaseDexClassLoader.cc             | 2 +-
 runtime/native/dalvik_system_DexFile.cc                        | 2 +-
 runtime/native/dalvik_system_VMDebug.cc                        | 2 +-
 runtime/native/dalvik_system_VMRuntime.cc                      | 2 +-
 runtime/native/dalvik_system_VMStack.cc                        | 2 +-
 runtime/native/dalvik_system_ZygoteHooks.cc                    | 2 +-
 runtime/native/java_lang_Class.cc                              | 2 +-
 runtime/native/java_lang_Object.cc                             | 2 +-
 runtime/native/java_lang_String.cc                             | 2 +-
 runtime/native/java_lang_StringFactory.cc                      | 2 +-
 runtime/native/java_lang_System.cc                             | 2 +-
 runtime/native/java_lang_Thread.cc                             | 2 +-
 runtime/native/java_lang_Throwable.cc                          | 2 +-
 runtime/native/java_lang_VMClassLoader.cc                      | 2 +-
 runtime/native/java_lang_invoke_MethodHandleImpl.cc            | 2 +-
 runtime/native/java_lang_ref_FinalizerReference.cc             | 2 +-
 runtime/native/java_lang_ref_Reference.cc                      | 2 +-
 runtime/native/java_lang_reflect_Array.cc                      | 2 +-
 runtime/native/java_lang_reflect_Constructor.cc                | 2 +-
 runtime/native/java_lang_reflect_Executable.cc                 | 2 +-
 runtime/native/java_lang_reflect_Field.cc                      | 2 +-
 runtime/native/java_lang_reflect_Method.cc                     | 2 +-
 runtime/native/java_lang_reflect_Parameter.cc                  | 2 +-
 runtime/native/java_lang_reflect_Proxy.cc                      | 2 +-
 runtime/native/java_util_concurrent_atomic_AtomicLong.cc       | 2 +-
 runtime/native/libcore_util_CharsetUtils.cc                    | 2 +-
 runtime/native/org_apache_harmony_dalvik_ddmc_DdmServer.cc     | 2 +-
 runtime/native/org_apache_harmony_dalvik_ddmc_DdmVmInternal.cc | 2 +-
 runtime/native/sun_misc_Unsafe.cc                              | 2 +-
 29 files changed, 29 insertions(+), 29 deletions(-)

diff --git a/runtime/native/dalvik_system_BaseDexClassLoader.cc b/runtime/native/dalvik_system_BaseDexClassLoader.cc
index 607395d308688c6e4c837939c19bc2042bae09f7..f3d84e57a82d7ed2cab116a9e695b21a788b91ac 100644
--- a/runtime/native/dalvik_system_BaseDexClassLoader.cc
+++ b/runtime/native/dalvik_system_BaseDexClassLoader.cc
@@ -51,20 +51,20 @@ static jobjectArray BaseDexClassLoader_computeClassLoaderContextsNative(JNIEnv*
   for (const auto& classpath_to_context : contextMap) {
     const std::string& classpath = classpath_to_context.first;
     const std::string& context = classpath_to_context.second;
     if (!append_string(env, result, i, classpath) || !append_string(env, result, i, context)) {
       return nullptr;
     }
   }
   return result;
 }
 
-static JNINativeMethod gMethods[] = {
+static const JNINativeMethod gMethods[] = {
   NATIVE_METHOD(BaseDexClassLoader, computeClassLoaderContextsNative,
                 "()[Ljava/lang/String;"),
 };
 
 void register_dalvik_system_BaseDexClassLoader(JNIEnv* env) {
   REGISTER_NATIVE_METHODS("dalvik/system/BaseDexClassLoader");
 }
 
 }  // namespace art
diff --git a/runtime/native/dalvik_system_DexFile.cc b/runtime/native/dalvik_system_DexFile.cc
index f8ad7f1b7aa94f94484b4d11a89e521a559803ba..b0f7cd8f17d6733d598808002d2029754d826c55 100644
--- a/runtime/native/dalvik_system_DexFile.cc
+++ b/runtime/native/dalvik_system_DexFile.cc
@@ -906,21 +906,21 @@ static void DexFile_setTrusted(JNIEnv* env, jclass, jobject j_cookie) {
     Thread::Current()->AssertPendingException();
     return;
   }
 
   // Assign core platform domain as the dex files are allowed to access all the other domains.
   for (const DexFile* dex_file : dex_files) {
     const_cast<DexFile*>(dex_file)->SetHiddenapiDomain(hiddenapi::Domain::kCorePlatform);
   }
 }
 
-static JNINativeMethod gMethods[] = {
+static const JNINativeMethod gMethods[] = {
   NATIVE_METHOD(DexFile, closeDexFile, "(Ljava/lang/Object;)Z"),
   NATIVE_METHOD(DexFile,
                 defineClassNative,
                 "(Ljava/lang/String;"
                 "Ljava/lang/ClassLoader;"
                 "Ljava/lang/Object;"
                 "Ldalvik/system/DexFile;"
                 ")Ljava/lang/Class;"),
   NATIVE_METHOD(DexFile, getClassNameList, "(Ljava/lang/Object;)[Ljava/lang/String;"),
   NATIVE_METHOD(DexFile, isDexOptNeeded, "(Ljava/lang/String;)Z"),
diff --git a/runtime/native/dalvik_system_VMDebug.cc b/runtime/native/dalvik_system_VMDebug.cc
index 5c8bd8431a81127a77047da67088e4504089310f..fdd0ad079d9ce917fc0c67fced654ea76aaf305f 100644
--- a/runtime/native/dalvik_system_VMDebug.cc
+++ b/runtime/native/dalvik_system_VMDebug.cc
@@ -482,21 +482,21 @@ static void VMDebug_setAllocTrackerStackDepth(JNIEnv* env, jclass, jint stack_de
       static_cast<size_t>(stack_depth) > gc::AllocRecordObjectMap::kMaxSupportedStackDepth) {
     ScopedObjectAccess soa(env);
     soa.Self()->ThrowNewExceptionF("Ljava/lang/RuntimeException;",
                                    "Stack depth is invalid: %d",
                                    stack_depth);
   } else {
     runtime->GetHeap()->SetAllocTrackerStackDepth(static_cast<size_t>(stack_depth));
   }
 }
 
-static JNINativeMethod gMethods[] = {
+static const JNINativeMethod gMethods[] = {
   NATIVE_METHOD(VMDebug, countInstancesOfClass, "(Ljava/lang/Class;Z)J"),
   NATIVE_METHOD(VMDebug, countInstancesOfClasses, "([Ljava/lang/Class;Z)[J"),
   NATIVE_METHOD(VMDebug, dumpHprofData, "(Ljava/lang/String;I)V"),
   NATIVE_METHOD(VMDebug, dumpHprofDataDdms, "()V"),
   NATIVE_METHOD(VMDebug, dumpReferenceTables, "()V"),
   NATIVE_METHOD(VMDebug, getAllocCount, "(I)I"),
   FAST_NATIVE_METHOD(VMDebug, getLoadedClassCount, "()I"),
   NATIVE_METHOD(VMDebug, getVmFeatureList, "()[Ljava/lang/String;"),
   FAST_NATIVE_METHOD(VMDebug, isDebuggerConnected, "()Z"),
   FAST_NATIVE_METHOD(VMDebug, isDebuggingEnabled, "()Z"),
diff --git a/runtime/native/dalvik_system_VMRuntime.cc b/runtime/native/dalvik_system_VMRuntime.cc
index 842590408d9290aaef6c3cbbb2541889c2053a89..8283f30995bd45f78e12ee828e142dec55966819 100644
--- a/runtime/native/dalvik_system_VMRuntime.cc
+++ b/runtime/native/dalvik_system_VMRuntime.cc
@@ -499,21 +499,21 @@ static jboolean VMRuntime_isValidClassLoaderContext(JNIEnv* env,
                                                     jstring jencoded_class_loader_context) {
   if (UNLIKELY(jencoded_class_loader_context == nullptr)) {
     ScopedFastNativeObjectAccess soa(env);
     ThrowNullPointerException("encoded_class_loader_context == null");
     return false;
   }
   ScopedUtfChars encoded_class_loader_context(env, jencoded_class_loader_context);
   return ClassLoaderContext::IsValidEncoding(encoded_class_loader_context.c_str());
 }
 
-static JNINativeMethod gMethods[] = {
+static const JNINativeMethod gMethods[] = {
   FAST_NATIVE_METHOD(VMRuntime, addressOf, "(Ljava/lang/Object;)J"),
   NATIVE_METHOD(VMRuntime, bootClassPath, "()Ljava/lang/String;"),
   NATIVE_METHOD(VMRuntime, clampGrowthLimit, "()V"),
   NATIVE_METHOD(VMRuntime, classPath, "()Ljava/lang/String;"),
   NATIVE_METHOD(VMRuntime, clearGrowthLimit, "()V"),
   NATIVE_METHOD(VMRuntime, setHiddenApiExemptions, "([Ljava/lang/String;)V"),
   NATIVE_METHOD(VMRuntime, setHiddenApiAccessLogSamplingRate, "(I)V"),
   NATIVE_METHOD(VMRuntime, getTargetHeapUtilization, "()F"),
   FAST_NATIVE_METHOD(VMRuntime, isNativeDebuggable, "()Z"),
   NATIVE_METHOD(VMRuntime, isJavaDebuggable, "()Z"),
diff --git a/runtime/native/dalvik_system_VMStack.cc b/runtime/native/dalvik_system_VMStack.cc
index e88516e248645441c2ac06c2037bc3d85cff1450..58e40f6e8a9ab939c6a141029e4686a390ff9158 100644
--- a/runtime/native/dalvik_system_VMStack.cc
+++ b/runtime/native/dalvik_system_VMStack.cc
@@ -161,21 +161,21 @@ static jobjectArray VMStack_getThreadStackTrace(JNIEnv* env, jclass, jobject jav
 
 static jobjectArray VMStack_getAnnotatedThreadStackTrace(JNIEnv* env, jclass, jobject javaThread) {
   ScopedFastNativeObjectAccess soa(env);
   auto fn = [](Thread* thread, const ScopedFastNativeObjectAccess& soaa)
       REQUIRES_SHARED(Locks::mutator_lock_) -> jobjectArray {
     return thread->CreateAnnotatedStackTrace(soaa);
   };
   return GetThreadStack(soa, javaThread, fn);
 }
 
-static JNINativeMethod gMethods[] = {
+static const JNINativeMethod gMethods[] = {
   FAST_NATIVE_METHOD(VMStack, fillStackTraceElements, "(Ljava/lang/Thread;[Ljava/lang/StackTraceElement;)I"),
   FAST_NATIVE_METHOD(VMStack, getCallingClassLoader, "()Ljava/lang/ClassLoader;"),
   FAST_NATIVE_METHOD(VMStack, getClosestUserClassLoader, "()Ljava/lang/ClassLoader;"),
   FAST_NATIVE_METHOD(VMStack, getStackClass2, "()Ljava/lang/Class;"),
   FAST_NATIVE_METHOD(VMStack, getThreadStackTrace, "(Ljava/lang/Thread;)[Ljava/lang/StackTraceElement;"),
   FAST_NATIVE_METHOD(VMStack, getAnnotatedThreadStackTrace, "(Ljava/lang/Thread;)[Ldalvik/system/AnnotatedStackTraceElement;"),
 };
 
 void register_dalvik_system_VMStack(JNIEnv* env) {
   REGISTER_NATIVE_METHODS("dalvik/system/VMStack");
diff --git a/runtime/native/dalvik_system_ZygoteHooks.cc b/runtime/native/dalvik_system_ZygoteHooks.cc
index 050233dac5042a7ea4f2293062a71185f7b6f1ec..37551d049bec6f0a98c718d601676da82a2c144e 100644
--- a/runtime/native/dalvik_system_ZygoteHooks.cc
+++ b/runtime/native/dalvik_system_ZygoteHooks.cc
@@ -449,21 +449,21 @@ static jboolean ZygoteHooks_nativeZygoteLongSuspendOk(JNIEnv* env ATTRIBUTE_UNUS
   // itself doesn't run appreciable amounts of Java code when running single-threaded, so
   // suspending the JIT in non-jit-zygote mode is OK.
   // TODO: Make this potentially return true once we're done with JIT compilation in JIT Zygote.
   // Only called in zygote. Thus static is OK here.
   static bool isJitZygote = jit::Jit::InZygoteUsingJit();
   static bool explicitlyDisabled = Runtime::Current()->IsJavaZygoteForkLoopRequired();
   return (isJitZygote || explicitlyDisabled) ? JNI_FALSE : JNI_TRUE;
 }
 
 
-static JNINativeMethod gMethods[] = {
+static const JNINativeMethod gMethods[] = {
   NATIVE_METHOD(ZygoteHooks, nativePreFork, "()J"),
   NATIVE_METHOD(ZygoteHooks, nativePostZygoteFork, "()V"),
   NATIVE_METHOD(ZygoteHooks, nativePostForkSystemServer, "(I)V"),
   NATIVE_METHOD(ZygoteHooks, nativePostForkChild, "(JIZZLjava/lang/String;)V"),
   NATIVE_METHOD(ZygoteHooks, nativeZygoteLongSuspendOk, "()Z"),
   NATIVE_METHOD(ZygoteHooks, startZygoteNoThreadCreation, "()V"),
   NATIVE_METHOD(ZygoteHooks, stopZygoteNoThreadCreation, "()V"),
 };
 
 void register_dalvik_system_ZygoteHooks(JNIEnv* env) {
diff --git a/runtime/native/java_lang_Class.cc b/runtime/native/java_lang_Class.cc
index 776b14f7355f75d2833b1dc8b4278bea46069dc8..bdf3ea92ec57e51b6af71d90e703d43f3164c117 100644
--- a/runtime/native/java_lang_Class.cc
+++ b/runtime/native/java_lang_Class.cc
@@ -974,21 +974,21 @@ static jobject Class_newInstance(JNIEnv* env, jobject javaThis) {
   JValue result;
   uint32_t args[1] = { static_cast<uint32_t>(reinterpret_cast<uintptr_t>(receiver.Get())) };
   constructor->Invoke(soa.Self(), args, sizeof(args), &result, "V");
   if (UNLIKELY(soa.Self()->IsExceptionPending())) {
     return nullptr;
   }
   // Constructors are ()V methods, so we shouldn't touch the result of InvokeMethod.
   return soa.AddLocalReference<jobject>(receiver.Get());
 }
 
-static JNINativeMethod gMethods[] = {
+static const JNINativeMethod gMethods[] = {
   FAST_NATIVE_METHOD(Class, classForName,
                 "(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;"),
   FAST_NATIVE_METHOD(Class, getDeclaredAnnotation,
                 "(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;"),
   FAST_NATIVE_METHOD(Class, getDeclaredAnnotations, "()[Ljava/lang/annotation/Annotation;"),
   FAST_NATIVE_METHOD(Class, getDeclaredClasses, "()[Ljava/lang/Class;"),
   FAST_NATIVE_METHOD(Class, getDeclaredConstructorInternal,
                 "([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;"),
   FAST_NATIVE_METHOD(Class, getDeclaredConstructorsInternal, "(Z)[Ljava/lang/reflect/Constructor;"),
   FAST_NATIVE_METHOD(Class, getDeclaredField, "(Ljava/lang/String;)Ljava/lang/reflect/Field;"),
diff --git a/runtime/native/java_lang_Object.cc b/runtime/native/java_lang_Object.cc
index 8fc10d1114a31cff711a50a8dd0742903653e185..87407551997aee01c8dc60883cf17beba8a6eb79 100644
--- a/runtime/native/java_lang_Object.cc
+++ b/runtime/native/java_lang_Object.cc
@@ -47,21 +47,21 @@ static void Object_waitJI(JNIEnv* env, jobject java_this, jlong ms, jint ns) {
   ScopedFastNativeObjectAccess soa(env);
   soa.Decode<mirror::Object>(java_this)->Wait(soa.Self(), ms, ns);
 }
 
 static jint Object_identityHashCodeNative(JNIEnv* env, jclass, jobject javaObject) {
   ScopedFastNativeObjectAccess soa(env);
   ObjPtr<mirror::Object> o = soa.Decode<mirror::Object>(javaObject);
   return static_cast<jint>(o->IdentityHashCode());
 }
 
-static JNINativeMethod gMethods[] = {
+static const JNINativeMethod gMethods[] = {
   FAST_NATIVE_METHOD(Object, internalClone, "()Ljava/lang/Object;"),
   FAST_NATIVE_METHOD(Object, notify, "()V"),
   FAST_NATIVE_METHOD(Object, notifyAll, "()V"),
   OVERLOADED_FAST_NATIVE_METHOD(Object, wait, "(JI)V", waitJI),
   FAST_NATIVE_METHOD(Object, identityHashCodeNative, "(Ljava/lang/Object;)I"),
 };
 
 void register_java_lang_Object(JNIEnv* env) {
   REGISTER_NATIVE_METHODS("java/lang/Object");
 }
diff --git a/runtime/native/java_lang_String.cc b/runtime/native/java_lang_String.cc
index 86f93299d98d36de33e9372ba1198a3558f867ac..ec4b8a9025bb4713367e107786cbd1e52d433ff0 100644
--- a/runtime/native/java_lang_String.cc
+++ b/runtime/native/java_lang_String.cc
@@ -102,21 +102,21 @@ static jstring String_doReplace(JNIEnv* env, jobject java_this, jchar old_c, jch
   return soa.AddLocalReference<jstring>(result);
 }
 
 static jcharArray String_toCharArray(JNIEnv* env, jobject java_this) {
   ScopedFastNativeObjectAccess soa(env);
   StackHandleScope<1u> hs(soa.Self());
   Handle<mirror::String> s = hs.NewHandle(soa.Decode<mirror::String>(java_this));
   return soa.AddLocalReference<jcharArray>(mirror::String::ToCharArray(s, soa.Self()));
 }
 
-static JNINativeMethod gMethods[] = {
+static const JNINativeMethod gMethods[] = {
   FAST_NATIVE_METHOD(String, charAt, "(I)C"),
   FAST_NATIVE_METHOD(String, compareTo, "(Ljava/lang/String;)I"),
   FAST_NATIVE_METHOD(String, concat, "(Ljava/lang/String;)Ljava/lang/String;"),
   FAST_NATIVE_METHOD(String, doReplace, "(CC)Ljava/lang/String;"),
   FAST_NATIVE_METHOD(String, fastSubstring, "(II)Ljava/lang/String;"),
   FAST_NATIVE_METHOD(String, getCharsNoCheck, "(II[CI)V"),
   FAST_NATIVE_METHOD(String, intern, "()Ljava/lang/String;"),
   FAST_NATIVE_METHOD(String, toCharArray, "()[C"),
 };
 
diff --git a/runtime/native/java_lang_StringFactory.cc b/runtime/native/java_lang_StringFactory.cc
index 9086ee932d5019e60ad5e054407c77837621d505..de0a81e9a502b8d1b7c9de5ff9d2f17a685ae8fa 100644
--- a/runtime/native/java_lang_StringFactory.cc
+++ b/runtime/native/java_lang_StringFactory.cc
@@ -257,21 +257,21 @@ static jstring StringFactory_newStringFromUtf8Bytes(JNIEnv* env, jclass, jbyteAr
 
   // The bytes seen are ill-formed. Substitute them by U+FFFD
   if (utf8_bytes_needed != 0) {
     v[s++] = kReplacementChar;
   }
 
   ObjPtr<mirror::String> result = mirror::String::AllocFromUtf16(soa.Self(), s, v);
   return soa.AddLocalReference<jstring>(result);
 }
 
-static JNINativeMethod gMethods[] = {
+static const JNINativeMethod gMethods[] = {
   FAST_NATIVE_METHOD(StringFactory, newStringFromBytes, "([BIII)Ljava/lang/String;"),
   FAST_NATIVE_METHOD(StringFactory, newStringFromChars, "(II[C)Ljava/lang/String;"),
   FAST_NATIVE_METHOD(StringFactory, newStringFromString, "(Ljava/lang/String;)Ljava/lang/String;"),
   FAST_NATIVE_METHOD(StringFactory, newStringFromUtf8Bytes, "([BII)Ljava/lang/String;"),
 };
 
 void register_java_lang_StringFactory(JNIEnv* env) {
   REGISTER_NATIVE_METHODS("java/lang/StringFactory");
 }
 
diff --git a/runtime/native/java_lang_System.cc b/runtime/native/java_lang_System.cc
index 63cbd2c81587003f7b5607f5fdc7ff88873361fb..e7b3894aad3e9ba2c0bceffe9fa31ca1053393f8 100644
--- a/runtime/native/java_lang_System.cc
+++ b/runtime/native/java_lang_System.cc
@@ -232,21 +232,21 @@ static void System_arraycopyBooleanUnchecked(JNIEnv* env,
                                              jclass,
                                              jbooleanArray javaSrc,
                                              jint srcPos,
                                              jbooleanArray javaDst,
                                              jint dstPos,
                                              jint count) {
   System_arraycopyTUnchecked<mirror::BooleanArray, Primitive::kPrimBoolean>(env, javaSrc, srcPos,
       javaDst, dstPos, count);
 }
 
-static JNINativeMethod gMethods[] = {
+static const JNINativeMethod gMethods[] = {
   FAST_NATIVE_METHOD(System, arraycopy, "(Ljava/lang/Object;ILjava/lang/Object;II)V"),
   FAST_NATIVE_METHOD(System, arraycopyCharUnchecked, "([CI[CII)V"),
   FAST_NATIVE_METHOD(System, arraycopyByteUnchecked, "([BI[BII)V"),
   FAST_NATIVE_METHOD(System, arraycopyShortUnchecked, "([SI[SII)V"),
   FAST_NATIVE_METHOD(System, arraycopyIntUnchecked, "([II[III)V"),
   FAST_NATIVE_METHOD(System, arraycopyLongUnchecked, "([JI[JII)V"),
   FAST_NATIVE_METHOD(System, arraycopyFloatUnchecked, "([FI[FII)V"),
   FAST_NATIVE_METHOD(System, arraycopyDoubleUnchecked, "([DI[DII)V"),
   FAST_NATIVE_METHOD(System, arraycopyBooleanUnchecked, "([ZI[ZII)V"),
 };
diff --git a/runtime/native/java_lang_Thread.cc b/runtime/native/java_lang_Thread.cc
index c3b4fe09ded7e944cafd15a80c2df8e823a4c98b..8ff4e02605f2ca7053910942438e27db11b41700 100644
--- a/runtime/native/java_lang_Thread.cc
+++ b/runtime/native/java_lang_Thread.cc
@@ -186,21 +186,21 @@ static void Thread_sleep(JNIEnv* env, jclass, jobject java_lock, jlong ms, jint
 /*
  * Causes the thread to temporarily pause and allow other threads to execute.
  *
  * The exact behavior is poorly defined.  Some discussion here:
  *   http://www.cs.umd.edu/~pugh/java/memoryModel/archive/0944.html
  */
 static void Thread_yield(JNIEnv*, jobject) {
   sched_yield();
 }
 
-static JNINativeMethod gMethods[] = {
+static const JNINativeMethod gMethods[] = {
   FAST_NATIVE_METHOD(Thread, currentThread, "()Ljava/lang/Thread;"),
   FAST_NATIVE_METHOD(Thread, interrupted, "()Z"),
   FAST_NATIVE_METHOD(Thread, isInterrupted, "()Z"),
   NATIVE_METHOD(Thread, nativeCreate, "(Ljava/lang/Thread;JZ)V"),
   NATIVE_METHOD(Thread, nativeGetStatus, "(Z)I"),
   NATIVE_METHOD(Thread, holdsLock, "(Ljava/lang/Object;)Z"),
   FAST_NATIVE_METHOD(Thread, interrupt0, "()V"),
   NATIVE_METHOD(Thread, setNativeName, "(Ljava/lang/String;)V"),
   NATIVE_METHOD(Thread, setPriority0, "(I)V"),
   FAST_NATIVE_METHOD(Thread, sleep, "(Ljava/lang/Object;JI)V"),
diff --git a/runtime/native/java_lang_Throwable.cc b/runtime/native/java_lang_Throwable.cc
index b89e287481b959de5c79060e16bde232359376af..5cdd70c5135398ee4ec4b1460f6940c9f4a50bf2 100644
--- a/runtime/native/java_lang_Throwable.cc
+++ b/runtime/native/java_lang_Throwable.cc
@@ -31,20 +31,20 @@ static jobject Throwable_nativeFillInStackTrace(JNIEnv* env, jclass) {
 }
 
 static jobjectArray Throwable_nativeGetStackTrace(JNIEnv* env, jclass, jobject javaStackState) {
   if (javaStackState == nullptr) {
       return nullptr;
   }
   ScopedFastNativeObjectAccess soa(env);
   return Thread::InternalStackTraceToStackTraceElementArray(soa, javaStackState);
 }
 
-static JNINativeMethod gMethods[] = {
+static const JNINativeMethod gMethods[] = {
   FAST_NATIVE_METHOD(Throwable, nativeFillInStackTrace, "()Ljava/lang/Object;"),
   FAST_NATIVE_METHOD(Throwable, nativeGetStackTrace, "(Ljava/lang/Object;)[Ljava/lang/StackTraceElement;"),
 };
 
 void register_java_lang_Throwable(JNIEnv* env) {
   REGISTER_NATIVE_METHODS("java/lang/Throwable");
 }
 
 }  // namespace art
diff --git a/runtime/native/java_lang_VMClassLoader.cc b/runtime/native/java_lang_VMClassLoader.cc
index 11e02a2ce4b29fc363ddcdc4f0d7d120506c0c10..ce37a33086c77baf35b257974c7eecf7ac8a95dc 100644
--- a/runtime/native/java_lang_VMClassLoader.cc
+++ b/runtime/native/java_lang_VMClassLoader.cc
@@ -148,20 +148,20 @@ static jobjectArray VMClassLoader_getBootClassPathEntries(JNIEnv* env, jclass) {
     ScopedLocalRef<jstring> javaPath(env, env->NewStringUTF(location.c_str()));
     if (javaPath.get() == nullptr) {
       DCHECK(env->ExceptionCheck());
       return nullptr;
     }
     env->SetObjectArrayElement(array, i, javaPath.get());
   }
   return array;
 }
 
-static JNINativeMethod gMethods[] = {
+static const JNINativeMethod gMethods[] = {
   FAST_NATIVE_METHOD(VMClassLoader, findLoadedClass, "(Ljava/lang/ClassLoader;Ljava/lang/String;)Ljava/lang/Class;"),
   NATIVE_METHOD(VMClassLoader, getBootClassPathEntries, "()[Ljava/lang/String;"),
 };
 
 void register_java_lang_VMClassLoader(JNIEnv* env) {
   REGISTER_NATIVE_METHODS("java/lang/VMClassLoader");
 }
 
 }  // namespace art
diff --git a/runtime/native/java_lang_invoke_MethodHandleImpl.cc b/runtime/native/java_lang_invoke_MethodHandleImpl.cc
index 45d9a8abefb0aaca77a948879a1451287c057dc5..afeaa94ec5b3b6e5cac78359a660718debc5d595 100644
--- a/runtime/native/java_lang_invoke_MethodHandleImpl.cc
+++ b/runtime/native/java_lang_invoke_MethodHandleImpl.cc
@@ -56,19 +56,19 @@ static jobject MethodHandleImpl_getMemberInternal(JNIEnv* env, jobject thiz) {
   }
 
   if (UNLIKELY(h_object == nullptr)) {
     soa.Self()->AssertPendingOOMException();
     return nullptr;
   }
 
   return soa.AddLocalReference<jobject>(h_object.Get());
 }
 
-static JNINativeMethod gMethods[] = {
+static const JNINativeMethod gMethods[] = {
   NATIVE_METHOD(MethodHandleImpl, getMemberInternal, "()Ljava/lang/reflect/Member;"),
 };
 
 void register_java_lang_invoke_MethodHandleImpl(JNIEnv* env) {
   REGISTER_NATIVE_METHODS("java/lang/invoke/MethodHandleImpl");
 }
 
 }  // namespace art
diff --git a/runtime/native/java_lang_ref_FinalizerReference.cc b/runtime/native/java_lang_ref_FinalizerReference.cc
index 535b2434119c359d491a5887920c5d93a453d4af..0a8dfb6c09f36a4d3f486cc6c9530d95afe19009 100644
--- a/runtime/native/java_lang_ref_FinalizerReference.cc
+++ b/runtime/native/java_lang_ref_FinalizerReference.cc
@@ -35,20 +35,20 @@ static jboolean FinalizerReference_makeCircularListIfUnenqueued(JNIEnv* env, job
 }
 
 static jobject FinalizerReference_getReferent(JNIEnv* env, jobject javaThis) {
   ScopedFastNativeObjectAccess soa(env);
   const ObjPtr<mirror::Reference> ref = soa.Decode<mirror::Reference>(javaThis);
   const ObjPtr<mirror::Object> referent =
       Runtime::Current()->GetHeap()->GetReferenceProcessor()->GetReferent(soa.Self(), ref);
   return soa.AddLocalReference<jobject>(referent);
 }
 
-static JNINativeMethod gMethods[] = {
+static const JNINativeMethod gMethods[] = {
   FAST_NATIVE_METHOD(FinalizerReference, makeCircularListIfUnenqueued, "()Z"),
   FAST_NATIVE_METHOD(FinalizerReference, getReferent, "()Ljava/lang/Object;"),
 };
 
 void register_java_lang_ref_FinalizerReference(JNIEnv* env) {
   REGISTER_NATIVE_METHODS("java/lang/ref/FinalizerReference");
 }
 
 }  // namespace art
diff --git a/runtime/native/java_lang_ref_Reference.cc b/runtime/native/java_lang_ref_Reference.cc
index f23010bf48676b4e0af4eff2eb2dd442b35bde3e..e36287154f2b656cc921387ddf3462e6b6cabe5b 100644
--- a/runtime/native/java_lang_ref_Reference.cc
+++ b/runtime/native/java_lang_ref_Reference.cc
@@ -66,21 +66,21 @@ static jboolean Reference_refersTo0(JNIEnv* env, jobject javaThis, jobject o) {
   return gc::collector::ConcurrentCopying::GetFwdPtrUnchecked(referent.Ptr()) == other.Ptr() ?
       JNI_TRUE : JNI_FALSE;
 }
 
 static void Reference_clearReferent(JNIEnv* env, jobject javaThis) {
   ScopedFastNativeObjectAccess soa(env);
   const ObjPtr<mirror::Reference> ref = soa.Decode<mirror::Reference>(javaThis);
   Runtime::Current()->GetHeap()->GetReferenceProcessor()->ClearReferent(ref);
 }
 
-static JNINativeMethod gMethods[] = {
+static const JNINativeMethod gMethods[] = {
   FAST_NATIVE_METHOD(Reference, getReferent, "()Ljava/lang/Object;"),
   FAST_NATIVE_METHOD(Reference, clearReferent, "()V"),
   FAST_NATIVE_METHOD(Reference, refersTo0, "(Ljava/lang/Object;)Z"),
 };
 
 void register_java_lang_ref_Reference(JNIEnv* env) {
   REGISTER_NATIVE_METHODS("java/lang/ref/Reference");
 }
 
 }  // namespace art
diff --git a/runtime/native/java_lang_reflect_Array.cc b/runtime/native/java_lang_reflect_Array.cc
index ff94593cdf5a483df8859fef50522414c7bcc93d..e359e7d8a815616c42421772dcfaf5839715619a 100644
--- a/runtime/native/java_lang_reflect_Array.cc
+++ b/runtime/native/java_lang_reflect_Array.cc
@@ -67,20 +67,20 @@ static jobject Array_createObjectArray(JNIEnv* env, jclass, jclass javaElementCl
   }
   DCHECK(array_class->IsObjectArrayClass());
   ObjPtr<mirror::Array> new_array = mirror::ObjectArray<mirror::Object>::Alloc(
       soa.Self(),
       array_class,
       length,
       runtime->GetHeap()->GetCurrentAllocator());
   return soa.AddLocalReference<jobject>(new_array);
 }
 
-static JNINativeMethod gMethods[] = {
+static const JNINativeMethod gMethods[] = {
   FAST_NATIVE_METHOD(Array, createMultiArray, "(Ljava/lang/Class;[I)Ljava/lang/Object;"),
   FAST_NATIVE_METHOD(Array, createObjectArray, "(Ljava/lang/Class;I)Ljava/lang/Object;"),
 };
 
 void register_java_lang_reflect_Array(JNIEnv* env) {
   REGISTER_NATIVE_METHODS("java/lang/reflect/Array");
 }
 
 }  // namespace art
diff --git a/runtime/native/java_lang_reflect_Constructor.cc b/runtime/native/java_lang_reflect_Constructor.cc
index 1d362c030206e2ed7430b5a400223f16e049f6e4..16f5dedb4497445680cd1d0cf024e261e2de42d9 100644
--- a/runtime/native/java_lang_reflect_Constructor.cc
+++ b/runtime/native/java_lang_reflect_Constructor.cc
@@ -121,21 +121,21 @@ static jobject Constructor_newInstance0(JNIEnv* env, jobject javaMethod, jobject
   return javaReceiver;
 }
 
 static jobject Constructor_newInstanceFromSerialization(JNIEnv* env, jclass unused ATTRIBUTE_UNUSED,
                                                         jclass ctorClass, jclass allocClass) {
     jmethodID ctor = env->GetMethodID(ctorClass, "<init>", "()V");
     DCHECK(ctor != nullptr);
     return env->NewObject(allocClass, ctor);
 }
 
-static JNINativeMethod gMethods[] = {
+static const JNINativeMethod gMethods[] = {
   FAST_NATIVE_METHOD(Constructor, getExceptionTypes, "()[Ljava/lang/Class;"),
   FAST_NATIVE_METHOD(Constructor, newInstance0, "([Ljava/lang/Object;)Ljava/lang/Object;"),
   FAST_NATIVE_METHOD(Constructor, newInstanceFromSerialization, "(Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/Object;"),
 };
 
 void register_java_lang_reflect_Constructor(JNIEnv* env) {
   REGISTER_NATIVE_METHODS("java/lang/reflect/Constructor");
 }
 
 }  // namespace art
diff --git a/runtime/native/java_lang_reflect_Executable.cc b/runtime/native/java_lang_reflect_Executable.cc
index fef16b90994de88c707672eea82aacf8ec4cf29a..1acce4e5d3a21fdb79a2a9753d387ba3b4cd9b7d 100644
--- a/runtime/native/java_lang_reflect_Executable.cc
+++ b/runtime/native/java_lang_reflect_Executable.cc
@@ -376,21 +376,21 @@ static jobjectArray Executable_getParameterTypesInternal(JNIEnv* env, jobject ja
 static jint Executable_getParameterCountInternal(JNIEnv* env, jobject javaMethod) {
   ScopedFastNativeObjectAccess soa(env);
   ArtMethod* method = ArtMethod::FromReflectedMethod(soa, javaMethod);
   method = method->GetInterfaceMethodIfProxy(kRuntimePointerSize);
 
   const dex::TypeList* params = method->GetParameterTypeList();
   return (params == nullptr) ? 0 : params->Size();
 }
 
 
-static JNINativeMethod gMethods[] = {
+static const JNINativeMethod gMethods[] = {
   FAST_NATIVE_METHOD(Executable, compareMethodParametersInternal,
                      "(Ljava/lang/reflect/Method;)I"),
   FAST_NATIVE_METHOD(Executable, getAnnotationNative,
                      "(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;"),
   FAST_NATIVE_METHOD(Executable, getDeclaredAnnotationsNative,
                      "()[Ljava/lang/annotation/Annotation;"),
   FAST_NATIVE_METHOD(Executable, getParameterAnnotationsNative,
                      "()[[Ljava/lang/annotation/Annotation;"),
   FAST_NATIVE_METHOD(Executable, getMethodNameInternal, "()Ljava/lang/String;"),
   FAST_NATIVE_METHOD(Executable, getMethodReturnTypeInternal, "()Ljava/lang/Class;"),
diff --git a/runtime/native/java_lang_reflect_Field.cc b/runtime/native/java_lang_reflect_Field.cc
index cfc4a292ba103be262836f6a71d6872a100a6d31..7bbff9ba36b1b33cd89a8faaca9c1e65cbf84238 100644
--- a/runtime/native/java_lang_reflect_Field.cc
+++ b/runtime/native/java_lang_reflect_Field.cc
@@ -514,21 +514,21 @@ static jboolean Field_isAnnotationPresentNative(JNIEnv* env,
   ScopedFastNativeObjectAccess soa(env);
   StackHandleScope<1> hs(soa.Self());
   ArtField* field = soa.Decode<mirror::Field>(javaField)->GetArtField();
   if (field->GetDeclaringClass()->IsProxyClass()) {
     return false;
   }
   Handle<mirror::Class> klass(hs.NewHandle(soa.Decode<mirror::Class>(annotationType)));
   return annotations::IsFieldAnnotationPresent(field, klass);
 }
 
-static JNINativeMethod gMethods[] = {
+static const JNINativeMethod gMethods[] = {
   FAST_NATIVE_METHOD(Field, get,        "(Ljava/lang/Object;)Ljava/lang/Object;"),
   FAST_NATIVE_METHOD(Field, getBoolean, "(Ljava/lang/Object;)Z"),
   FAST_NATIVE_METHOD(Field, getByte,    "(Ljava/lang/Object;)B"),
   FAST_NATIVE_METHOD(Field, getChar,    "(Ljava/lang/Object;)C"),
   FAST_NATIVE_METHOD(Field, getAnnotationNative,
                 "(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;"),
   FAST_NATIVE_METHOD(Field, getArtField, "()J"),
   FAST_NATIVE_METHOD(Field, getDeclaredAnnotations, "()[Ljava/lang/annotation/Annotation;"),
   FAST_NATIVE_METHOD(Field, getSignatureAnnotation, "()[Ljava/lang/String;"),
   FAST_NATIVE_METHOD(Field, getDouble,  "(Ljava/lang/Object;)D"),
diff --git a/runtime/native/java_lang_reflect_Method.cc b/runtime/native/java_lang_reflect_Method.cc
index 2c0dd806e1bdef6f5f1d8772db2ee9559268cd2f..e052ba9b2c4d7bd01d8023e770d212900c09c6fc 100644
--- a/runtime/native/java_lang_reflect_Method.cc
+++ b/runtime/native/java_lang_reflect_Method.cc
@@ -79,21 +79,21 @@ static jobjectArray Method_getExceptionTypes(JNIEnv* env, jobject javaMethod) {
     }
   }
 }
 
 static jobject Method_invoke(JNIEnv* env, jobject javaMethod, jobject javaReceiver,
                              jobjectArray javaArgs) {
   ScopedFastNativeObjectAccess soa(env);
   return InvokeMethod<kRuntimePointerSize>(soa, javaMethod, javaReceiver, javaArgs);
 }
 
-static JNINativeMethod gMethods[] = {
+static const JNINativeMethod gMethods[] = {
   FAST_NATIVE_METHOD(Method, getDefaultValue, "()Ljava/lang/Object;"),
   FAST_NATIVE_METHOD(Method, getExceptionTypes, "()[Ljava/lang/Class;"),
   FAST_NATIVE_METHOD(Method, invoke, "(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;"),
 };
 
 void register_java_lang_reflect_Method(JNIEnv* env) {
   REGISTER_NATIVE_METHODS("java/lang/reflect/Method");
 }
 
 }  // namespace art
diff --git a/runtime/native/java_lang_reflect_Parameter.cc b/runtime/native/java_lang_reflect_Parameter.cc
index 263a56796ff6f95988fe5c33abf285b29d049f94..92bf9078a46733cfb80caf82f73c781cecd2e978 100644
--- a/runtime/native/java_lang_reflect_Parameter.cc
+++ b/runtime/native/java_lang_reflect_Parameter.cc
@@ -91,21 +91,21 @@ static jobject Parameter_getAnnotationNative(JNIEnv* env,
       }
     }
   }
 
   StackHandleScope<1> hs(soa.Self());
   Handle<mirror::Class> klass(hs.NewHandle(soa.Decode<mirror::Class>(annotationType)));
   return soa.AddLocalReference<jobject>(
       annotations::GetAnnotationForMethodParameter(method, parameterIndex, klass));
 }
 
-static JNINativeMethod gMethods[] = {
+static const JNINativeMethod gMethods[] = {
   FAST_NATIVE_METHOD(
       Parameter,
       getAnnotationNative,
       "(Ljava/lang/reflect/Executable;ILjava/lang/Class;)Ljava/lang/annotation/Annotation;"),
 };
 
 void register_java_lang_reflect_Parameter(JNIEnv* env) {
   REGISTER_NATIVE_METHODS("java/lang/reflect/Parameter");
 }
 
diff --git a/runtime/native/java_lang_reflect_Proxy.cc b/runtime/native/java_lang_reflect_Proxy.cc
index f723ed223d4bb779e4d84bd12be03bb38799b257..c2b533de5db61ab56816167b99c1fd175e5bfd18 100644
--- a/runtime/native/java_lang_reflect_Proxy.cc
+++ b/runtime/native/java_lang_reflect_Proxy.cc
@@ -30,19 +30,19 @@
 namespace art {
 
 static jclass Proxy_generateProxy(JNIEnv* env, jclass, jstring name, jobjectArray interfaces,
                                   jobject loader, jobjectArray methods, jobjectArray throws) {
   ScopedFastNativeObjectAccess soa(env);
   ClassLinker* class_linker = Runtime::Current()->GetClassLinker();
   return soa.AddLocalReference<jclass>(class_linker->CreateProxyClass(
       soa, name, interfaces, loader, methods, throws));
 }
 
-static JNINativeMethod gMethods[] = {
+static const JNINativeMethod gMethods[] = {
   FAST_NATIVE_METHOD(Proxy, generateProxy, "(Ljava/lang/String;[Ljava/lang/Class;Ljava/lang/ClassLoader;[Ljava/lang/reflect/Method;[[Ljava/lang/Class;)Ljava/lang/Class;"),
 };
 
 void register_java_lang_reflect_Proxy(JNIEnv* env) {
   REGISTER_NATIVE_METHODS("java/lang/reflect/Proxy");
 }
 
 }  // namespace art
diff --git a/runtime/native/java_util_concurrent_atomic_AtomicLong.cc b/runtime/native/java_util_concurrent_atomic_AtomicLong.cc
index fa288edcb8f7d8d6ecc48bb646f61d86e4f79928..299ac5a61daad0f79f4febc9d9d03d09d7601804 100644
--- a/runtime/native/java_util_concurrent_atomic_AtomicLong.cc
+++ b/runtime/native/java_util_concurrent_atomic_AtomicLong.cc
@@ -23,19 +23,19 @@
 #include "base/quasi_atomic.h"
 #include "jni/jni_internal.h"
 #include "native_util.h"
 
 namespace art {
 
 static jboolean AtomicLong_VMSupportsCS8(JNIEnv*, jclass) {
   return QuasiAtomic::LongAtomicsUseMutexes(kRuntimeISA) ? JNI_FALSE : JNI_TRUE;
 }
 
-static JNINativeMethod gMethods[] = {
+static const JNINativeMethod gMethods[] = {
   NATIVE_METHOD(AtomicLong, VMSupportsCS8, "()Z"),
 };
 
 void register_java_util_concurrent_atomic_AtomicLong(JNIEnv* env) {
   REGISTER_NATIVE_METHODS("java/util/concurrent/atomic/AtomicLong");
 }
 
 }  // namespace art
diff --git a/runtime/native/libcore_util_CharsetUtils.cc b/runtime/native/libcore_util_CharsetUtils.cc
index f0764f1d745b81efdfd95fffd12e7025f0f70ace..d9303a9b9311f69cdca9097c1908732972b9d0b2 100644
--- a/runtime/native/libcore_util_CharsetUtils.cc
+++ b/runtime/native/libcore_util_CharsetUtils.cc
@@ -176,21 +176,21 @@ static jbyteArray CharsetUtils_toUtf8Bytes(JNIEnv* env, jclass, jstring java_str
 
   if (compressed) {
     memcpy(result->GetData(), string->GetValueCompressed() + offset, length);
   } else {
     int8_t* data = result->GetData();
     visit_chars16([&data](jbyte c) { *data++ = c; });
   }
   return soa.AddLocalReference<jbyteArray>(result);
 }
 
-static JNINativeMethod gMethods[] = {
+static const JNINativeMethod gMethods[] = {
   FAST_NATIVE_METHOD(CharsetUtils, asciiBytesToChars, "([BII[C)V"),
   FAST_NATIVE_METHOD(CharsetUtils, isoLatin1BytesToChars, "([BII[C)V"),
   FAST_NATIVE_METHOD(CharsetUtils, toAsciiBytes, "(Ljava/lang/String;II)[B"),
   FAST_NATIVE_METHOD(CharsetUtils, toIsoLatin1Bytes, "(Ljava/lang/String;II)[B"),
   FAST_NATIVE_METHOD(CharsetUtils, toUtf8Bytes, "(Ljava/lang/String;II)[B"),
 };
 
 void register_libcore_util_CharsetUtils(JNIEnv* env) {
   REGISTER_NATIVE_METHODS("libcore/util/CharsetUtils");
 }
diff --git a/runtime/native/org_apache_harmony_dalvik_ddmc_DdmServer.cc b/runtime/native/org_apache_harmony_dalvik_ddmc_DdmServer.cc
index 419aed85787f1c9ee3f6fa65a3df7178e40772ca..ccbef4f3f4e8577addc8cc10870d95b244945ebb 100644
--- a/runtime/native/org_apache_harmony_dalvik_ddmc_DdmServer.cc
+++ b/runtime/native/org_apache_harmony_dalvik_ddmc_DdmServer.cc
@@ -31,19 +31,19 @@ namespace art {
 static void DdmServer_nativeSendChunk(JNIEnv* env, jclass, jint type,
                                       jbyteArray javaData, jint offset, jint length) {
   ScopedFastNativeObjectAccess soa(env);
   ScopedByteArrayRO data(env, javaData);
   DCHECK_LE(offset + length, static_cast<int32_t>(data.size()));
   ArrayRef<const uint8_t> chunk(reinterpret_cast<const uint8_t*>(&data[offset]),
                                 static_cast<size_t>(length));
   Runtime::Current()->GetRuntimeCallbacks()->DdmPublishChunk(static_cast<uint32_t>(type), chunk);
 }
 
-static JNINativeMethod gMethods[] = {
+static const JNINativeMethod gMethods[] = {
   FAST_NATIVE_METHOD(DdmServer, nativeSendChunk, "(I[BII)V"),
 };
 
 void register_org_apache_harmony_dalvik_ddmc_DdmServer(JNIEnv* env) {
   REGISTER_NATIVE_METHODS("org/apache/harmony/dalvik/ddmc/DdmServer");
 }
 
 }  // namespace art
diff --git a/runtime/native/org_apache_harmony_dalvik_ddmc_DdmVmInternal.cc b/runtime/native/org_apache_harmony_dalvik_ddmc_DdmVmInternal.cc
index f74e1206f58d5a202176c00b43fe771333b64fbd..044364cc45f830df7c238937b206f7ead6022392 100644
--- a/runtime/native/org_apache_harmony_dalvik_ddmc_DdmVmInternal.cc
+++ b/runtime/native/org_apache_harmony_dalvik_ddmc_DdmVmInternal.cc
@@ -202,21 +202,21 @@ static jbyteArray DdmVmInternal_getThreadStats(JNIEnv* env, jclass) {
     thread_list->ForEach(ThreadStatsGetterCallback, &bytes);
   }
 
   jbyteArray result = env->NewByteArray(bytes.size());
   if (result != nullptr) {
     env->SetByteArrayRegion(result, 0, bytes.size(), reinterpret_cast<const jbyte*>(&bytes[0]));
   }
   return result;
 }
 
-static JNINativeMethod gMethods[] = {
+static const JNINativeMethod gMethods[] = {
   NATIVE_METHOD(DdmVmInternal, setRecentAllocationsTrackingEnabled, "(Z)V"),
   NATIVE_METHOD(DdmVmInternal, setThreadNotifyEnabled, "(Z)V"),
   NATIVE_METHOD(DdmVmInternal, getStackTraceById, "(I)[Ljava/lang/StackTraceElement;"),
   NATIVE_METHOD(DdmVmInternal, getThreadStats, "()[B"),
 };
 
 void register_org_apache_harmony_dalvik_ddmc_DdmVmInternal(JNIEnv* env) {
   REGISTER_NATIVE_METHODS("org/apache/harmony/dalvik/ddmc/DdmVmInternal");
 }
 
diff --git a/runtime/native/sun_misc_Unsafe.cc b/runtime/native/sun_misc_Unsafe.cc
index 5014f340cdd87201936a223d83e021b32c9ca568..bb9226d1fa9b7b0efb70abc537c551f62df95367 100644
--- a/runtime/native/sun_misc_Unsafe.cc
+++ b/runtime/native/sun_misc_Unsafe.cc
@@ -534,21 +534,21 @@ static void Unsafe_unpark(JNIEnv* env, jobject, jobject jthread) {
     // or the thread has already terminated. Setting the field to true will be
     // respected when the thread does start, and is harmless if the thread has
     // already terminated.
     ArtField* unparked =
         jni::DecodeArtField(WellKnownClasses::java_lang_Thread_unparkedBeforeStart);
     // JNI must use non transactional mode.
     unparked->SetBoolean<false>(soa.Decode<mirror::Object>(jthread), JNI_TRUE);
   }
 }
 
-static JNINativeMethod gMethods[] = {
+static const JNINativeMethod gMethods[] = {
   FAST_NATIVE_METHOD(Unsafe, compareAndSwapInt, "(Ljava/lang/Object;JII)Z"),
   FAST_NATIVE_METHOD(Unsafe, compareAndSwapLong, "(Ljava/lang/Object;JJJ)Z"),
   FAST_NATIVE_METHOD(Unsafe, compareAndSwapObject, "(Ljava/lang/Object;JLjava/lang/Object;Ljava/lang/Object;)Z"),
   FAST_NATIVE_METHOD(Unsafe, getIntVolatile, "(Ljava/lang/Object;J)I"),
   FAST_NATIVE_METHOD(Unsafe, putIntVolatile, "(Ljava/lang/Object;JI)V"),
   FAST_NATIVE_METHOD(Unsafe, getLongVolatile, "(Ljava/lang/Object;J)J"),
   FAST_NATIVE_METHOD(Unsafe, putLongVolatile, "(Ljava/lang/Object;JJ)V"),
   FAST_NATIVE_METHOD(Unsafe, getObjectVolatile, "(Ljava/lang/Object;J)Ljava/lang/Object;"),
   FAST_NATIVE_METHOD(Unsafe, putObjectVolatile, "(Ljava/lang/Object;JLjava/lang/Object;)V"),
   FAST_NATIVE_METHOD(Unsafe, getInt, "(Ljava/lang/Object;J)I"),
