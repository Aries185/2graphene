commit ad338d1dca0db3a3e9dce24ebc2c1155f083efb1
Author: Jessie Hao <juan.hao@nxp.com>
Date:   Wed 2020-10-21 13:21:30+0800

    Fix Gallery keeps stopping issue when edit and save a picture.
    
    Edit picture in Gallery, meet "Gallery keeps stopping" when try to save
    picture.
    E AndroidRuntime: Process: com.android.gallery3d, PID: 3740
    E AndroidRuntime: java.lang.NullPointerException: Attempt to invoke virtual method
    'boolean java.lang.String.equals(java.lang.Object)' on a null object reference
    E AndroidRuntime:       at com.android.gallery3d.filtershow.tools.SaveImage.getExifData(SaveImage.java:250)
    E AndroidRuntime:       at com.android.gallery3d.filtershow.tools.SaveImage.processAndSaveImage(SaveImage.java:369)
    
    Add nullpointer check to avoid crash.
    
    Signed-off-by: Jessie Hao <juan.hao@nxp.com>
    Change-Id: Ia41dffa6a2bbeadd6121293b0eea78a268347778
---
 src/com/android/gallery3d/filtershow/tools/SaveImage.java | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/com/android/gallery3d/filtershow/tools/SaveImage.java b/src/com/android/gallery3d/filtershow/tools/SaveImage.java
index 17d698f15fb6a99747fe2e387f340301ff642db4..a2a986763a45b2f17647a0e85141beb71d726329 100644
--- a/src/com/android/gallery3d/filtershow/tools/SaveImage.java
+++ b/src/com/android/gallery3d/filtershow/tools/SaveImage.java
@@ -240,21 +240,21 @@ public class SaveImage {
         }
         return false;
     }
 
     public ExifInterface getExifData(Uri source) {
         ExifInterface exif = new ExifInterface();
         String mimeType = mContext.getContentResolver().getType(mSelectedImageUri);
         if (mimeType == null) {
             mimeType = ImageLoader.getMimeType(mSelectedImageUri);
         }
-        if (mimeType.equals(ImageLoader.JPEG_MIME_TYPE)) {
+        if ((mimeType != null) && mimeType.equals(ImageLoader.JPEG_MIME_TYPE)) {
             InputStream inStream = null;
             try {
                 inStream = mContext.getContentResolver().openInputStream(source);
                 exif.readExif(inStream);
             } catch (FileNotFoundException e) {
                 Log.w(LOGTAG, "Cannot find file: " + source, e);
             } catch (IOException e) {
                 Log.w(LOGTAG, "Cannot read exif for: " + source, e);
             } finally {
                 Utils.closeSilently(inStream);

commit 792334fdc5316ae291a67c1af35b95d6cb95243f (HEAD, tag: RQ2A.210305.006.2021.03.02.10, tag: RQ1A.210205.004.2021.02.02.09, tag: RQ1A.210105.002.2021.01.05.03, m/master)
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Mon 2020-11-02 11:14:05-0500

    constify JNINativeMethod tables
---
 jni_jpegstream/src/jpegstream.cpp | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/jni_jpegstream/src/jpegstream.cpp b/jni_jpegstream/src/jpegstream.cpp
index afff64ce1b85115276f80d389621dcf92436fe07..4214944ab3d3d15d76faff4a94302cd5126fffb6 100644
--- a/jni_jpegstream/src/jpegstream.cpp
+++ b/jni_jpegstream/src/jpegstream.cpp
@@ -289,34 +289,34 @@ static jint InputStream_skipDecodedBytes(JNIEnv* env, jobject thiz,
     // Read with null buffer to skip
     skip = r_ptr->read(NULL, 0, bytes);
     return skip;
 }
 
 static const char *outClassPathName =
         "com/android/gallery3d/jpegstream/JPEGOutputStream";
 static const char *inClassPathName =
         "com/android/gallery3d/jpegstream/JPEGInputStream";
 
-static JNINativeMethod writeMethods[] = { { "setup",
+static const JNINativeMethod writeMethods[] = { { "setup",
         "(Ljava/io/OutputStream;IIII)I", (void*) OutputStream_setup }, {
         "cleanup", "()V", (void*) OutputStream_cleanup }, { "writeInputBytes",
         "([BII)I", (void*) OutputStream_writeInputBytes } };
 
-static JNINativeMethod readMethods[] = { { "setup",
+static const JNINativeMethod readMethods[] = { { "setup",
         "(Landroid/graphics/Point;Ljava/io/InputStream;I)I",
         (void*) InputStream_setup }, { "cleanup", "()V",
         (void*) InputStream_cleanup }, { "readDecodedBytes", "([BII)I",
         (void*) InputStream_readDecodedBytes }, { "skipDecodedBytes", "(I)I",
         (void*) InputStream_skipDecodedBytes } };
 
 static int registerNativeMethods(JNIEnv* env, const char* className,
-        JNINativeMethod* gMethods, int numMethods) {
+        const JNINativeMethod* gMethods, int numMethods) {
     jclass clazz;
     clazz = env->FindClass(className);
     if (clazz == NULL) {
         LOGE("Native registration unable to find class '%s'", className);
         return JNI_FALSE;
     }
     if (env->RegisterNatives(clazz, gMethods, numMethods) < 0) {
         LOGE("RegisterNatives failed for '%s'", className);
         return JNI_FALSE;
     }
