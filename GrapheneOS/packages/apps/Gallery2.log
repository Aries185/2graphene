commit 6841b0a3062759c00870128bc90fc26277f49717 (HEAD, tag: SQ1A.220105.002.2022010500, m/master, grapheneos/12)
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Mon 2020-11-02 11:14:05-0500

    constify JNINativeMethod tables
---
 jni_jpegstream/src/jpegstream.cpp | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/jni_jpegstream/src/jpegstream.cpp b/jni_jpegstream/src/jpegstream.cpp
index afff64ce1b85115276f80d389621dcf92436fe07..4214944ab3d3d15d76faff4a94302cd5126fffb6 100644
--- a/jni_jpegstream/src/jpegstream.cpp
+++ b/jni_jpegstream/src/jpegstream.cpp
@@ -289,34 +289,34 @@ static jint InputStream_skipDecodedBytes(JNIEnv* env, jobject thiz,
     // Read with null buffer to skip
     skip = r_ptr->read(NULL, 0, bytes);
     return skip;
 }
 
 static const char *outClassPathName =
         "com/android/gallery3d/jpegstream/JPEGOutputStream";
 static const char *inClassPathName =
         "com/android/gallery3d/jpegstream/JPEGInputStream";
 
-static JNINativeMethod writeMethods[] = { { "setup",
+static const JNINativeMethod writeMethods[] = { { "setup",
         "(Ljava/io/OutputStream;IIII)I", (void*) OutputStream_setup }, {
         "cleanup", "()V", (void*) OutputStream_cleanup }, { "writeInputBytes",
         "([BII)I", (void*) OutputStream_writeInputBytes } };
 
-static JNINativeMethod readMethods[] = { { "setup",
+static const JNINativeMethod readMethods[] = { { "setup",
         "(Landroid/graphics/Point;Ljava/io/InputStream;I)I",
         (void*) InputStream_setup }, { "cleanup", "()V",
         (void*) InputStream_cleanup }, { "readDecodedBytes", "([BII)I",
         (void*) InputStream_readDecodedBytes }, { "skipDecodedBytes", "(I)I",
         (void*) InputStream_skipDecodedBytes } };
 
 static int registerNativeMethods(JNIEnv* env, const char* className,
-        JNINativeMethod* gMethods, int numMethods) {
+        const JNINativeMethod* gMethods, int numMethods) {
     jclass clazz;
     clazz = env->FindClass(className);
     if (clazz == NULL) {
         LOGE("Native registration unable to find class '%s'", className);
         return JNI_FALSE;
     }
     if (env->RegisterNatives(clazz, gMethods, numMethods) < 0) {
         LOGE("RegisterNatives failed for '%s'", className);
         return JNI_FALSE;
     }
