commit 71b1526986758530fab2ff9ad2c3f6f53f9015d2
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Wed 2020-09-09 01:00:19-0400

    constify JNINativeMethod tables
---
 jni/com_android_bluetooth_a2dp.cpp                        | 2 +-
 jni/com_android_bluetooth_a2dp_sink.cpp                   | 2 +-
 jni/com_android_bluetooth_avrcp_controller.cpp            | 2 +-
 jni/com_android_bluetooth_avrcp_target.cpp                | 2 +-
 jni/com_android_bluetooth_btservice_AdapterService.cpp    | 2 +-
 jni/com_android_bluetooth_btservice_BluetoothKeystore.cpp | 2 +-
 jni/com_android_bluetooth_gatt.cpp                        | 8 ++++----
 jni/com_android_bluetooth_hearing_aid.cpp                 | 2 +-
 jni/com_android_bluetooth_hfp.cpp                         | 2 +-
 jni/com_android_bluetooth_hfpclient.cpp                   | 2 +-
 jni/com_android_bluetooth_hid_device.cpp                  | 2 +-
 jni/com_android_bluetooth_hid_host.cpp                    | 2 +-
 jni/com_android_bluetooth_pan.cpp                         | 2 +-
 jni/com_android_bluetooth_sdp.cpp                         | 2 +-
 14 files changed, 17 insertions(+), 17 deletions(-)

diff --git a/jni/com_android_bluetooth_a2dp.cpp b/jni/com_android_bluetooth_a2dp.cpp
index a94990437cc1df0d7eb6919c09870ba7aff96582..1f05608602d04303696102a5032fa611872f0b33 100644
--- a/jni/com_android_bluetooth_a2dp.cpp
+++ b/jni/com_android_bluetooth_a2dp.cpp
@@ -498,21 +498,21 @@ static jboolean setCodecConfigPreferenceNative(JNIEnv* env, jobject object,
 
   bt_status_t status =
       sBluetoothA2dpInterface->config_codec(bd_addr, codec_preferences);
   if (status != BT_STATUS_SUCCESS) {
     ALOGE("%s: Failed codec configuration, status: %d", __func__, status);
   }
   env->ReleaseByteArrayElements(address, addr, 0);
   return (status == BT_STATUS_SUCCESS) ? JNI_TRUE : JNI_FALSE;
 }
 
-static JNINativeMethod sMethods[] = {
+static const JNINativeMethod sMethods[] = {
     {"classInitNative", "()V", (void*)classInitNative},
     {"initNative",
      "(I[Landroid/bluetooth/BluetoothCodecConfig;[Landroid/bluetooth/BluetoothCodecConfig;)V",
      (void*)initNative},
     {"cleanupNative", "()V", (void*)cleanupNative},
     {"connectA2dpNative", "([B)Z", (void*)connectA2dpNative},
     {"disconnectA2dpNative", "([B)Z", (void*)disconnectA2dpNative},
     {"setSilenceDeviceNative", "([BZ)Z", (void*)setSilenceDeviceNative},
     {"setActiveDeviceNative", "([B)Z", (void*)setActiveDeviceNative},
     {"setCodecConfigPreferenceNative",
diff --git a/jni/com_android_bluetooth_a2dp_sink.cpp b/jni/com_android_bluetooth_a2dp_sink.cpp
index 87668ff1f6fdd9c3a2d083209d483b848b48cb19..8a2332ba54f7d27dfe95edbf630d0cdfa3e5f0b4 100644
--- a/jni/com_android_bluetooth_a2dp_sink.cpp
+++ b/jni/com_android_bluetooth_a2dp_sink.cpp
@@ -234,21 +234,21 @@ static jboolean setActiveDeviceNative(JNIEnv* env, jobject object,
   rawAddress.FromOctets((uint8_t*)addr);
   bt_status_t status = sBluetoothA2dpInterface->set_active_device(rawAddress);
   if (status != BT_STATUS_SUCCESS) {
     ALOGE("Failed sending passthru command, status: %d", status);
   }
   env->ReleaseByteArrayElements(address, addr, 0);
 
   return (status == BT_STATUS_SUCCESS) ? JNI_TRUE : JNI_FALSE;
 }
 
-static JNINativeMethod sMethods[] = {
+static const JNINativeMethod sMethods[] = {
     {"classInitNative", "()V", (void*)classInitNative},
     {"initNative", "()V", (void*)initNative},
     {"cleanupNative", "()V", (void*)cleanupNative},
     {"connectA2dpNative", "([B)Z", (void*)connectA2dpNative},
     {"disconnectA2dpNative", "([B)Z", (void*)disconnectA2dpNative},
     {"informAudioFocusStateNative", "(I)V", (void*)informAudioFocusStateNative},
     {"informAudioTrackGainNative", "(F)V", (void*)informAudioTrackGainNative},
     {"setActiveDeviceNative", "([B)Z", (void*)setActiveDeviceNative},
 };
 
diff --git a/jni/com_android_bluetooth_avrcp_controller.cpp b/jni/com_android_bluetooth_avrcp_controller.cpp
index 86bf0687913e240dc2d33de8985bb739eec585c7..642f73ea3d4430890961a41102d8daf1d812feb8 100755
--- a/jni/com_android_bluetooth_avrcp_controller.cpp
+++ b/jni/com_android_bluetooth_avrcp_controller.cpp
@@ -1277,21 +1277,21 @@ static void playItemNative(JNIEnv* env, jobject object, jbyteArray address,
 
   ALOGI("%s: sBluetoothAvrcpInterface: %p", __func__, sBluetoothAvrcpInterface);
   bt_status_t status = sBluetoothAvrcpInterface->play_item_cmd(
       rawAddress, (uint8_t)scope, (uint8_t*)&uid, (uint16_t)uidCounter);
   if (status != BT_STATUS_SUCCESS) {
     ALOGE("Failed sending playItemNative command, status: %d", status);
   }
   env->ReleaseByteArrayElements(address, addr, 0);
 }
 
-static JNINativeMethod sMethods[] = {
+static const JNINativeMethod sMethods[] = {
     {"classInitNative", "()V", (void*)classInitNative},
     {"initNative", "()V", (void*)initNative},
     {"cleanupNative", "()V", (void*)cleanupNative},
     {"sendPassThroughCommandNative", "([BII)Z",
      (void*)sendPassThroughCommandNative},
     {"sendGroupNavigationCommandNative", "([BII)Z",
      (void*)sendGroupNavigationCommandNative},
     {"setPlayerApplicationSettingValuesNative", "([BB[B[B)V",
      (void*)setPlayerApplicationSettingValuesNative},
     {"sendAbsVolRspNative", "([BII)V", (void*)sendAbsVolRspNative},
diff --git a/jni/com_android_bluetooth_avrcp_target.cpp b/jni/com_android_bluetooth_avrcp_target.cpp
index 22c954c63c16ee765c5e9b3e53a77ac80f6fbbae..d566efcbced6d8362faf8644e497670698e0703d 100644
--- a/jni/com_android_bluetooth_avrcp_target.cpp
+++ b/jni/com_android_bluetooth_avrcp_target.cpp
@@ -801,21 +801,21 @@ static void sendVolumeChangedNative(JNIEnv* env, jobject object,
 
 static void setVolume(int8_t volume) {
   ALOGD("%s", __func__);
   std::shared_lock<std::shared_timed_mutex> lock(callbacks_mutex);
   CallbackEnv sCallbackEnv(__func__);
   if (!sCallbackEnv.valid() || !mJavaInterface) return;
 
   sCallbackEnv->CallVoidMethod(mJavaInterface, method_setVolume, volume);
 }
 
-static JNINativeMethod sMethods[] = {
+static const JNINativeMethod sMethods[] = {
     {"classInitNative", "()V", (void*)classInitNative},
     {"initNative", "()V", (void*)initNative},
     {"sendMediaUpdateNative", "(ZZZ)V", (void*)sendMediaUpdateNative},
     {"sendFolderUpdateNative", "(ZZZ)V", (void*)sendFolderUpdateNative},
     {"setBrowsedPlayerResponseNative", "(IZLjava/lang/String;I)V",
      (void*)setBrowsedPlayerResponseNative},
     {"getFolderItemsResponseNative", "(Ljava/lang/String;Ljava/util/List;)V",
      (void*)getFolderItemsResponseNative},
     {"cleanupNative", "()V", (void*)cleanupNative},
     {"connectDeviceNative", "(Ljava/lang/String;)Z",
diff --git a/jni/com_android_bluetooth_btservice_AdapterService.cpp b/jni/com_android_bluetooth_btservice_AdapterService.cpp
index 3e4d272898018f90a79c4e7e0cd276e0fc1a5bad..6c7c514572da9d5f89927226e750ae61c362704c 100644
--- a/jni/com_android_bluetooth_btservice_AdapterService.cpp
+++ b/jni/com_android_bluetooth_btservice_AdapterService.cpp
@@ -1301,21 +1301,21 @@ static int getMetricIdNative(JNIEnv* env, jobject obj, jbyteArray address) {
   jbyte* addr = env->GetByteArrayElements(address, nullptr);
   if (addr == nullptr) {
     jniThrowIOException(env, EINVAL);
     return 0;
   }
   RawAddress addr_obj = {};
   addr_obj.FromOctets((uint8_t*)addr);
   return sBluetoothInterface->get_metric_id(addr_obj);
 }
 
-static JNINativeMethod sMethods[] = {
+static const JNINativeMethod sMethods[] = {
     /* name, signature, funcPtr */
     {"classInitNative", "()V", (void*)classInitNative},
     {"initNative", "(ZZIZ)Z", (void*)initNative},
     {"cleanupNative", "()V", (void*)cleanupNative},
     {"enableNative", "()Z", (void*)enableNative},
     {"disableNative", "()Z", (void*)disableNative},
     {"setAdapterPropertyNative", "(I[B)Z", (void*)setAdapterPropertyNative},
     {"getAdapterPropertiesNative", "()Z", (void*)getAdapterPropertiesNative},
     {"getAdapterPropertyNative", "(I)Z", (void*)getAdapterPropertyNative},
     {"getDevicePropertyNative", "([BI)Z", (void*)getDevicePropertyNative},
diff --git a/jni/com_android_bluetooth_btservice_BluetoothKeystore.cpp b/jni/com_android_bluetooth_btservice_BluetoothKeystore.cpp
index bceea1d735b7e7654fa05b87718f6e9cef51c0a8..6b8a317bcd774bc10a398283c1a82cd9770cf517 100644
--- a/jni/com_android_bluetooth_btservice_BluetoothKeystore.cpp
+++ b/jni/com_android_bluetooth_btservice_BluetoothKeystore.cpp
@@ -148,21 +148,21 @@ static void cleanupNative(JNIEnv* env, jobject object) {
   if (sBluetoothKeystoreInterface != nullptr) {
     sBluetoothKeystoreInterface = nullptr;
   }
 
   if (mCallbacksObj != nullptr) {
     env->DeleteGlobalRef(mCallbacksObj);
     mCallbacksObj = nullptr;
   }
 }
 
-static JNINativeMethod sMethods[] = {
+static const JNINativeMethod sMethods[] = {
     {"classInitNative", "()V", (void*)classInitNative},
     {"initNative", "()V", (void*)initNative},
     {"cleanupNative", "()V", (void*)cleanupNative},
 };
 
 int register_com_android_bluetooth_btservice_BluetoothKeystore(JNIEnv* env) {
   return jniRegisterNativeMethods(
       env,
       "com/android/bluetooth/btservice/bluetoothkeystore/"
       "BluetoothKeystoreNativeInterface",
diff --git a/jni/com_android_bluetooth_gatt.cpp b/jni/com_android_bluetooth_gatt.cpp
index 64db277f03c2b7af0ef87e449200dd6cbb40dbb2..0aa06af5e1f3265fa377b1c5a6d5fd8c8fdd2abf 100644
--- a/jni/com_android_bluetooth_gatt.cpp
+++ b/jni/com_android_bluetooth_gatt.cpp
@@ -2057,21 +2057,21 @@ static void gattTestNative(JNIEnv* env, jobject object, jint command,
   params.u4 = p4;
   params.u5 = p5;
   sGattIf->client->test_command(command, params);
 }
 
 /**
  * JNI function definitinos
  */
 
 // JNI functions defined in AdvertiseManager class.
-static JNINativeMethod sAdvertiseMethods[] = {
+static const JNINativeMethod sAdvertiseMethods[] = {
     {"classInitNative", "()V", (void*)advertiseClassInitNative},
     {"initializeNative", "()V", (void*)advertiseInitializeNative},
     {"cleanupNative", "()V", (void*)advertiseCleanupNative},
     {"startAdvertisingSetNative",
      "(Landroid/bluetooth/le/AdvertisingSetParameters;[B[BLandroid/bluetooth/"
      "le/PeriodicAdvertisingParameters;[BIII)V",
      (void*)startAdvertisingSetNative},
     {"getOwnAddressNative", "(I)V", (void*)getOwnAddressNative},
     {"stopAdvertisingSetNative", "(I)V", (void*)stopAdvertisingSetNative},
     {"enableAdvertisingSetNative", "(IZII)V",
@@ -2084,30 +2084,30 @@ static JNINativeMethod sAdvertiseMethods[] = {
     {"setPeriodicAdvertisingParametersNative",
      "(ILandroid/bluetooth/le/PeriodicAdvertisingParameters;)V",
      (void*)setPeriodicAdvertisingParametersNative},
     {"setPeriodicAdvertisingDataNative", "(I[B)V",
      (void*)setPeriodicAdvertisingDataNative},
     {"setPeriodicAdvertisingEnableNative", "(IZ)V",
      (void*)setPeriodicAdvertisingEnableNative},
 };
 
 // JNI functions defined in PeriodicScanManager class.
-static JNINativeMethod sPeriodicScanMethods[] = {
+static const JNINativeMethod sPeriodicScanMethods[] = {
     {"classInitNative", "()V", (void*)periodicScanClassInitNative},
     {"initializeNative", "()V", (void*)periodicScanInitializeNative},
     {"cleanupNative", "()V", (void*)periodicScanCleanupNative},
     {"startSyncNative", "(ILjava/lang/String;III)V", (void*)startSyncNative},
     {"stopSyncNative", "(I)V", (void*)stopSyncNative},
 };
 
 // JNI functions defined in ScanManager class.
-static JNINativeMethod sScanMethods[] = {
+static const JNINativeMethod sScanMethods[] = {
     {"registerScannerNative", "(JJ)V", (void*)registerScannerNative},
     {"unregisterScannerNative", "(I)V", (void*)unregisterScannerNative},
     {"gattClientScanNative", "(Z)V", (void*)gattClientScanNative},
     // Batch scan JNI functions.
     {"gattClientConfigBatchScanStorageNative", "(IIII)V",
      (void*)gattClientConfigBatchScanStorageNative},
     {"gattClientStartBatchScanNative", "(IIIIII)V",
      (void*)gattClientStartBatchScanNative},
     {"gattClientStopBatchScanNative", "(I)V",
      (void*)gattClientStopBatchScanNative},
@@ -2126,21 +2126,21 @@ static JNINativeMethod sScanMethods[] = {
      (void*)gattClientScanFilterAddNative},
     {"gattClientScanFilterClearNative", "(II)V",
      (void*)gattClientScanFilterClearNative},
     {"gattClientScanFilterEnableNative", "(IZ)V",
      (void*)gattClientScanFilterEnableNative},
     {"gattSetScanParametersNative", "(III)V",
      (void*)gattSetScanParametersNative},
 };
 
 // JNI functions defined in GattService class.
-static JNINativeMethod sMethods[] = {
+static const JNINativeMethod sMethods[] = {
     {"classInitNative", "()V", (void*)classInitNative},
     {"initializeNative", "()V", (void*)initializeNative},
     {"cleanupNative", "()V", (void*)cleanupNative},
     {"gattClientGetDeviceTypeNative", "(Ljava/lang/String;)I",
      (void*)gattClientGetDeviceTypeNative},
     {"gattClientRegisterAppNative", "(JJ)V",
      (void*)gattClientRegisterAppNative},
     {"gattClientUnregisterAppNative", "(I)V",
      (void*)gattClientUnregisterAppNative},
     {"gattClientConnectNative", "(ILjava/lang/String;ZIZI)V",
diff --git a/jni/com_android_bluetooth_hearing_aid.cpp b/jni/com_android_bluetooth_hearing_aid.cpp
index b459ae22792e78b67249510bad2e53d0cb9f2529..6860ab71905fddaab55c4fe86b4760bddd4ada0e 100644
--- a/jni/com_android_bluetooth_hearing_aid.cpp
+++ b/jni/com_android_bluetooth_hearing_aid.cpp
@@ -211,21 +211,21 @@ static jboolean addToWhiteListNative(JNIEnv* env, jobject object,
 
 static void setVolumeNative(JNIEnv* env, jclass clazz, jint volume) {
   if (!sHearingAidInterface) {
     LOG(ERROR) << __func__
                << ": Failed to get the Bluetooth Hearing Aid Interface";
     return;
   }
   sHearingAidInterface->SetVolume(volume);
 }
 
-static JNINativeMethod sMethods[] = {
+static const JNINativeMethod sMethods[] = {
     {"classInitNative", "()V", (void*)classInitNative},
     {"initNative", "()V", (void*)initNative},
     {"cleanupNative", "()V", (void*)cleanupNative},
     {"connectHearingAidNative", "([B)Z", (void*)connectHearingAidNative},
     {"disconnectHearingAidNative", "([B)Z", (void*)disconnectHearingAidNative},
     {"addToWhiteListNative", "([B)Z", (void*)addToWhiteListNative},
     {"setVolumeNative", "(I)V", (void*)setVolumeNative},
 };
 
 int register_com_android_bluetooth_hearing_aid(JNIEnv* env) {
diff --git a/jni/com_android_bluetooth_hfp.cpp b/jni/com_android_bluetooth_hfp.cpp
index 9918c870fcbe2c0f6f0e96ee3c4bfd5a1fc22f23..aee327c148ec345b8fdfe6478d7c543fe289d29b 100644
--- a/jni/com_android_bluetooth_hfp.cpp
+++ b/jni/com_android_bluetooth_hfp.cpp
@@ -909,21 +909,21 @@ static jboolean setActiveDeviceNative(JNIEnv* env, jobject object,
   }
   bt_status_t status =
       sBluetoothHfpInterface->SetActiveDevice((RawAddress*)addr);
   if (status != BT_STATUS_SUCCESS) {
     ALOGE("Failed to set active device, status: %d", status);
   }
   env->ReleaseByteArrayElements(address, addr, 0);
   return (status == BT_STATUS_SUCCESS) ? JNI_TRUE : JNI_FALSE;
 }
 
-static JNINativeMethod sMethods[] = {
+static const JNINativeMethod sMethods[] = {
     {"classInitNative", "()V", (void*)classInitNative},
     {"initializeNative", "(IZ)V", (void*)initializeNative},
     {"cleanupNative", "()V", (void*)cleanupNative},
     {"connectHfpNative", "([B)Z", (void*)connectHfpNative},
     {"disconnectHfpNative", "([B)Z", (void*)disconnectHfpNative},
     {"connectAudioNative", "([B)Z", (void*)connectAudioNative},
     {"disconnectAudioNative", "([B)Z", (void*)disconnectAudioNative},
     {"startVoiceRecognitionNative", "([B)Z",
      (void*)startVoiceRecognitionNative},
     {"stopVoiceRecognitionNative", "([B)Z", (void*)stopVoiceRecognitionNative},
diff --git a/jni/com_android_bluetooth_hfpclient.cpp b/jni/com_android_bluetooth_hfpclient.cpp
index 83c6b20f36e3c883fb91f727a62c98b42261bbd2..5534b00ffea9e781fbb5368e21391b6da4f334da 100644
--- a/jni/com_android_bluetooth_hfpclient.cpp
+++ b/jni/com_android_bluetooth_hfpclient.cpp
@@ -829,21 +829,21 @@ static jboolean sendATCmdNative(JNIEnv* env, jobject object, jbyteArray address,
   }
 
   if (arg != NULL) {
     env->ReleaseStringUTFChars(arg_str, arg);
   }
 
   env->ReleaseByteArrayElements(address, addr, 0);
   return (status == BT_STATUS_SUCCESS) ? JNI_TRUE : JNI_FALSE;
 }
 
-static JNINativeMethod sMethods[] = {
+static const JNINativeMethod sMethods[] = {
     {"classInitNative", "()V", (void*)classInitNative},
     {"initializeNative", "()V", (void*)initializeNative},
     {"cleanupNative", "()V", (void*)cleanupNative},
     {"connectNative", "([B)Z", (void*)connectNative},
     {"disconnectNative", "([B)Z", (void*)disconnectNative},
     {"connectAudioNative", "([B)Z", (void*)connectAudioNative},
     {"disconnectAudioNative", "([B)Z", (void*)disconnectAudioNative},
     {"startVoiceRecognitionNative", "([B)Z",
      (void*)startVoiceRecognitionNative},
     {"stopVoiceRecognitionNative", "([B)Z", (void*)stopVoiceRecognitionNative},
diff --git a/jni/com_android_bluetooth_hid_device.cpp b/jni/com_android_bluetooth_hid_device.cpp
index 17b6e97c015aed4495e7beb70bf3b971078c61a4..c3a00d5d253af8c600b25818e71b71d194aba269 100644
--- a/jni/com_android_bluetooth_hid_device.cpp
+++ b/jni/com_android_bluetooth_hid_device.cpp
@@ -490,21 +490,21 @@ static jboolean disconnectNative(JNIEnv* env, jobject thiz) {
 
   if (ret == BT_STATUS_SUCCESS) {
     result = JNI_TRUE;
   }
 
   ALOGV("%s done (%d)", __FUNCTION__, result);
 
   return result;
 }
 
-static JNINativeMethod sMethods[] = {
+static const JNINativeMethod sMethods[] = {
     {"classInitNative", "()V", (void*)classInitNative},
     {"initNative", "()V", (void*)initNative},
     {"cleanupNative", "()V", (void*)cleanupNative},
     {"registerAppNative",
      "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;B[B[I[I)Z",
      (void*)registerAppNative},
     {"unregisterAppNative", "()Z", (void*)unregisterAppNative},
     {"sendReportNative", "(I[B)Z", (void*)sendReportNative},
     {"replyReportNative", "(BB[B)Z", (void*)replyReportNative},
     {"reportErrorNative", "(B)Z", (void*)reportErrorNative},
diff --git a/jni/com_android_bluetooth_hid_host.cpp b/jni/com_android_bluetooth_hid_host.cpp
index cab5e336118f9e13e09e1f6151673269b54a0e29..cc242e8114a55ac1f3070f9fa565b59819adc1a2 100644
--- a/jni/com_android_bluetooth_hid_host.cpp
+++ b/jni/com_android_bluetooth_hid_host.cpp
@@ -499,21 +499,21 @@ static jboolean setIdleTimeNative(JNIEnv* env, jobject object,
   bt_status_t status =
       sBluetoothHidInterface->set_idle_time((RawAddress*)addr, idle_time);
   if (status != BT_STATUS_SUCCESS) {
     ALOGE("%s: Failed set idle time, status: %d", __func__, status);
   }
   env->ReleaseByteArrayElements(address, addr, 0);
 
   return status == BT_STATUS_SUCCESS ? JNI_TRUE : JNI_FALSE;
 }
 
-static JNINativeMethod sMethods[] = {
+static const JNINativeMethod sMethods[] = {
     {"classInitNative", "()V", (void*)classInitNative},
     {"initializeNative", "()V", (void*)initializeNative},
     {"cleanupNative", "()V", (void*)cleanupNative},
     {"connectHidNative", "([B)Z", (void*)connectHidNative},
     {"disconnectHidNative", "([B)Z", (void*)disconnectHidNative},
     {"getProtocolModeNative", "([B)Z", (void*)getProtocolModeNative},
     {"virtualUnPlugNative", "([B)Z", (void*)virtualUnPlugNative},
     {"setProtocolModeNative", "([BB)Z", (void*)setProtocolModeNative},
     {"getReportNative", "([BBBI)Z", (void*)getReportNative},
     {"setReportNative", "([BBLjava/lang/String;)Z", (void*)setReportNative},
diff --git a/jni/com_android_bluetooth_pan.cpp b/jni/com_android_bluetooth_pan.cpp
index d423eab64a5a7f829745a1fed180ad35f0c6a8b6..06b8a0d4abc4da48fd9cd60dcb4283e061524810 100644
--- a/jni/com_android_bluetooth_pan.cpp
+++ b/jni/com_android_bluetooth_pan.cpp
@@ -223,21 +223,21 @@ static jboolean disconnectPanNative(JNIEnv* env, jobject object,
   bt_status_t status = sPanIf->disconnect((RawAddress*)addr);
   if (status != BT_STATUS_SUCCESS) {
     error("Failed disconnect pan channel, status: %d", status);
     ret = JNI_FALSE;
   }
   env->ReleaseByteArrayElements(address, addr, 0);
 
   return ret;
 }
 
-static JNINativeMethod sMethods[] = {
+static const JNINativeMethod sMethods[] = {
     {"classInitNative", "()V", (void*)classInitNative},
     {"initializeNative", "()V", (void*)initializeNative},
     {"cleanupNative", "()V", (void*)cleanupNative},
     {"connectPanNative", "([BII)Z", (void*)connectPanNative},
     {"enablePanNative", "(I)Z", (void*)enablePanNative},
     {"getPanLocalRoleNative", "()I", (void*)getPanLocalRoleNative},
     {"disconnectPanNative", "([B)Z", (void*)disconnectPanNative},
     // TBD cleanup
 };
 
diff --git a/jni/com_android_bluetooth_sdp.cpp b/jni/com_android_bluetooth_sdp.cpp
index 90e3fc1e6fa90fcbf728a00d8ccc6ccbd45791ca..d829541a30e0604a6b5151b7285c5c49addb6195 100644
--- a/jni/com_android_bluetooth_sdp.cpp
+++ b/jni/com_android_bluetooth_sdp.cpp
@@ -487,21 +487,21 @@ static void cleanupNative(JNIEnv* env, jobject object) {
     sBluetoothSdpInterface = NULL;
   }
 
   if (sCallbacksObj != NULL) {
     ALOGW("Cleaning up Bluetooth SDP object");
     env->DeleteGlobalRef(sCallbacksObj);
     sCallbacksObj = NULL;
   }
 }
 
-static JNINativeMethod sMethods[] = {
+static const JNINativeMethod sMethods[] = {
     /* name, signature, funcPtr */
     {"classInitNative", "()V", (void*)classInitNative},
     {"initializeNative", "()V", (void*)initializeNative},
     {"cleanupNative", "()V", (void*)cleanupNative},
     {"sdpSearchNative", "([B[B)Z", (void*)sdpSearchNative},
     {"sdpCreateMapMasRecordNative", "(Ljava/lang/String;IIIIII)I",
      (void*)sdpCreateMapMasRecordNative},
     {"sdpCreateMapMnsRecordNative", "(Ljava/lang/String;IIII)I",
      (void*)sdpCreateMapMnsRecordNative},
     {"sdpCreatePbapPceRecordNative", "(Ljava/lang/String;I)I",

commit 59da1d0699ddb64063b5ec34326a081eaeaf4b5a (HEAD, tag: RQ1A.210105.002.2021.01.05.03, m/master)
Author: Yinchu Chen <chenyc5@motorola.com>
Date:   Fri 2020-04-03 17:19:11+0800

    Bluetooth string: removed id="sender" in bt_sm_2_1_
    
    As there is no value assignment for string id="sender" in string bt_sm_2_1,
    %1$s will show as garbled char for the user while the capacity of the device is full
    
    bug: b/153128298
    
    Signed-off-by: Yinchu Chen <chenyc5@motorola.com>
    
    Change-Id: Iec7da3fa32b2133263d18bbe3a2f187aa7be99f0
---
 res/values/strings.xml | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/res/values/strings.xml b/res/values/strings.xml
index f59e783897362dd1dfddf061de09a3570303a44b..4e3bea564945fabf3969b2014d74f748cdfbaba2 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -169,23 +169,23 @@
 
     <!-- Bluetooth Toast Message -->
     <string name="bt_toast_1">The file will be received. Check progress in the Notifications panel.</string>
     <string name="bt_toast_2">The file can\'t be received.</string>
     <string name="bt_toast_3">Stopped receiving file from \u0022<xliff:g id="sender">%1$s</xliff:g>\u0022</string>
     <string name="bt_toast_4">Sending file to \u0022<xliff:g id="recipient">%1$s</xliff:g>\u0022</string>
     <string name="bt_toast_5">Sending <xliff:g id="number">%1$s</xliff:g> files to \u0022<xliff:g id="recipient">%2$s</xliff:g>\u0022</string>
     <string name="bt_toast_6">Stopped sending file to \u0022<xliff:g id="recipient">%1$s</xliff:g>\u0022</string>
 
     <!-- Bluetooth System Messages [CHAR LIMIT=NONE] -->
-    <string name="bt_sm_2_1_nosdcard">There isn\'t enough space in USB storage to save the file from \u0022<xliff:g id="sender">%1$s</xliff:g>\u0022</string>
+    <string name="bt_sm_2_1_nosdcard">There isn\'t enough space in USB storage to save the file.</string>
     <!-- Bluetooth System Messages -->
-    <string name="bt_sm_2_1_default">There isn\'t enough space on the SD card to save the file from \u0022<xliff:g id="sender">%1$s</xliff:g>\u0022</string>
+    <string name="bt_sm_2_1_default">There isn\'t enough space on the SD card to save the file.</string>
     <string name="bt_sm_2_2">Space needed: <xliff:g id="size">%1$s</xliff:g></string>
 
     <string name="ErrorTooManyRequests">Too many requests are being processed. Try again later.</string>
 
     <!-- Bluetooth Transfer Failure Reason -->
     <string name="status_pending">File transfer not started yet.</string>
     <string name="status_running">File transfer is ongoing.</string>
     <string name="status_success">File transfer completed successfully.</string>
     <string name="status_not_accept">Content isn\'t supported.</string>
     <string name="status_forbidden">Transfer forbidden by target device.</string>
