commit f7a8ebe3cd6c5564ca4399322bc609ad3503cbe0 (HEAD, tag: SQ1A.220205.002.2022020800, tag: SQ1A.220105.002.2022010500, m/master, grapheneos/12)
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Sun 2021-10-10 18:35:08-0400

    constify JNINativeMethod tables
---
 jni/com_android_bluetooth_a2dp.cpp                          | 2 +-
 jni/com_android_bluetooth_a2dp_sink.cpp                     | 2 +-
 jni/com_android_bluetooth_avrcp_controller.cpp              | 2 +-
 jni/com_android_bluetooth_avrcp_target.cpp                  | 2 +-
 jni/com_android_bluetooth_btservice_ActivityAttribution.cpp | 2 +-
 jni/com_android_bluetooth_btservice_AdapterService.cpp      | 2 +-
 jni/com_android_bluetooth_btservice_BluetoothKeystore.cpp   | 2 +-
 jni/com_android_bluetooth_gatt.cpp                          | 8 ++++----
 jni/com_android_bluetooth_hearing_aid.cpp                   | 2 +-
 jni/com_android_bluetooth_hfp.cpp                           | 2 +-
 jni/com_android_bluetooth_hfpclient.cpp                     | 2 +-
 jni/com_android_bluetooth_hid_device.cpp                    | 2 +-
 jni/com_android_bluetooth_hid_host.cpp                      | 2 +-
 jni/com_android_bluetooth_le_audio.cpp                      | 2 +-
 jni/com_android_bluetooth_pan.cpp                           | 2 +-
 jni/com_android_bluetooth_sdp.cpp                           | 2 +-
 16 files changed, 19 insertions(+), 19 deletions(-)

diff --git a/jni/com_android_bluetooth_a2dp.cpp b/jni/com_android_bluetooth_a2dp.cpp
index a94990437cc1df0d7eb6919c09870ba7aff96582..1f05608602d04303696102a5032fa611872f0b33 100644
--- a/jni/com_android_bluetooth_a2dp.cpp
+++ b/jni/com_android_bluetooth_a2dp.cpp
@@ -498,21 +498,21 @@ static jboolean setCodecConfigPreferenceNative(JNIEnv* env, jobject object,
 
   bt_status_t status =
       sBluetoothA2dpInterface->config_codec(bd_addr, codec_preferences);
   if (status != BT_STATUS_SUCCESS) {
     ALOGE("%s: Failed codec configuration, status: %d", __func__, status);
   }
   env->ReleaseByteArrayElements(address, addr, 0);
   return (status == BT_STATUS_SUCCESS) ? JNI_TRUE : JNI_FALSE;
 }
 
-static JNINativeMethod sMethods[] = {
+static const JNINativeMethod sMethods[] = {
     {"classInitNative", "()V", (void*)classInitNative},
     {"initNative",
      "(I[Landroid/bluetooth/BluetoothCodecConfig;[Landroid/bluetooth/BluetoothCodecConfig;)V",
      (void*)initNative},
     {"cleanupNative", "()V", (void*)cleanupNative},
     {"connectA2dpNative", "([B)Z", (void*)connectA2dpNative},
     {"disconnectA2dpNative", "([B)Z", (void*)disconnectA2dpNative},
     {"setSilenceDeviceNative", "([BZ)Z", (void*)setSilenceDeviceNative},
     {"setActiveDeviceNative", "([B)Z", (void*)setActiveDeviceNative},
     {"setCodecConfigPreferenceNative",
diff --git a/jni/com_android_bluetooth_a2dp_sink.cpp b/jni/com_android_bluetooth_a2dp_sink.cpp
index d7cbeb770a8f0ed096a119e92f0cc4b265ffeb4d..08cd8f419a2f0291cc26c5321e1693a80717aff7 100644
--- a/jni/com_android_bluetooth_a2dp_sink.cpp
+++ b/jni/com_android_bluetooth_a2dp_sink.cpp
@@ -236,21 +236,21 @@ static jboolean setActiveDeviceNative(JNIEnv* env, jobject object,
   rawAddress.FromOctets((uint8_t*)addr);
   bt_status_t status = sBluetoothA2dpInterface->set_active_device(rawAddress);
   if (status != BT_STATUS_SUCCESS) {
     ALOGE("Failed sending passthru command, status: %d", status);
   }
   env->ReleaseByteArrayElements(address, addr, 0);
 
   return (status == BT_STATUS_SUCCESS) ? JNI_TRUE : JNI_FALSE;
 }
 
-static JNINativeMethod sMethods[] = {
+static const JNINativeMethod sMethods[] = {
     {"classInitNative", "()V", (void*)classInitNative},
     {"initNative", "(I)V", (void*)initNative},
     {"cleanupNative", "()V", (void*)cleanupNative},
     {"connectA2dpNative", "([B)Z", (void*)connectA2dpNative},
     {"disconnectA2dpNative", "([B)Z", (void*)disconnectA2dpNative},
     {"informAudioFocusStateNative", "(I)V", (void*)informAudioFocusStateNative},
     {"informAudioTrackGainNative", "(F)V", (void*)informAudioTrackGainNative},
     {"setActiveDeviceNative", "([B)Z", (void*)setActiveDeviceNative},
 };
 
diff --git a/jni/com_android_bluetooth_avrcp_controller.cpp b/jni/com_android_bluetooth_avrcp_controller.cpp
index 86bf0687913e240dc2d33de8985bb739eec585c7..642f73ea3d4430890961a41102d8daf1d812feb8 100755
--- a/jni/com_android_bluetooth_avrcp_controller.cpp
+++ b/jni/com_android_bluetooth_avrcp_controller.cpp
@@ -1277,21 +1277,21 @@ static void playItemNative(JNIEnv* env, jobject object, jbyteArray address,
 
   ALOGI("%s: sBluetoothAvrcpInterface: %p", __func__, sBluetoothAvrcpInterface);
   bt_status_t status = sBluetoothAvrcpInterface->play_item_cmd(
       rawAddress, (uint8_t)scope, (uint8_t*)&uid, (uint16_t)uidCounter);
   if (status != BT_STATUS_SUCCESS) {
     ALOGE("Failed sending playItemNative command, status: %d", status);
   }
   env->ReleaseByteArrayElements(address, addr, 0);
 }
 
-static JNINativeMethod sMethods[] = {
+static const JNINativeMethod sMethods[] = {
     {"classInitNative", "()V", (void*)classInitNative},
     {"initNative", "()V", (void*)initNative},
     {"cleanupNative", "()V", (void*)cleanupNative},
     {"sendPassThroughCommandNative", "([BII)Z",
      (void*)sendPassThroughCommandNative},
     {"sendGroupNavigationCommandNative", "([BII)Z",
      (void*)sendGroupNavigationCommandNative},
     {"setPlayerApplicationSettingValuesNative", "([BB[B[B)V",
      (void*)setPlayerApplicationSettingValuesNative},
     {"sendAbsVolRspNative", "([BII)V", (void*)sendAbsVolRspNative},
diff --git a/jni/com_android_bluetooth_avrcp_target.cpp b/jni/com_android_bluetooth_avrcp_target.cpp
index fb8c56086d0316b4000ca46da3d59216dc97367e..a7434e3653e8636f1cbf8cef0ec0c85dbf76e926 100644
--- a/jni/com_android_bluetooth_avrcp_target.cpp
+++ b/jni/com_android_bluetooth_avrcp_target.cpp
@@ -893,21 +893,21 @@ static void setBipClientStatusNative(JNIEnv* env, jobject object,
   RawAddress bdaddr;
   bool success = RawAddress::FromString(tmp_addr, bdaddr);
   env->ReleaseStringUTFChars(address, tmp_addr);
 
   if (!success) return;
 
   bool status = (connected == JNI_TRUE);
   sServiceInterface->SetBipClientStatus(bdaddr, status);
 }
 
-static JNINativeMethod sMethods[] = {
+static const JNINativeMethod sMethods[] = {
     {"classInitNative", "()V", (void*)classInitNative},
     {"initNative", "()V", (void*)initNative},
     {"registerBipServerNative", "(I)V", (void*)registerBipServerNative},
     {"unregisterBipServerNative", "()V", (void*)unregisterBipServerNative},
     {"sendMediaUpdateNative", "(ZZZ)V", (void*)sendMediaUpdateNative},
     {"sendFolderUpdateNative", "(ZZZ)V", (void*)sendFolderUpdateNative},
     {"setBrowsedPlayerResponseNative", "(IZLjava/lang/String;I)V",
      (void*)setBrowsedPlayerResponseNative},
     {"getFolderItemsResponseNative", "(Ljava/lang/String;Ljava/util/List;)V",
      (void*)getFolderItemsResponseNative},
diff --git a/jni/com_android_bluetooth_btservice_ActivityAttribution.cpp b/jni/com_android_bluetooth_btservice_ActivityAttribution.cpp
index 791e42a0ea48df9617e24a12616b679a8bf981f9..cb0082244777b3822fd65b150f59c68a2d635c9f 100644
--- a/jni/com_android_bluetooth_btservice_ActivityAttribution.cpp
+++ b/jni/com_android_bluetooth_btservice_ActivityAttribution.cpp
@@ -150,21 +150,21 @@ static void cleanupNative(JNIEnv* env, jobject object) {
     sActivityAttributionInterface->Cleanup();
     sActivityAttributionInterface = nullptr;
   }
 
   if (mCallbacksObj != nullptr) {
     env->DeleteGlobalRef(mCallbacksObj);
     mCallbacksObj = nullptr;
   }
 }
 
-static JNINativeMethod sMethods[] = {
+static const JNINativeMethod sMethods[] = {
     {"classInitNative", "()V", (void*)classInitNative},
     {"initNative", "()V", (void*)initNative},
     {"cleanupNative", "()V", (void*)cleanupNative},
 };
 
 int register_com_android_bluetooth_btservice_activity_attribution(JNIEnv* env) {
   return jniRegisterNativeMethods(
       env,
       "com/android/bluetooth/btservice/activityattribution/"
       "ActivityAttributionNativeInterface",
diff --git a/jni/com_android_bluetooth_btservice_AdapterService.cpp b/jni/com_android_bluetooth_btservice_AdapterService.cpp
index 62c7d522d45202947d4d23e2f518e1f626ecfc02..9fa89ded9d54690cf965c95db066ddcfb26024b6 100644
--- a/jni/com_android_bluetooth_btservice_AdapterService.cpp
+++ b/jni/com_android_bluetooth_btservice_AdapterService.cpp
@@ -1682,21 +1682,21 @@ static int getMetricIdNative(JNIEnv* env, jobject obj, jbyteArray address) {
   jbyte* addr = env->GetByteArrayElements(address, nullptr);
   if (addr == nullptr) {
     jniThrowIOException(env, EINVAL);
     return 0;
   }
   RawAddress addr_obj = {};
   addr_obj.FromOctets((uint8_t*)addr);
   return sBluetoothInterface->get_metric_id(addr_obj);
 }
 
-static JNINativeMethod sMethods[] = {
+static const JNINativeMethod sMethods[] = {
     /* name, signature, funcPtr */
     {"classInitNative", "()V", (void*)classInitNative},
     {"initNative", "(ZZI[Ljava/lang/String;Z)Z", (void*)initNative},
     {"cleanupNative", "()V", (void*)cleanupNative},
     {"enableNative", "()Z", (void*)enableNative},
     {"disableNative", "()Z", (void*)disableNative},
     {"setAdapterPropertyNative", "(I[B)Z", (void*)setAdapterPropertyNative},
     {"getAdapterPropertiesNative", "()Z", (void*)getAdapterPropertiesNative},
     {"getAdapterPropertyNative", "(I)Z", (void*)getAdapterPropertyNative},
     {"getDevicePropertyNative", "([BI)Z", (void*)getDevicePropertyNative},
diff --git a/jni/com_android_bluetooth_btservice_BluetoothKeystore.cpp b/jni/com_android_bluetooth_btservice_BluetoothKeystore.cpp
index bceea1d735b7e7654fa05b87718f6e9cef51c0a8..6b8a317bcd774bc10a398283c1a82cd9770cf517 100644
--- a/jni/com_android_bluetooth_btservice_BluetoothKeystore.cpp
+++ b/jni/com_android_bluetooth_btservice_BluetoothKeystore.cpp
@@ -148,21 +148,21 @@ static void cleanupNative(JNIEnv* env, jobject object) {
   if (sBluetoothKeystoreInterface != nullptr) {
     sBluetoothKeystoreInterface = nullptr;
   }
 
   if (mCallbacksObj != nullptr) {
     env->DeleteGlobalRef(mCallbacksObj);
     mCallbacksObj = nullptr;
   }
 }
 
-static JNINativeMethod sMethods[] = {
+static const JNINativeMethod sMethods[] = {
     {"classInitNative", "()V", (void*)classInitNative},
     {"initNative", "()V", (void*)initNative},
     {"cleanupNative", "()V", (void*)cleanupNative},
 };
 
 int register_com_android_bluetooth_btservice_BluetoothKeystore(JNIEnv* env) {
   return jniRegisterNativeMethods(
       env,
       "com/android/bluetooth/btservice/bluetoothkeystore/"
       "BluetoothKeystoreNativeInterface",
diff --git a/jni/com_android_bluetooth_gatt.cpp b/jni/com_android_bluetooth_gatt.cpp
index ead3f68fed7f86d2b2e2cde19f13de13d13b6b91..c00f0304c202f0ba34c4222a0cb14e02d6de23fd 100644
--- a/jni/com_android_bluetooth_gatt.cpp
+++ b/jni/com_android_bluetooth_gatt.cpp
@@ -2279,21 +2279,21 @@ static void gattTestNative(JNIEnv* env, jobject object, jint command,
   params.u4 = p4;
   params.u5 = p5;
   sGattIf->client->test_command(command, params);
 }
 
 /**
  * JNI function definitinos
  */
 
 // JNI functions defined in AdvertiseManager class.
-static JNINativeMethod sAdvertiseMethods[] = {
+static const JNINativeMethod sAdvertiseMethods[] = {
     {"classInitNative", "()V", (void*)advertiseClassInitNative},
     {"initializeNative", "()V", (void*)advertiseInitializeNative},
     {"cleanupNative", "()V", (void*)advertiseCleanupNative},
     {"startAdvertisingSetNative",
      "(Landroid/bluetooth/le/AdvertisingSetParameters;[B[BLandroid/bluetooth/"
      "le/PeriodicAdvertisingParameters;[BIII)V",
      (void*)startAdvertisingSetNative},
     {"getOwnAddressNative", "(I)V", (void*)getOwnAddressNative},
     {"stopAdvertisingSetNative", "(I)V", (void*)stopAdvertisingSetNative},
     {"enableAdvertisingSetNative", "(IZII)V",
@@ -2306,30 +2306,30 @@ static JNINativeMethod sAdvertiseMethods[] = {
     {"setPeriodicAdvertisingParametersNative",
      "(ILandroid/bluetooth/le/PeriodicAdvertisingParameters;)V",
      (void*)setPeriodicAdvertisingParametersNative},
     {"setPeriodicAdvertisingDataNative", "(I[B)V",
      (void*)setPeriodicAdvertisingDataNative},
     {"setPeriodicAdvertisingEnableNative", "(IZ)V",
      (void*)setPeriodicAdvertisingEnableNative},
 };
 
 // JNI functions defined in PeriodicScanManager class.
-static JNINativeMethod sPeriodicScanMethods[] = {
+static const JNINativeMethod sPeriodicScanMethods[] = {
     {"classInitNative", "()V", (void*)periodicScanClassInitNative},
     {"initializeNative", "()V", (void*)periodicScanInitializeNative},
     {"cleanupNative", "()V", (void*)periodicScanCleanupNative},
     {"startSyncNative", "(ILjava/lang/String;III)V", (void*)startSyncNative},
     {"stopSyncNative", "(I)V", (void*)stopSyncNative},
 };
 
 // JNI functions defined in ScanManager class.
-static JNINativeMethod sScanMethods[] = {
+static const JNINativeMethod sScanMethods[] = {
     {"registerScannerNative", "(JJ)V", (void*)registerScannerNative},
     {"unregisterScannerNative", "(I)V", (void*)unregisterScannerNative},
     {"gattClientScanNative", "(Z)V", (void*)gattClientScanNative},
     // Batch scan JNI functions.
     {"gattClientConfigBatchScanStorageNative", "(IIII)V",
      (void*)gattClientConfigBatchScanStorageNative},
     {"gattClientStartBatchScanNative", "(IIIIII)V",
      (void*)gattClientStartBatchScanNative},
     {"gattClientStopBatchScanNative", "(I)V",
      (void*)gattClientStopBatchScanNative},
@@ -2348,21 +2348,21 @@ static JNINativeMethod sScanMethods[] = {
      (void*)gattClientScanFilterAddNative},
     {"gattClientScanFilterClearNative", "(II)V",
      (void*)gattClientScanFilterClearNative},
     {"gattClientScanFilterEnableNative", "(IZ)V",
      (void*)gattClientScanFilterEnableNative},
     {"gattSetScanParametersNative", "(III)V",
      (void*)gattSetScanParametersNative},
 };
 
 // JNI functions defined in GattService class.
-static JNINativeMethod sMethods[] = {
+static const JNINativeMethod sMethods[] = {
     {"classInitNative", "()V", (void*)classInitNative},
     {"initializeNative", "()V", (void*)initializeNative},
     {"cleanupNative", "()V", (void*)cleanupNative},
     {"gattClientGetDeviceTypeNative", "(Ljava/lang/String;)I",
      (void*)gattClientGetDeviceTypeNative},
     {"gattClientRegisterAppNative", "(JJZ)V",
      (void*)gattClientRegisterAppNative},
     {"gattClientUnregisterAppNative", "(I)V",
      (void*)gattClientUnregisterAppNative},
     {"gattClientConnectNative", "(ILjava/lang/String;ZIZI)V",
diff --git a/jni/com_android_bluetooth_hearing_aid.cpp b/jni/com_android_bluetooth_hearing_aid.cpp
index e359faf8a4b15270cdc5fab58be0de80e27315a9..c72b0c9152c7e86c8d7192eaa40350100cafa213 100644
--- a/jni/com_android_bluetooth_hearing_aid.cpp
+++ b/jni/com_android_bluetooth_hearing_aid.cpp
@@ -211,21 +211,21 @@ static jboolean addToAcceptlistNative(JNIEnv* env, jobject object,
 
 static void setVolumeNative(JNIEnv* env, jclass clazz, jint volume) {
   if (!sHearingAidInterface) {
     LOG(ERROR) << __func__
                << ": Failed to get the Bluetooth Hearing Aid Interface";
     return;
   }
   sHearingAidInterface->SetVolume(volume);
 }
 
-static JNINativeMethod sMethods[] = {
+static const JNINativeMethod sMethods[] = {
     {"classInitNative", "()V", (void*)classInitNative},
     {"initNative", "()V", (void*)initNative},
     {"cleanupNative", "()V", (void*)cleanupNative},
     {"connectHearingAidNative", "([B)Z", (void*)connectHearingAidNative},
     {"disconnectHearingAidNative", "([B)Z", (void*)disconnectHearingAidNative},
     {"addToAcceptlistNative", "([B)Z", (void*)addToAcceptlistNative},
     {"setVolumeNative", "(I)V", (void*)setVolumeNative},
 };
 
 int register_com_android_bluetooth_hearing_aid(JNIEnv* env) {
diff --git a/jni/com_android_bluetooth_hfp.cpp b/jni/com_android_bluetooth_hfp.cpp
index 813bdd0818b8516ff9167131c420b296415f51d9..5b21b543beda2d3e371eb981f3334a63e78483bb 100644
--- a/jni/com_android_bluetooth_hfp.cpp
+++ b/jni/com_android_bluetooth_hfp.cpp
@@ -947,21 +947,21 @@ static jboolean setActiveDeviceNative(JNIEnv* env, jobject object,
   }
   bt_status_t status =
       sBluetoothHfpInterface->SetActiveDevice((RawAddress*)addr);
   if (status != BT_STATUS_SUCCESS) {
     ALOGE("Failed to set active device, status: %d", status);
   }
   env->ReleaseByteArrayElements(address, addr, 0);
   return (status == BT_STATUS_SUCCESS) ? JNI_TRUE : JNI_FALSE;
 }
 
-static JNINativeMethod sMethods[] = {
+static const JNINativeMethod sMethods[] = {
     {"classInitNative", "()V", (void*)classInitNative},
     {"initializeNative", "(IZ)V", (void*)initializeNative},
     {"cleanupNative", "()V", (void*)cleanupNative},
     {"connectHfpNative", "([B)Z", (void*)connectHfpNative},
     {"disconnectHfpNative", "([B)Z", (void*)disconnectHfpNative},
     {"connectAudioNative", "([B)Z", (void*)connectAudioNative},
     {"disconnectAudioNative", "([B)Z", (void*)disconnectAudioNative},
     {"isNoiseReductionSupportedNative", "([B)Z",
      (void*)isNoiseReductionSupportedNative},
     {"isVoiceRecognitionSupportedNative", "([B)Z",
diff --git a/jni/com_android_bluetooth_hfpclient.cpp b/jni/com_android_bluetooth_hfpclient.cpp
index 83c6b20f36e3c883fb91f727a62c98b42261bbd2..5534b00ffea9e781fbb5368e21391b6da4f334da 100644
--- a/jni/com_android_bluetooth_hfpclient.cpp
+++ b/jni/com_android_bluetooth_hfpclient.cpp
@@ -829,21 +829,21 @@ static jboolean sendATCmdNative(JNIEnv* env, jobject object, jbyteArray address,
   }
 
   if (arg != NULL) {
     env->ReleaseStringUTFChars(arg_str, arg);
   }
 
   env->ReleaseByteArrayElements(address, addr, 0);
   return (status == BT_STATUS_SUCCESS) ? JNI_TRUE : JNI_FALSE;
 }
 
-static JNINativeMethod sMethods[] = {
+static const JNINativeMethod sMethods[] = {
     {"classInitNative", "()V", (void*)classInitNative},
     {"initializeNative", "()V", (void*)initializeNative},
     {"cleanupNative", "()V", (void*)cleanupNative},
     {"connectNative", "([B)Z", (void*)connectNative},
     {"disconnectNative", "([B)Z", (void*)disconnectNative},
     {"connectAudioNative", "([B)Z", (void*)connectAudioNative},
     {"disconnectAudioNative", "([B)Z", (void*)disconnectAudioNative},
     {"startVoiceRecognitionNative", "([B)Z",
      (void*)startVoiceRecognitionNative},
     {"stopVoiceRecognitionNative", "([B)Z", (void*)stopVoiceRecognitionNative},
diff --git a/jni/com_android_bluetooth_hid_device.cpp b/jni/com_android_bluetooth_hid_device.cpp
index 17b6e97c015aed4495e7beb70bf3b971078c61a4..c3a00d5d253af8c600b25818e71b71d194aba269 100644
--- a/jni/com_android_bluetooth_hid_device.cpp
+++ b/jni/com_android_bluetooth_hid_device.cpp
@@ -490,21 +490,21 @@ static jboolean disconnectNative(JNIEnv* env, jobject thiz) {
 
   if (ret == BT_STATUS_SUCCESS) {
     result = JNI_TRUE;
   }
 
   ALOGV("%s done (%d)", __FUNCTION__, result);
 
   return result;
 }
 
-static JNINativeMethod sMethods[] = {
+static const JNINativeMethod sMethods[] = {
     {"classInitNative", "()V", (void*)classInitNative},
     {"initNative", "()V", (void*)initNative},
     {"cleanupNative", "()V", (void*)cleanupNative},
     {"registerAppNative",
      "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;B[B[I[I)Z",
      (void*)registerAppNative},
     {"unregisterAppNative", "()Z", (void*)unregisterAppNative},
     {"sendReportNative", "(I[B)Z", (void*)sendReportNative},
     {"replyReportNative", "(BB[B)Z", (void*)replyReportNative},
     {"reportErrorNative", "(B)Z", (void*)reportErrorNative},
diff --git a/jni/com_android_bluetooth_hid_host.cpp b/jni/com_android_bluetooth_hid_host.cpp
index 074e39d5b024c921ca0c4ff3451cad732b40ded3..b1116ef47c20ba41f9f3c798570768571adff901 100644
--- a/jni/com_android_bluetooth_hid_host.cpp
+++ b/jni/com_android_bluetooth_hid_host.cpp
@@ -499,21 +499,21 @@ static jboolean setIdleTimeNative(JNIEnv* env, jobject object,
   bt_status_t status =
       sBluetoothHidInterface->set_idle_time((RawAddress*)addr, idle_time);
   if (status != BT_STATUS_SUCCESS) {
     ALOGE("%s: Failed set idle time, status: %d", __func__, status);
   }
   env->ReleaseByteArrayElements(address, addr, 0);
 
   return status == BT_STATUS_SUCCESS ? JNI_TRUE : JNI_FALSE;
 }
 
-static JNINativeMethod sMethods[] = {
+static const JNINativeMethod sMethods[] = {
     {"classInitNative", "()V", (void*)classInitNative},
     {"initializeNative", "()V", (void*)initializeNative},
     {"cleanupNative", "()V", (void*)cleanupNative},
     {"connectHidNative", "([B)Z", (void*)connectHidNative},
     {"disconnectHidNative", "([B)Z", (void*)disconnectHidNative},
     {"getProtocolModeNative", "([B)Z", (void*)getProtocolModeNative},
     {"virtualUnPlugNative", "([B)Z", (void*)virtualUnPlugNative},
     {"setProtocolModeNative", "([BB)Z", (void*)setProtocolModeNative},
     {"getReportNative", "([BBBI)Z", (void*)getReportNative},
     {"setReportNative", "([BBLjava/lang/String;)Z", (void*)setReportNative},
diff --git a/jni/com_android_bluetooth_le_audio.cpp b/jni/com_android_bluetooth_le_audio.cpp
index a8f5dbe1e747986e083a3e7ce594a1947c1b99da..11b2a5d09f2554e452460efd24cb7532530f9a34 100644
--- a/jni/com_android_bluetooth_le_audio.cpp
+++ b/jni/com_android_bluetooth_le_audio.cpp
@@ -254,21 +254,21 @@ static void groupStopNative(JNIEnv* env, jobject object, jint group_id) {
   LOG(INFO) << __func__;
 
   if (!sLeAudioClientInterface) {
     LOG(ERROR) << __func__ << ": Failed to get the Bluetooth LeAudio Interface";
     return;
   }
 
   sLeAudioClientInterface->GroupStop(group_id);
 }
 
-static JNINativeMethod sMethods[] = {
+static const JNINativeMethod sMethods[] = {
     {"classInitNative", "()V", (void*)classInitNative},
     {"initNative", "()V", (void*)initNative},
     {"cleanupNative", "()V", (void*)cleanupNative},
     {"connectLeAudioNative", "([B)Z", (void*)connectLeAudioNative},
     {"disconnectLeAudioNative", "([B)Z", (void*)disconnectLeAudioNative},
     {"groupStreamNative", "(II)V", (void*)groupStreamNative},
     {"groupSuspendNative", "(I)V", (void*)groupSuspendNative},
     {"groupStopNative", "(I)V", (void*)groupStopNative},
 };
 
diff --git a/jni/com_android_bluetooth_pan.cpp b/jni/com_android_bluetooth_pan.cpp
index b02ae9f9b153100ea429be98ffaca8e0fadbb1f0..3edc1ad988fbcc0106153c30fa42cec3f02d7e88 100644
--- a/jni/com_android_bluetooth_pan.cpp
+++ b/jni/com_android_bluetooth_pan.cpp
@@ -208,21 +208,21 @@ static jboolean disconnectPanNative(JNIEnv* env, jobject object,
   bt_status_t status = sPanIf->disconnect((RawAddress*)addr);
   if (status != BT_STATUS_SUCCESS) {
     error("Failed disconnect pan channel, status: %d", status);
     ret = JNI_FALSE;
   }
   env->ReleaseByteArrayElements(address, addr, 0);
 
   return ret;
 }
 
-static JNINativeMethod sMethods[] = {
+static const JNINativeMethod sMethods[] = {
     {"classInitNative", "()V", (void*)classInitNative},
     {"initializeNative", "()V", (void*)initializeNative},
     {"cleanupNative", "()V", (void*)cleanupNative},
     {"connectPanNative", "([BII)Z", (void*)connectPanNative},
     {"disconnectPanNative", "([B)Z", (void*)disconnectPanNative},
     // TBD cleanup
 };
 
 int register_com_android_bluetooth_pan(JNIEnv* env) {
   return jniRegisterNativeMethods(env, "com/android/bluetooth/pan/PanService",
diff --git a/jni/com_android_bluetooth_sdp.cpp b/jni/com_android_bluetooth_sdp.cpp
index bba109ac45609c04804ac91a4458f49f566a30ce..791ca06f2e38c77a6848b7e8036573ce83afcda7 100755
--- a/jni/com_android_bluetooth_sdp.cpp
+++ b/jni/com_android_bluetooth_sdp.cpp
@@ -503,21 +503,21 @@ static void cleanupNative(JNIEnv* env, jobject object) {
     sBluetoothSdpInterface = NULL;
   }
 
   if (sCallbacksObj != NULL) {
     ALOGW("Cleaning up Bluetooth SDP object");
     env->DeleteGlobalRef(sCallbacksObj);
     sCallbacksObj = NULL;
   }
 }
 
-static JNINativeMethod sMethods[] = {
+static const JNINativeMethod sMethods[] = {
     /* name, signature, funcPtr */
     {"classInitNative", "()V", (void*)classInitNative},
     {"initializeNative", "()V", (void*)initializeNative},
     {"cleanupNative", "()V", (void*)cleanupNative},
     {"sdpSearchNative", "([B[B)Z", (void*)sdpSearchNative},
     {"sdpCreateMapMasRecordNative", "(Ljava/lang/String;IIIIII)I",
      (void*)sdpCreateMapMasRecordNative},
     {"sdpCreateMapMnsRecordNative", "(Ljava/lang/String;IIII)I",
      (void*)sdpCreateMapMnsRecordNative},
     {"sdpCreatePbapPceRecordNative", "(Ljava/lang/String;I)I",
