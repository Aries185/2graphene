commit 3aaba581891eae8deb4eda382dddf0b3dbb62722
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Wed 2021-03-10 00:45:12-0500

    add TalkBack accessibility service
---
 res/values/config.xml | 1 +
 1 file changed, 1 insertion(+)

diff --git a/res/values/config.xml b/res/values/config.xml
index 987eaf97254609323573371066d433014d0fecaf..49887486509455a815505989b6ef3a5767060746 100755
--- a/res/values/config.xml
+++ b/res/values/config.xml
@@ -73,20 +73,21 @@
 
     <!-- Whether to enable "show operator name in the status bar" setting -->
     <bool name="config_showOperatorNameInStatusBar">false</bool>
 
     <!-- List containing the component names of pre-installed screen reader services. -->
     <string-array name="config_preinstalled_screen_reader_services" translatable="false">
         <!--
         <item>com.example.package.first/com.example.class.FirstService</item>
         <item>com.example.package.second/com.example.class.SecondService</item>
         -->
+        <item>com.google.android.accessibility.talkback/com.google.android.marvin.talkback.TalkBackService</item>
     </string-array>
 
     <!-- List containing the component names of pre-installed captioning services. -->
     <string-array name="config_preinstalled_captions_services" translatable="false">
         <!--
         <item>com.example.package.first/com.example.class.FirstService</item>
         <item>com.example.package.second/com.example.class.SecondService</item>
         -->
     </string-array>
 

commit 2d49011fbb5807106894288c47e02a22f60116d1
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Sat 2021-10-09 17:11:23-0400

    fix TalkBack app id
---
 res/values/config.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/res/values/config.xml b/res/values/config.xml
index 49887486509455a815505989b6ef3a5767060746..11827b783c3e4d58edd00812c9d914d62c0300db 100755
--- a/res/values/config.xml
+++ b/res/values/config.xml
@@ -73,21 +73,21 @@
 
     <!-- Whether to enable "show operator name in the status bar" setting -->
     <bool name="config_showOperatorNameInStatusBar">false</bool>
 
     <!-- List containing the component names of pre-installed screen reader services. -->
     <string-array name="config_preinstalled_screen_reader_services" translatable="false">
         <!--
         <item>com.example.package.first/com.example.class.FirstService</item>
         <item>com.example.package.second/com.example.class.SecondService</item>
         -->
-        <item>com.google.android.accessibility.talkback/com.google.android.marvin.talkback.TalkBackService</item>
+        <item>com.android.talkback/com.google.android.marvin.talkback.TalkBackService</item>
     </string-array>
 
     <!-- List containing the component names of pre-installed captioning services. -->
     <string-array name="config_preinstalled_captions_services" translatable="false">
         <!--
         <item>com.example.package.first/com.example.class.FirstService</item>
         <item>com.example.package.second/com.example.class.SecondService</item>
         -->
     </string-array>
 

commit 07ad7cac257f13df33187b458dac518e08c99ddf
Author: Renlord <me@renlord.com>
Date:   Wed 2020-01-15 01:03:39-0800

    add PIN scrambling setting
    
    Signed-off-by: anupritaisno1 <www.anuprita804@gmail.com>
    Change-Id: Ib2f60f6d990fd210cdbb4d109fbe2faa50f9b91d
---
 res/values/arrays.xml                              | 10 +++
 res/values/strings.xml                             |  3 +
 res/xml/security_dashboard_settings.xml            | 10 ++-
 .../PinScramblePreferenceController.java (new)     | 79 ++++++++++++++++++++++
 .../settings/security/SecuritySettings.java        |  1 +
 5 files changed, 102 insertions(+), 1 deletion(-)

diff --git a/res/values/arrays.xml b/res/values/arrays.xml
index 0fe13feb3e6903731996c7022be2f249f04ff5a8..270375966354155fdb94c88894eb6e158005bab5 100644
--- a/res/values/arrays.xml
+++ b/res/values/arrays.xml
@@ -117,20 +117,30 @@
         <item>5 seconds</item>
         <item>15 seconds</item>
         <item>30 seconds</item>
         <item>1 minute</item>
         <item>2 minutes</item>
         <item>5 minutes</item>
         <item>10 minutes</item>
         <item>30 minutes</item>
     </string-array>
 
+    <string-array name="scramble_pin_entries">
+        <item>Scramble PIN</item>
+        <item>No PIN scrambling</item>
+    </string-array>
+
+    <string-array name="scramble_pin_values" translatable="false">
+        <item>true</item>
+        <item>false</item>
+    </string-array>
+
     <!-- Do not translate. -->
     <string-array name="lock_after_timeout_values" translatable="false">
         <!-- Do not translate. -->
         <item>0</item>
         <!-- Do not translate. -->
         <item>5000</item>
         <!-- Do not translate. -->
         <item>15000</item>
         <!-- Do not translate. -->
         <item>30000</item>
diff --git a/res/values/strings.xml b/res/values/strings.xml
index 300b3a42014527b928f9c8750750b8edd530f681..e8118e2e6151e734143dfd3b912632a8c90908af 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -13629,11 +13629,14 @@
     <!-- Bluetooth connect permission alert for notification content [CHAR LIMIT=none] -->
     <string name="bluetooth_connect_access_notification_content">A device wants to connect. Tap for details.</string>
     <!-- Bluetooth connect permission alert for dialog title [CHAR LIMIT=none] -->
     <string name="bluetooth_connect_access_dialog_title">Connect to Bluetooth device?</string>
     <!-- Bluetooth connect permission alert for dialog content [CHAR LIMIT=none] -->
     <string name="bluetooth_connect_access_dialog_content"><xliff:g id="device_name" example="My device">%1$s</xliff:g> wants to connect to this phone.\n\nYou haven\u2019t connected to <xliff:g id="device_name" example="My device">%2$s</xliff:g> before.</string>
     <!-- Strings for Dialog don't connect button -->
     <string name="bluetooth_connect_access_dialog_negative">Don\u2019t connect</string>
     <!-- Strings for Dialog connect button -->
     <string name="bluetooth_connect_access_dialog_positive">Connect</string>
+
+    <string name="scramble_pin_title">PIN scrambling</string>
+    <string name="scramble_pin_summary">Controls PIN scrambling option when inputting PIN on screen lock.</string>
 </resources>
diff --git a/res/xml/security_dashboard_settings.xml b/res/xml/security_dashboard_settings.xml
index 5b687afc488f8dcf135ced713b8aedd96c67f398..ccdd44835635e87f0369f0a581fc4676f5ca68be 100644
--- a/res/xml/security_dashboard_settings.xml
+++ b/res/xml/security_dashboard_settings.xml
@@ -48,20 +48,28 @@
             android:title="@string/security_settings_fingerprint_preference_title"
             android:summary="@string/summary_placeholder"
             settings:keywords="@string/keywords_fingerprint_settings" />
 
         <com.android.settingslib.RestrictedPreference
             android:key="face_settings"
             android:title="@string/security_settings_face_preference_title"
             android:summary="@string/summary_placeholder"
             settings:keywords="@string/keywords_face_settings" />
 
+        <ListPreference
+            android:key="scramble_pin_layout"
+            android:title="@string/scramble_pin_title"
+            android:summary="@string/scramble_pin_summary"
+            android:persistent="false"
+            android:entries="@array/scramble_pin_entries"
+            android:entryValues="@array/scramble_pin_values" />
+
         <com.android.settingslib.RestrictedPreference
             android:key="biometric_settings"
             android:title="@string/security_settings_biometric_preference_title"
             android:summary="@string/summary_placeholder"
             settings:keywords="@string/keywords_biometric_settings" />
     </PreferenceCategory>
 
     <PreferenceCategory
         android:order="40"
         android:key="security_settings_device_admin_category"
@@ -163,11 +171,11 @@
             android:title="@string/security_settings_face_preference_title"
             android:summary="@string/summary_placeholder" />
 
         <com.android.settingslib.RestrictedPreference
             android:key="biometric_settings_profile"
             android:title="@string/security_settings_biometric_preference_title"
             android:summary="@string/summary_placeholder" />
 
     </PreferenceCategory>
 
-</PreferenceScreen>
\ No newline at end of file
+</PreferenceScreen>
diff --git a/src/com/android/settings/security/PinScramblePreferenceController.java b/src/com/android/settings/security/PinScramblePreferenceController.java
new file mode 100644
index 0000000000000000000000000000000000000000..f4a7ddf8f8ca6e71e09ce6c024a17277ba91cf0e
--- /dev/null
+++ b/src/com/android/settings/security/PinScramblePreferenceController.java
@@ -0,0 +1,79 @@
+package com.android.settings.security;
+
+import android.content.Context;
+
+import android.os.UserHandle;
+import android.os.UserManager;
+import android.os.SystemProperties;
+
+import android.provider.Settings;
+
+import androidx.preference.ListPreference;
+import androidx.preference.Preference;
+import androidx.preference.PreferenceCategory;
+import androidx.preference.PreferenceGroup;
+import androidx.preference.PreferenceScreen;
+
+import com.android.internal.widget.LockPatternUtils;
+import com.android.settings.core.PreferenceControllerMixin;
+import com.android.settingslib.core.AbstractPreferenceController;
+import com.android.settingslib.core.lifecycle.events.OnResume;
+
+public class PinScramblePreferenceController extends AbstractPreferenceController
+        implements PreferenceControllerMixin, OnResume, Preference.OnPreferenceChangeListener {
+
+    private static final String KEY_SCRAMBLE_PIN_LAYOUT = "scramble_pin_layout";
+    private static final String PREF_KEY_SECURITY_CATEGORY = "security_category";
+
+    private PreferenceCategory mSecurityCategory;
+    private ListPreference mScramblePin;
+
+    public PinScramblePreferenceController(Context context) {
+        super(context);
+    }
+
+    @Override
+    public void displayPreference(PreferenceScreen screen) {
+        super.displayPreference(screen);
+        mSecurityCategory = screen.findPreference(PREF_KEY_SECURITY_CATEGORY);
+        updatePreferenceState();
+    }
+
+    @Override
+    public boolean isAvailable() {
+        return true;
+    }
+
+    @Override
+    public String getPreferenceKey() {
+        return KEY_SCRAMBLE_PIN_LAYOUT;
+    }
+
+    // TODO: should we use onCreatePreferences() instead?
+    private void updatePreferenceState() {
+        if (mSecurityCategory == null) {
+            return;
+        }
+        mScramblePin = (ListPreference) mSecurityCategory.findPreference(KEY_SCRAMBLE_PIN_LAYOUT);
+        mScramblePin.setValue(Boolean.toString(Settings.Secure.getInt(mContext.getContentResolver(), Settings.Secure.SCRAMBLE_PIN_LAYOUT, 0) != 0));
+    }
+
+    @Override
+    public void onResume() {
+        updatePreferenceState();
+        if (mScramblePin != null) {
+            boolean mode = Boolean.parseBoolean(mScramblePin.getValue());
+            Settings.Secure.putInt(mContext.getContentResolver(), Settings.Secure.SCRAMBLE_PIN_LAYOUT, (mode) ? 0 : 1);
+        }
+    }
+
+    @Override
+    public boolean onPreferenceChange(Preference preference, Object value) {
+        final String key = preference.getKey();
+        if (KEY_SCRAMBLE_PIN_LAYOUT.equals(key)) {
+            boolean mode = Boolean.parseBoolean((String) value);
+            Settings.Secure.putInt(mContext.getContentResolver(), Settings.Secure.SCRAMBLE_PIN_LAYOUT, (mode) ? 1 : 0);
+        }
+        return true;
+    }
+}
diff --git a/src/com/android/settings/security/SecuritySettings.java b/src/com/android/settings/security/SecuritySettings.java
index be123f2339720d57ad2325e2bbd3565a6ee4a2d0..a68dc4d6bb19f9dac3b436fa66c5160b9945d421 100644
--- a/src/com/android/settings/security/SecuritySettings.java
+++ b/src/com/android/settings/security/SecuritySettings.java
@@ -115,20 +115,21 @@ public class SecuritySettings extends DashboardFragment {
                 PREF_KEY_ENCRYPTION_SECURITY_PAGE));
         controllers.add(new TrustAgentListPreferenceController(context, host, lifecycle));
 
         final List<AbstractPreferenceController> securityPreferenceControllers = new ArrayList<>();
         securityPreferenceControllers.add(new FaceStatusPreferenceController(context, lifecycle));
         securityPreferenceControllers.add(new FingerprintStatusPreferenceController(
                 context, lifecycle));
         securityPreferenceControllers.add(new CombinedBiometricStatusPreferenceController(
                 context, lifecycle));
         securityPreferenceControllers.add(new ChangeScreenLockPreferenceController(context, host));
+        securityPreferenceControllers.add(new PinScramblePreferenceController(context));
         controllers.add(new PreferenceCategoryController(context, SECURITY_CATEGORY)
                 .setChildren(securityPreferenceControllers));
         controllers.addAll(securityPreferenceControllers);
 
         final List<AbstractPreferenceController> profileSecurityControllers = new ArrayList<>();
         profileSecurityControllers.add(new ChangeProfileScreenLockPreferenceController(
                 context, host));
         profileSecurityControllers.add(new LockUnificationPreferenceController(context, host));
         profileSecurityControllers.add(new VisiblePatternProfilePreferenceController(
                 context, lifecycle));

commit 1c5e7aeeead8f100c8f4ebed4f04c14c5ea1d5bc
Author: renlord <me@renlord.com>
Date:   Fri 2021-10-15 20:02:51+0530

    add option to always randomize MAC
    RANDOMIZATION_ALWAYS is set as the default option
---
 res/layout/wifi_dialog.xml                         |  2 +-
 res/values/arrays.xml                              |  7 ++++++
 res/xml/wifi_network_details_fragment2.xml         |  2 +-
 .../details2/WifiDetailPreferenceController2.java  |  2 +-
 .../details2/WifiPrivacyPreferenceController2.java | 28 +++++++++++++++++-----
 5 files changed, 32 insertions(+), 9 deletions(-)

diff --git a/res/layout/wifi_dialog.xml b/res/layout/wifi_dialog.xml
index 6f83e5cd1ee87171ac3ae3d4ba15c7668773cfbc..14eaf65e03b985b5083c9fc483d6d9b9edd2d22d 100644
--- a/res/layout/wifi_dialog.xml
+++ b/res/layout/wifi_dialog.xml
@@ -675,21 +675,21 @@
                           android:layout_width="wrap_content"
                           android:layout_height="wrap_content"
                           style="@style/wifi_item_label"
                           android:text="@string/wifi_privacy_settings" />
 
                 <Spinner android:id="@+id/privacy_settings"
                          android:layout_width="match_parent"
                          android:layout_height="wrap_content"
                          style="@style/wifi_item_spinner"
                          android:prompt="@string/wifi_privacy_settings"
-                         android:entries="@array/wifi_privacy_entries"/>
+                         android:entries="@array/wifi_privacy_entries_extended"/>
             </LinearLayout>
 
             <LinearLayout
                     android:layout_width="match_parent"
                     android:layout_height="wrap_content"
                     style="@style/wifi_section">
                 <LinearLayout
                         android:layout_width="match_parent"
                         android:layout_height="wrap_content"
                         style="@style/wifi_item" >
diff --git a/res/values/arrays.xml b/res/values/arrays.xml
index 270375966354155fdb94c88894eb6e158005bab5..b8fb4b89af2670df1e9c3cd0060a07b5bfa1b007 100644
--- a/res/values/arrays.xml
+++ b/res/values/arrays.xml
@@ -1281,37 +1281,44 @@
         <item>1</item>
         <item>0</item>
     </string-array>
 
     <string-array name="wifi_metered_entries">
         <item>Detect automatically</item>
         <item>Treat as metered</item>
         <item>Treat as unmetered</item>
     </string-array>
 
+    <string-array name="wifi_privacy_entries_extended">
+        <item>Use per-connection randomized MAC (default)</item>
+        <item>Use per-network randomized MAC</item>
+        <item>Use device MAC</item>
+    </string-array>
+
     <string-array name="wifi_privacy_entries">
         <item>Use randomized MAC (default)</item>
         <item>Use device MAC</item>
     </string-array>
 
     <string-array name="wifi_hidden_entries">
         <item>No</item>
         <item>Yes</item>
     </string-array>
 
     <string-array name="wifi_metered_values" translatable="false">
         <item>0</item>
         <item>1</item>
         <item>2</item>
     </string-array>
 
     <string-array name="wifi_privacy_values" translatable="false">
+        <item>100</item>
         <item>1</item>
         <item>0</item>
     </string-array>
 
     <!-- Titles for ui dark mode preference. -->
     <string-array name="dark_ui_mode_entries" >
         <item>Dark</item>
         <item>Light</item>
     </string-array>
 
diff --git a/res/xml/wifi_network_details_fragment2.xml b/res/xml/wifi_network_details_fragment2.xml
index 1c4fe9147a33d01d43cbd9ea7773b1a33103b73f..191b4f80ae9b368c4b5fa173935ec98cb8048b28 100644
--- a/res/xml/wifi_network_details_fragment2.xml
+++ b/res/xml/wifi_network_details_fragment2.xml
@@ -62,21 +62,21 @@
         android:key="metered"
         android:icon="@drawable/ic_attach_money_black_24dp"
         android:title="@string/wifi_metered_title"
         android:entries="@array/wifi_metered_entries"
         android:entryValues="@array/wifi_metered_values"/>
 
     <DropDownPreference
         android:key="privacy"
         android:icon="@drawable/ic_wifi_privacy_24dp"
         android:title="@string/wifi_privacy_settings"
-        android:entries="@array/wifi_privacy_entries"
+        android:entries="@array/wifi_privacy_entries_extended"
         android:entryValues="@array/wifi_privacy_values"/>
 
     <Preference
         android:key="subscription_detail"
         android:title="@string/wifi_subscription"
         android:summary="@string/wifi_subscription_summary"/>
 
     <SwitchPreference
         android:key="auto_connect"
         android:title="@string/wifi_auto_connect_title"
diff --git a/src/com/android/settings/wifi/details2/WifiDetailPreferenceController2.java b/src/com/android/settings/wifi/details2/WifiDetailPreferenceController2.java
index f9d0db07b25435592c9d657b194b208e870792b6..5f46d9b71e9cf915d51661fc32f84ae38bac7ebc 100644
--- a/src/com/android/settings/wifi/details2/WifiDetailPreferenceController2.java
+++ b/src/com/android/settings/wifi/details2/WifiDetailPreferenceController2.java
@@ -792,21 +792,21 @@ public class WifiDetailPreferenceController2 extends AbstractPreferenceControlle
             case ScanResult.WIFI_STANDARD_11AC:
                 return R.string.wifi_type_11AC;
             case ScanResult.WIFI_STANDARD_11N:
                 return R.string.wifi_type_11N;
             default:
                 return -1;
         }
     }
 
     private int getMacAddressTitle() {
-        if (mWifiEntry.getPrivacy() == WifiEntry.PRIVACY_RANDOMIZED_MAC) {
+        if (mWifiEntry.getPrivacy() != WifiEntry.PRIVACY_DEVICE_MAC) {
             return mWifiEntry.getConnectedState() == WifiEntry.CONNECTED_STATE_CONNECTED
                     ? R.string.wifi_advanced_randomized_mac_address_title
                     : R.string.wifi_advanced_randomized_mac_address_disconnected_title;
         }
         return R.string.wifi_advanced_device_mac_address_title;
     }
 
     private void updatePreference(Preference pref, String detailText) {
         if (!TextUtils.isEmpty(detailText)) {
             pref.setSummary(detailText);
diff --git a/src/com/android/settings/wifi/details2/WifiPrivacyPreferenceController2.java b/src/com/android/settings/wifi/details2/WifiPrivacyPreferenceController2.java
index c4849225641d3dba7e3cee98741e4ef14abba1a0..d0b98b6086ef14ea593ea310c3227c74ea6dffa2 100644
--- a/src/com/android/settings/wifi/details2/WifiPrivacyPreferenceController2.java
+++ b/src/com/android/settings/wifi/details2/WifiPrivacyPreferenceController2.java
@@ -35,20 +35,24 @@ import com.android.wifitrackerlib.WifiEntry;
  * or not
  */
 public class WifiPrivacyPreferenceController2 extends BasePreferenceController implements
         Preference.OnPreferenceChangeListener, WifiDialog2.WifiDialog2Listener {
 
     private static final String KEY_WIFI_PRIVACY = "privacy";
     private WifiManager mWifiManager;
     private WifiEntry mWifiEntry;
     private Preference mPreference;
 
+    private static final int PREF_RANDOMIZATION_ALWAYS = 0;
+    private static final int PREF_RANDOMIZATION_PERSISTENT = 1;
+    private static final int PREF_RANDOMIZATION_NONE = 2;
+
     public WifiPrivacyPreferenceController2(Context context) {
         super(context, KEY_WIFI_PRIVACY);
 
         mWifiManager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);
     }
 
     public void setWifiEntry(WifiEntry wifiEntry) {
         mWifiEntry = wifiEntry;
     }
 
@@ -92,43 +96,53 @@ public class WifiPrivacyPreferenceController2 extends BasePreferenceController i
         }
         updateSummary((DropDownPreference) preference, privacy);
         return true;
     }
 
     @VisibleForTesting
     int getRandomizationValue() {
         return mWifiEntry.getPrivacy();
     }
 
-    private static final int PREF_RANDOMIZATION_PERSISTENT = 0;
-    private static final int PREF_RANDOMIZATION_NONE = 1;
 
     /**
      * Returns preference index value.
      *
      * @param macRandomized is mac randomized value
      * @return index value of preference
      */
     public static int translateMacRandomizedValueToPrefValue(int macRandomized) {
-        return (macRandomized == WifiEntry.PRIVACY_RANDOMIZED_MAC)
-            ? PREF_RANDOMIZATION_PERSISTENT : PREF_RANDOMIZATION_NONE;
+        switch (macRandomized) {
+            case WifiEntry.PRIVACY_RANDOMIZED_MAC:
+                return PREF_RANDOMIZATION_PERSISTENT;
+            case WifiEntry.PRIVACY_DEVICE_MAC:
+                return PREF_RANDOMIZATION_NONE;
+            default:
+                return PREF_RANDOMIZATION_ALWAYS;
+        }
     }
 
     /**
      * Returns mac randomized value.
      *
      * @param prefMacRandomized is preference index value
      * @return mac randomized value
      */
     public static int translatePrefValueToMacRandomizedValue(int prefMacRandomized) {
-        return (prefMacRandomized == PREF_RANDOMIZATION_PERSISTENT)
-            ? WifiEntry.PRIVACY_RANDOMIZED_MAC : WifiEntry.PRIVACY_DEVICE_MAC;
+        switch (prefMacRandomized) {
+            case PREF_RANDOMIZATION_PERSISTENT:
+                return WifiEntry.PRIVACY_RANDOMIZED_MAC;
+            case PREF_RANDOMIZATION_NONE:
+                return WifiEntry.PRIVACY_DEVICE_MAC;
+            default:
+                return WifiEntry.PRIVACY_RANDOMIZATION_ALWAYS;
+        }
     }
 
     private void updateSummary(DropDownPreference preference, int macRandomized) {
         // Translates value here to set RANDOMIZATION_PERSISTENT as first item in UI for better UX.
         final int prefMacRandomized = translateMacRandomizedValueToPrefValue(macRandomized);
         preference.setSummary(preference.getEntries()[prefMacRandomized]);
     }
 
     @Override
     public void onSubmit(WifiDialog2 dialog) {
@@ -144,15 +158,17 @@ public class WifiPrivacyPreferenceController2 extends BasePreferenceController i
             }
         }
     }
 
     private int getWifiEntryPrivacy(WifiConfiguration wifiConfiguration) {
         switch (wifiConfiguration.macRandomizationSetting) {
             case WifiConfiguration.RANDOMIZATION_NONE:
                 return WifiEntry.PRIVACY_DEVICE_MAC;
             case WifiConfiguration.RANDOMIZATION_PERSISTENT:
                 return WifiEntry.PRIVACY_RANDOMIZED_MAC;
+            case WifiConfiguration.RANDOMIZATION_ALWAYS:
+                return WifiEntry.PRIVACY_RANDOMIZATION_ALWAYS;
             default:
                 return WifiEntry.PRIVACY_UNKNOWN;
         }
     }
 }

commit 14c23b07f7a7c0c9a8984c8a117b6e55536fe1e3
Author: inthewaves <inthewaves@pm.me>
Date:   Sun 2020-09-20 17:57:30-0700

    get outer NFC preference to listen for changes
    
    The NFC preference in Settings -> Connected devices -> Connection
    preferences doesn't listen to changes from the NFC tile. (This wasn't an
    issue in Android 10, because there used to be a SwitchPreference that
    listened there.)
---
 .../NfcAndPaymentFragmentController.java           | 59 +++++++++++++++++++++-
 1 file changed, 58 insertions(+), 1 deletion(-)

diff --git a/src/com/android/settings/connecteddevice/NfcAndPaymentFragmentController.java b/src/com/android/settings/connecteddevice/NfcAndPaymentFragmentController.java
index ee0021ec951afedbff5a55cd63b4087971656fe7..f16dd378db52cddc1847a023eb6ba780be05096d 100644
--- a/src/com/android/settings/connecteddevice/NfcAndPaymentFragmentController.java
+++ b/src/com/android/settings/connecteddevice/NfcAndPaymentFragmentController.java
@@ -9,42 +9,77 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 package com.android.settings.connecteddevice;
 
+import android.content.BroadcastReceiver;
 import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
 import android.content.pm.PackageManager;
 import android.nfc.NfcAdapter;
 import android.os.UserManager;
 
+import androidx.preference.Preference;
+import androidx.preference.PreferenceScreen;
+
 import com.android.settings.R;
 import com.android.settings.core.BasePreferenceController;
+import com.android.settingslib.core.lifecycle.LifecycleObserver;
+import com.android.settingslib.core.lifecycle.events.OnResume;
+import com.android.settingslib.core.lifecycle.events.OnStop;
 
 /**
  * Controller that used to show NFC and payment features
  */
-public class NfcAndPaymentFragmentController extends BasePreferenceController {
+public class NfcAndPaymentFragmentController extends BasePreferenceController
+        implements LifecycleObserver, OnResume, OnStop {
     private final NfcAdapter mNfcAdapter;
     private final PackageManager mPackageManager;
     private final UserManager mUserManager;
+    private final IntentFilter mIntentFilter;
+    private Preference mPreference;
+
+    private final BroadcastReceiver mReceiver = new BroadcastReceiver() {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            if (mPreference == null) {
+                return;
+            }
+
+            final String action = intent.getAction();
+            if (NfcAdapter.ACTION_ADAPTER_STATE_CHANGED.equals(action)) {
+                refreshSummary(mPreference);
+            }
+        }
+    };
 
     public NfcAndPaymentFragmentController(Context context, String preferenceKey) {
         super(context, preferenceKey);
 
         mPackageManager = context.getPackageManager();
         mUserManager = context.getSystemService(UserManager.class);
         mNfcAdapter = NfcAdapter.getDefaultAdapter(context);
+
+        mIntentFilter = isNfcAvailable()
+                ? new IntentFilter(NfcAdapter.ACTION_ADAPTER_STATE_CHANGED) : null;
+    }
+
+    @Override
+    public void displayPreference(PreferenceScreen screen) {
+        super.displayPreference(screen);
+        mPreference = screen.findPreference(getPreferenceKey());
     }
 
     @Override
     public int getAvailabilityStatus() {
         if (!mPackageManager.hasSystemFeature(PackageManager.FEATURE_NFC)
                 || !mPackageManager.hasSystemFeature(
                 PackageManager.FEATURE_NFC_HOST_CARD_EMULATION)) {
             return UNSUPPORTED_ON_DEVICE;
         }
         return AVAILABLE;
@@ -54,11 +89,33 @@ public class NfcAndPaymentFragmentController extends BasePreferenceController {
     public CharSequence getSummary() {
         if (mNfcAdapter != null) {
             if (mNfcAdapter.isEnabled()) {
                 return mContext.getText(R.string.nfc_setting_on);
             } else {
                 return mContext.getText(R.string.nfc_setting_off);
             }
         }
         return null;
     }
+
+    @Override
+    public void onStop() {
+        if (!isNfcAvailable()) {
+            return;
+        }
+
+        mContext.unregisterReceiver(mReceiver);
+    }
+
+    @Override
+    public void onResume() {
+        if (!isNfcAvailable()) {
+            return;
+        }
+
+        mContext.registerReceiver(mReceiver, mIntentFilter);
+    }
+
+    private boolean isNfcAvailable() {
+        return mNfcAdapter != null;
+    }
 }

commit 118ac994f2abb941ca29936ffad8e19b9cfa5d4c
Author: maxwen <max.weninger@gmail.com>
Date:   Thu 2021-04-08 18:43:53+0200

    Settings: Fix hardcoded black text in storage summary
    
    Change-Id: Ic5dae7ca8417e07512be19fb1509643def0f1105
---
 src/com/android/settings/deviceinfo/StorageSummaryPreference.java | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/src/com/android/settings/deviceinfo/StorageSummaryPreference.java b/src/com/android/settings/deviceinfo/StorageSummaryPreference.java
index 72b67de1ddde3ec2c97f062dc99f5225b0da9795..e2aadefc42dd8eabae68923ef729dc3316f4d183 100644
--- a/src/com/android/settings/deviceinfo/StorageSummaryPreference.java
+++ b/src/com/android/settings/deviceinfo/StorageSummaryPreference.java
@@ -20,20 +20,21 @@ import android.content.Context;
 import android.graphics.Color;
 import android.util.MathUtils;
 import android.view.View;
 import android.widget.ProgressBar;
 import android.widget.TextView;
 
 import androidx.preference.Preference;
 import androidx.preference.PreferenceViewHolder;
 
 import com.android.settings.R;
+import com.android.settingslib.Utils;
 
 public class StorageSummaryPreference extends Preference {
     private int mPercent = -1;
 
     public StorageSummaryPreference(Context context) {
         super(context);
 
         setLayoutResource(R.layout.storage_summary);
         setEnabled(false);
     }
@@ -48,15 +49,16 @@ public class StorageSummaryPreference extends Preference {
         final ProgressBar progress = (ProgressBar) view.findViewById(android.R.id.progress);
         if (mPercent != -1) {
             progress.setVisibility(View.VISIBLE);
             progress.setProgress(mPercent);
             progress.setScaleY(7f);
         } else {
             progress.setVisibility(View.GONE);
         }
 
         final TextView summary = (TextView) view.findViewById(android.R.id.summary);
-        summary.setTextColor(Color.parseColor("#8a000000"));
+        summary.setTextColor(Utils.getColorAttrDefaultColor(getContext(),
+                android.R.attr.textColorSecondary));
 
         super.onBindViewHolder(view);
     }
 }

commit 86b041da9387ee87c9cb1c1b474850bea1bd319f
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Tue 2019-10-08 08:11:55-0400

    disable legacy suggestions
---
 res/values/config.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/res/values/config.xml b/res/values/config.xml
index 11827b783c3e4d58edd00812c9d914d62c0300db..55b4ab2643bf9a382d7e99de8247fb01f2b14b59 100755
--- a/res/values/config.xml
+++ b/res/values/config.xml
@@ -201,21 +201,21 @@
     <!-- Whether or not the device is capable of multiple levels of vibration intensity.
          Note that this is different from whether it can control the vibration amplitude as some
          devices will be able to vary their amplitude but do not possess enough dynamic range to
          have distinct intensity levels -->
     <bool name="config_vibration_supports_multiple_intensities">false</bool>
 
     <!--
         Whether or not the homepage should be powered by legacy suggestion (versus contextual cards)
         Default to true as not all devices support contextual cards.
     -->
-    <bool name="config_use_legacy_suggestion">true</bool>
+    <bool name="config_use_legacy_suggestion">false</bool>
 
     <!-- Whether or not homepage should display user's account avatar -->
     <bool name="config_show_avatar_in_homepage">false</bool>
 
     <!-- Whether or not emergency info tile should display in device info page -->
     <bool name="config_show_emergency_info_in_device_info">true</bool>
 
     <!-- Whether or not branded account info tile should display in device info page -->
     <bool name="config_show_branded_account_in_device_info">true</bool>
 

commit e75e4c4c8f3c497befc816dcfa0517edb968e69d
Author: Renlord <renlord.yang@gmail.com>
Date:   Sat 2020-04-11 20:04:51+1000

    add missing android title for top_level_settings
---
 res/xml/top_level_settings.xml | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/res/xml/top_level_settings.xml b/res/xml/top_level_settings.xml
index 042ce43999a90602ba99b32e783df3fc73b5796d..ac24d2bc6a456a3358879da08c3373ec621ac647 100644
--- a/res/xml/top_level_settings.xml
+++ b/res/xml/top_level_settings.xml
@@ -11,21 +11,22 @@
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
   -->
 
 <PreferenceScreen
     xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:settings="http://schemas.android.com/apk/res-auto"
-    android:key="top_level_settings">
+    android:key="top_level_settings"
+    android:title="Settings">
 
     <com.android.settings.widget.HomepagePreference
         android:fragment="com.android.settings.network.NetworkDashboardFragment"
         android:icon="@drawable/ic_settings_wireless"
         android:key="top_level_network"
         android:order="-150"
         android:title="@string/network_dashboard_title"
         android:summary="@string/summary_placeholder"
         settings:highlightableMenuKey="@string/menu_key_network"
         settings:controller="com.android.settings.network.TopLevelNetworkEntryPreferenceController"/>

commit 681ee913f938fcf0990c18ff9dc246a4c79bb68f
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Tue 2021-02-16 02:22:41-0500

    disable showing wallpaper attribution
---
 res/values/config.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/res/values/config.xml b/res/values/config.xml
index 55b4ab2643bf9a382d7e99de8247fb01f2b14b59..8d9e73d6d9a3b3b4aac428eef81052544f0d3315 100755
--- a/res/values/config.xml
+++ b/res/values/config.xml
@@ -411,21 +411,21 @@
     <!-- Whether manage_trust_agents should be shown or not. -->
     <bool name="config_show_manage_trust_agents">true</bool>
 
     <!-- Whether show_password should be shown or not. -->
     <bool name="config_show_show_password">true</bool>
 
     <!-- Whether trust_agent_click_intent should be shown or not. -->
     <bool name="config_show_trust_agent_click_intent">true</bool>
 
     <!-- Whether wallpaper attribution should be shown or not. -->
-    <bool name="config_show_wallpaper_attribution">true</bool>
+    <bool name="config_show_wallpaper_attribution">false</bool>
 
     <!-- Whether assist_and_voice_input should be shown or not. -->
     <bool name="config_show_assist_and_voice_input">true</bool>
 
     <!-- Whether reset_dashboard should be shown or not. -->
     <bool name="config_show_reset_dashboard">true</bool>
 
     <!-- Whether system_update_settings should be shown or not. -->
     <bool name="config_show_system_update_settings">true</bool>
 

commit 40654b1a7ed73cde5d447c9ab5df48e806a2c25f
Author: flawedworld <38294951+flawedworld@users.noreply.github.com>
Date:   Sun 2021-05-16 00:51:15+0100

    Remove misleading "Google Play system update" info field
---
 res/xml/firmware_version.xml | 8 --------
 1 file changed, 8 deletions(-)

diff --git a/res/xml/firmware_version.xml b/res/xml/firmware_version.xml
index 41f7733cfb2bf33e2e3ac859789dca1ca63a26ae..edc910b36cfd1c5254bff5d04dd2b40ac4b59bb4 100644
--- a/res/xml/firmware_version.xml
+++ b/res/xml/firmware_version.xml
@@ -30,28 +30,20 @@
         settings:searchable="false"
         settings:controller="com.android.settings.deviceinfo.firmwareversion.FirmwareVersionDetailPreferenceController"/>
 
     <!-- Security patch -->
     <Preference
         android:key="security_key"
         android:title="@string/security_patch"
         settings:enableCopying="true"
         settings:controller="com.android.settings.deviceinfo.firmwareversion.SecurityPatchLevelPreferenceController"/>
 
-    <!-- Mainline module version -->
-    <Preference
-        android:key="module_version"
-        android:title="@string/module_version"
-        android:summary="@string/summary_placeholder"
-        settings:enableCopying="true"
-        settings:controller="com.android.settings.deviceinfo.firmwareversion.MainlineModuleVersionPreferenceController"/>
-
     <!-- Baseband -->
     <Preference
         android:key="base_band"
         android:title="@string/baseband_version"
         android:summary="@string/summary_placeholder"
         android:selectable="false"
         settings:enableCopying="true"
         settings:controller="com.android.settings.deviceinfo.firmwareversion.BasebandVersionPreferenceController"/>
 
     <!-- Kernel -->

commit 8edb8d6ed3c5405a4d696d9d0b448fc000c1d22f
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Thu 2017-07-20 06:40:20-0400

    enable gesture settings
---
 res/values/config.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/res/values/config.xml b/res/values/config.xml
index 8d9e73d6d9a3b3b4aac428eef81052544f0d3315..c90ba519f0197933e9d6f4054b0f7d66593f7606 100755
--- a/res/values/config.xml
+++ b/res/values/config.xml
@@ -56,21 +56,21 @@
     <string name="config_backup_settings_intent" translatable="false"></string>
 
     <!-- Manufacturer backup settings label -->
     <string name="config_backup_settings_label" translatable="true"></string>
 
     <!-- Double twist sensor type and vendor used by gesture setting -->
     <string name="gesture_double_twist_sensor_type" translatable="false"></string>
     <string name="gesture_double_twist_sensor_vendor" translatable="false"></string>
 
     <!-- When true enable gesture setting. -->
-    <bool name="config_gesture_settings_enabled">false</bool>
+    <bool name="config_gesture_settings_enabled">true</bool>
 
     <!-- If the Storage Manager settings are enabled. -->
     <bool name="config_storage_manager_settings_enabled">false</bool>
 
     <!-- If the support features are enabled. -->
     <bool name="config_support_enabled">false</bool>
 
     <!-- Whether to enable "show operator name in the status bar" setting -->
     <bool name="config_showOperatorNameInStatusBar">false</bool>
 

commit 72ab58f0a0231b83c80436731a0ca223fc6646ff
Author: Danny Lin <danny@kdrag0n.dev>
Date:   Sat 2021-04-17 15:15:51+0100

    Settings: Integrate ThemePicker and WallpaperPicker2
    
    This uses the standalone wallpaper picker class from WallpaperPicker2 as
    seen in the Pixel stock ROM.
---
 res/values/config.xml | 7 ++++---
 1 file changed, 4 insertions(+), 3 deletions(-)

diff --git a/res/values/config.xml b/res/values/config.xml
index c90ba519f0197933e9d6f4054b0f7d66593f7606..5891223ca6fab736917519de80290da864819dfc 100755
--- a/res/values/config.xml
+++ b/res/values/config.xml
@@ -38,24 +38,25 @@
     <!-- When true enable color temperature setting. -->
     <bool name="config_enableColorTemperature">false</bool>
 
     <!-- Whether to show Camera laser sensor switch in Developer Options -->
     <bool name="config_show_camera_laser_sensor">false</bool>
 
     <!-- Fully-qualified class name for the implementation of the FeatureFactory to be instantiated. -->
     <string name="config_featureFactory" translatable="false">com.android.settings.overlay.FeatureFactoryImpl</string>
 
     <!-- Package name and fully-qualified class name for the wallpaper picker activity. -->
-    <string name="config_wallpaper_picker_package" translatable="false">com.android.settings</string>
-    <string name="config_wallpaper_picker_class" translatable="false">com.android.settings.Settings$WallpaperSettingsActivity</string>
+    <string name="config_wallpaper_picker_package" translatable="false">com.android.wallpaper</string>
+    <string name="config_wallpaper_picker_class" translatable="false">com.android.wallpaper.picker.CategoryPickerActivity</string>
+    
     <!-- Fully-qualified class name for the styles & wallpaper picker activity. -->
-    <string name="config_styles_and_wallpaper_picker_class" translatable="false"></string>
+    <string name="config_styles_and_wallpaper_picker_class" translatable="false">com.android.customization.picker.CustomizationPickerActivity</string>
     <!-- Intent extra for wallpaper picker activity. -->
     <string name="config_wallpaper_picker_launch_extra" translatable="false">com.android.wallpaper.LAUNCH_SOURCE</string>
 
     <!-- Manufacturer backup settings to launch -->
     <string name="config_backup_settings_intent" translatable="false"></string>
 
     <!-- Manufacturer backup settings label -->
     <string name="config_backup_settings_label" translatable="true"></string>
 
     <!-- Double twist sensor type and vendor used by gesture setting -->

commit c9abc31388973e78031dcd1ec11c602b50949013
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Sun 2019-03-17 18:55:25-0400

    do not allow disabling the default keyboard
    
    It's not obvious that disabling it after installing another keyboard is
    a very bad idea. Other keyboards rarely support Direct Boot and won't
    work for entering the password, forcing recovery by plugging in a
    physical keyboard. Even if they do support Direct Boot it's a bad idea
    to rely on third party apps for basic functionality to keep working.
---
 .../settings/applications/appinfo/AppButtonsPreferenceController.java    | 1 +
 1 file changed, 1 insertion(+)

diff --git a/src/com/android/settings/applications/appinfo/AppButtonsPreferenceController.java b/src/com/android/settings/applications/appinfo/AppButtonsPreferenceController.java
index 1b270d63b4dd3e30a7935dc1f142cea5d4cdd81a..3b6b048752c54aa628aed5f73c79d1e025f7f49f 100644
--- a/src/com/android/settings/applications/appinfo/AppButtonsPreferenceController.java
+++ b/src/com/android/settings/applications/appinfo/AppButtonsPreferenceController.java
@@ -580,20 +580,21 @@ public class AppButtonsPreferenceController extends BasePreferenceController imp
         updateForceStopButton();
     }
 
     @VisibleForTesting
     boolean handleDisableable() {
         boolean disableable = false;
         // Try to prevent the user from bricking their phone
         // by not allowing disabling of apps signed with the
         // system cert and any launcher app in the system.
         if (mHomePackages.contains(mAppEntry.info.packageName)
+                || mAppEntry.info.packageName.equals("com.android.inputmethod.latin")
                 || isSystemPackage(mActivity.getResources(), mPm, mPackageInfo)) {
             // Disable button for core system applications.
             mButtonsPref.setButton2Text(R.string.disable_text)
                     .setButton2Icon(R.drawable.ic_settings_disable);
         } else if (mAppEntry.info.enabled && !isDisabledUntilUsed()) {
             mButtonsPref.setButton2Text(R.string.disable_text)
                     .setButton2Icon(R.drawable.ic_settings_disable);
             disableable = !mApplicationFeatureProvider.getKeepEnabledPackages()
                     .contains(mAppEntry.info.packageName);
         } else {

commit e1d6bb0dd563ecd3df15d50e0ca5250046417c94
Author: flawedworld <38294951+flawedworld@users.noreply.github.com>
Date:   Tue 2021-04-06 01:11:39+0100

    do not allow disabling vanadium webview
    
    Rationale being that it can (and will) break some apps if disabled.
---
 .../settings/applications/appinfo/AppButtonsPreferenceController.java    | 1 +
 1 file changed, 1 insertion(+)

diff --git a/src/com/android/settings/applications/appinfo/AppButtonsPreferenceController.java b/src/com/android/settings/applications/appinfo/AppButtonsPreferenceController.java
index 3b6b048752c54aa628aed5f73c79d1e025f7f49f..51ae93459f75d42eccc56b7c7d9fc8a9d3c129b7 100644
--- a/src/com/android/settings/applications/appinfo/AppButtonsPreferenceController.java
+++ b/src/com/android/settings/applications/appinfo/AppButtonsPreferenceController.java
@@ -581,20 +581,21 @@ public class AppButtonsPreferenceController extends BasePreferenceController imp
     }
 
     @VisibleForTesting
     boolean handleDisableable() {
         boolean disableable = false;
         // Try to prevent the user from bricking their phone
         // by not allowing disabling of apps signed with the
         // system cert and any launcher app in the system.
         if (mHomePackages.contains(mAppEntry.info.packageName)
                 || mAppEntry.info.packageName.equals("com.android.inputmethod.latin")
+                || mAppEntry.info.packageName.equals("app.vanadium.webview")
                 || isSystemPackage(mActivity.getResources(), mPm, mPackageInfo)) {
             // Disable button for core system applications.
             mButtonsPref.setButton2Text(R.string.disable_text)
                     .setButton2Icon(R.drawable.ic_settings_disable);
         } else if (mAppEntry.info.enabled && !isDisabledUntilUsed()) {
             mButtonsPref.setButton2Text(R.string.disable_text)
                     .setButton2Icon(R.drawable.ic_settings_disable);
             disableable = !mApplicationFeatureProvider.getKeepEnabledPackages()
                     .contains(mAppEntry.info.packageName);
         } else {

commit 684cb8e9239ddfc6b4525679565855d62032a942
Author: inthewaves <inthewaves@pm.me>
Date:   Sun 2021-10-17 00:29:28+0100

    add LTE only setting
    
    Unlike 11, enable LTE only when World mode is enabled also and ignore CarrierConfig options which essentially break the feature by hiding the preferred networks option.
---
 res/values/arrays.xml                              |  5 +++-
 res/values/strings.xml                             |  6 ++++
 .../EnabledNetworkModePreferenceController.java    | 32 ++++++++++++++++++++--
 .../PreferredNetworkModePreferenceController.java  |  2 +-
 4 files changed, 41 insertions(+), 4 deletions(-)

diff --git a/res/values/arrays.xml b/res/values/arrays.xml
index b8fb4b89af2670df1e9c3cd0060a07b5bfa1b007..12edcd675ef9d39a4ef2d2f31caa5e40c1508c6b 100644
--- a/res/values/arrays.xml
+++ b/res/values/arrays.xml
@@ -1348,20 +1348,23 @@
         <item>Verbose</item>
     </string-array>
 
     <!-- Values for autofill logging level preference. -->
     <string-array name="autofill_logging_level_values" translatable="false" >
         <item>0</item> <!-- AutofillManager.NO_LOGGING -->
         <item>2</item> <!-- AutofillManager.FLAG_ADD_CLIENT_DEBUG -->
         <item>4</item> <!-- AutofillManager.FLAG_ADD_CLIENT_VERBOSE -->
     </string-array>
 
+    <!-- Note: The LTE only option is added in code, not here. Also, these enabled_networks_choices
+         and enabled_networks_4g_choices string arrays are just placeholders for
+         mobile_network_settings.xml -->
     <string-array name="enabled_networks_choices" translatable="false">
         <item>@string/network_lte</item>
         <item>@string/network_3G</item>
         <item>@string/network_2G</item>
     </string-array>
     <string-array name="enabled_networks_4g_choices" translatable="false">
         <item>@string/network_4G</item>
         <item>@string/network_3G</item>
         <item>@string/network_2G</item>
     </string-array>
@@ -1437,21 +1440,21 @@
         <item>GSM only</item>
         <item>WCDMA only</item>
         <item>GSM/WCDMA auto</item>
         <item>CDMA/EvDo auto</item>
         <item>CDMA w/o EvDo</item>
         <item>EvDo only</item>
         <item>CDMA/EvDo/GSM/WCDMA</item>
         <item>CDMA + LTE/EvDo</item>
         <item>GSM/WCDMA/LTE</item>
         <item>LTE/CDMA/EvDo/GSM/WCDMA</item>
-        <item>LTE</item>
+        <item>LTE Only</item>
         <item>LTE / WCDMA</item>
         <item>TDSCDMA only</item>
         <item>TDSCDMA/WCDMA</item>
         <item>LTE/TDSCDMA</item>
         <item>TDSCDMA/GSM</item>
         <item>LTE/TDSCDMA/GSM</item>
         <item>TDSCDMA/GSM/WCDMA</item>
         <item>LTE/TDSCDMA/WCDMA</item>
         <item>LTE/TDSCDMA/GSM/WCDMA</item>
         <item>TDSCDMA/CDMA/EVDO/GSM/WCDMA </item>
diff --git a/res/values/strings.xml b/res/values/strings.xml
index e8118e2e6151e734143dfd3b912632a8c90908af..ce719221c2219f774734fbdd6030407155bc64e3 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -12569,20 +12569,22 @@
     <!-- CDMA / EvDo [CHAR LIMIT=NONE] -->
     <string name="preferred_network_mode_cdma_evdo_summary">Preferred network mode: CDMA / EvDo</string>
     <!-- CDMA only [CHAR LIMIT=NONE] -->
     <string name="preferred_network_mode_cdma_only_summary">Preferred network mode: CDMA only</string>
     <!-- EvDo only [CHAR LIMIT=NONE] -->
     <string name="preferred_network_mode_evdo_only_summary">Preferred network mode: EvDo only</string>
     <!-- CDMA/EvDo/GSM/WCDMA [CHAR LIMIT=NONE] -->
     <string name="preferred_network_mode_cdma_evdo_gsm_wcdma_summary">Preferred network mode: CDMA/EvDo/GSM/WCDMA</string>
     <!-- LTE [CHAR LIMIT=NONE] -->
     <string name="preferred_network_mode_lte_summary">Preferred network mode: LTE </string>
+    <!-- LTE only [CHAR LIMIT=100] -->
+    <string name="preferred_network_mode_lte_only_summary">Preferred network mode: LTE only</string>
     <!-- GSM/WCDMA/LTE [CHAR LIMIT=NONE] -->
     <string name="preferred_network_mode_lte_gsm_wcdma_summary">Preferred network mode: GSM/WCDMA/LTE</string>
     <!-- CDMA+LTE/EVDO [CHAR LIMIT=NONE] -->
     <string name="preferred_network_mode_lte_cdma_evdo_summary">Preferred network mode: CDMA+LTE/EVDO</string>
     <!-- LTE/CDMA/EvDo/GSM/WCDMA [CHAR LIMIT=NONE] -->
     <string name="preferred_network_mode_lte_cdma_evdo_gsm_wcdma_summary">Preferred network mode: LTE/CDMA/EvDo/GSM/WCDMA</string>
     <!-- Global [CHAR LIMIT=NONE] -->
     <string name="preferred_network_mode_global_summary">Preferred network mode: Global</string>
     <!-- LTE / WCDMA [CHAR LIMIT=NONE] -->
     <string name="preferred_network_mode_lte_wcdma_summary">Preferred network mode: LTE / WCDMA</string>
@@ -12634,22 +12636,26 @@
     <string name="preferred_network_mode_nr_lte_tdscdma_cdma_evdo_gsm_wcdma_summary">Preferred network mode: NR/LTE/TDSCDMA/CDMA/EvDo/GSM/WCDMA</string>
 
     <!-- Text for Network mode 5g recommended [CHAR LIMIT=NONE] -->
     <string name="network_5G_recommended">5G (recommended)</string>
     <!-- Text for Network lte [CHAR LIMIT=NONE] -->
     <string name="network_lte_pure" translatable="false">LTE</string>
     <!-- Text for Network 4g [CHAR LIMIT=NONE] -->
     <string name="network_4G_pure" translatable="false">4G</string>
     <!-- Text for Network lte [CHAR LIMIT=NONE] -->
     <string name="network_lte">LTE (recommended)</string>
+    <!-- Text for Network lte only [CHAR LIMIT=NONE] -->
+    <string name="network_lte_only">LTE only</string>
     <!-- Text for Network 4g [CHAR LIMIT=NONE] -->
     <string name="network_4G">4G (recommended)</string>
+    <!-- Text for Network 4g only [CHAR LIMIT=NONE] -->
+    <string name="network_4G_only">4G only</string>
     <!-- Text for Network 3g [CHAR LIMIT=NONE] -->
     <string name="network_3G" translatable="false">3G</string>
     <!-- Text for Network 2g [CHAR LIMIT=NONE] -->
     <string name="network_2G" translatable="false">2G</string>
     <!-- Text for Network 1x [CHAR LIMIT=NONE] -->
     <string name="network_1x" translatable="false">1x</string>
     <!-- Text for Network global [CHAR LIMIT=NONE] -->
     <string name="network_global" translatable="false">Global</string>
     <!-- Text for Network world mode CDMA LTE [CHAR LIMIT=NONE] -->
     <string name="network_world_mode_cdma_lte" translatable="false">LTE / CDMA</string>
diff --git a/src/com/android/settings/network/telephony/EnabledNetworkModePreferenceController.java b/src/com/android/settings/network/telephony/EnabledNetworkModePreferenceController.java
index 25e0ae0765b8873bf509f271f46e2727cd7e1d6d..e3967dd2923cfe4baabc2642671139f1bccf6c19 100644
--- a/src/com/android/settings/network/telephony/EnabledNetworkModePreferenceController.java
+++ b/src/com/android/settings/network/telephony/EnabledNetworkModePreferenceController.java
@@ -71,21 +71,21 @@ public class EnabledNetworkModePreferenceController extends
         boolean visible;
         final PersistableBundle carrierConfig = mCarrierConfigManager.getConfigForSubId(subId);
         if (subId == SubscriptionManager.INVALID_SUBSCRIPTION_ID) {
             visible = false;
         } else if (carrierConfig == null) {
             visible = false;
         } else if (carrierConfig.getBoolean(
                 CarrierConfigManager.KEY_HIDE_CARRIER_NETWORK_SETTINGS_BOOL)
                 || carrierConfig.getBoolean(
                 CarrierConfigManager.KEY_HIDE_PREFERRED_NETWORK_TYPE_BOOL)) {
-            visible = false;
+            visible = true;
         } else if (carrierConfig.getBoolean(CarrierConfigManager.KEY_WORLD_PHONE_BOOL)) {
             visible = false;
         } else {
             visible = true;
         }
 
         return visible ? AVAILABLE : CONDITIONALLY_UNAVAILABLE;
     }
 
     @OnLifecycleEvent(ON_START)
@@ -241,20 +241,21 @@ public class EnabledNetworkModePreferenceController extends
                 case ENABLED_NETWORKS_CDMA_CHOICES:
                     entryValues = getResourcesForSubId().getStringArray(
                             R.array.enabled_networks_cdma_values);
                     entryValuesInt = Stream.of(entryValues).mapToInt(Integer::parseInt).toArray();
                     if (entryValuesInt.length < 4) {
                         throw new IllegalArgumentException(
                                 "ENABLED_NETWORKS_CDMA_CHOICES index error.");
                     }
                     add5gEntry(addNrToLteNetworkType(entryValuesInt[0]));
                     addLteEntry(entryValuesInt[0]);
+                    addLteOnlyEntry();
                     add3gEntry(entryValuesInt[1]);
                     add1xEntry(entryValuesInt[2]);
                     addGlobalEntry(entryValuesInt[3]);
                     break;
                 case ENABLED_NETWORKS_CDMA_NO_LTE_CHOICES:
                     entryValues = getResourcesForSubId().getStringArray(
                             R.array.enabled_networks_cdma_no_lte_values);
                     entryValuesInt = Stream.of(entryValues).mapToInt(Integer::parseInt).toArray();
                     if (entryValuesInt.length < 2) {
                         throw new IllegalArgumentException(
@@ -265,32 +266,34 @@ public class EnabledNetworkModePreferenceController extends
                     break;
                 case ENABLED_NETWORKS_CDMA_ONLY_LTE_CHOICES:
                     entryValues = getResourcesForSubId().getStringArray(
                             R.array.enabled_networks_cdma_only_lte_values);
                     entryValuesInt = Stream.of(entryValues).mapToInt(Integer::parseInt).toArray();
                     if (entryValuesInt.length < 2) {
                         throw new IllegalArgumentException(
                                 "ENABLED_NETWORKS_CDMA_ONLY_LTE_CHOICES index error.");
                     }
                     addLteEntry(entryValuesInt[0]);
+                    addLteOnlyEntry();
                     addGlobalEntry(entryValuesInt[1]);
                     break;
                 case ENABLED_NETWORKS_TDSCDMA_CHOICES:
                     entryValues = getResourcesForSubId().getStringArray(
                             R.array.enabled_networks_tdscdma_values);
                     entryValuesInt = Stream.of(entryValues).mapToInt(Integer::parseInt).toArray();
                     if (entryValuesInt.length < 3) {
                         throw new IllegalArgumentException(
                                 "ENABLED_NETWORKS_TDSCDMA_CHOICES index error.");
                     }
                     add5gEntry(addNrToLteNetworkType(entryValuesInt[0]));
                     addLteEntry(entryValuesInt[0]);
+                    addLteOnlyEntry();
                     add3gEntry(entryValuesInt[1]);
                     add2gEntry(entryValuesInt[2]);
                     break;
                 case ENABLED_NETWORKS_EXCEPT_GSM_LTE_CHOICES:
                     entryValues = getResourcesForSubId().getStringArray(
                             R.array.enabled_networks_except_gsm_lte_values);
                     entryValuesInt = Stream.of(entryValues).mapToInt(Integer::parseInt).toArray();
                     if (entryValuesInt.length < 1) {
                         throw new IllegalArgumentException(
                                 "ENABLED_NETWORKS_EXCEPT_GSM_LTE_CHOICES index error.");
@@ -300,32 +303,34 @@ public class EnabledNetworkModePreferenceController extends
                 case ENABLED_NETWORKS_EXCEPT_GSM_4G_CHOICES:
                     entryValues = getResourcesForSubId().getStringArray(
                             R.array.enabled_networks_except_gsm_values);
                     entryValuesInt = Stream.of(entryValues).mapToInt(Integer::parseInt).toArray();
                     if (entryValuesInt.length < 2) {
                         throw new IllegalArgumentException(
                                 "ENABLED_NETWORKS_EXCEPT_GSM_4G_CHOICES index error.");
                     }
                     add5gEntry(addNrToLteNetworkType(entryValuesInt[0]));
                     add4gEntry(entryValuesInt[0]);
+                    add4gOnlyEntry();
                     add3gEntry(entryValuesInt[1]);
                     break;
                 case ENABLED_NETWORKS_EXCEPT_GSM_CHOICES:
                     entryValues = getResourcesForSubId().getStringArray(
                             R.array.enabled_networks_except_gsm_values);
                     entryValuesInt = Stream.of(entryValues).mapToInt(Integer::parseInt).toArray();
                     if (entryValuesInt.length < 2) {
                         throw new IllegalArgumentException(
                                 "ENABLED_NETWORKS_EXCEPT_GSM_CHOICES index error.");
                     }
                     add5gEntry(addNrToLteNetworkType(entryValuesInt[0]));
                     addLteEntry(entryValuesInt[0]);
+                    addLteOnlyEntry();
                     add3gEntry(entryValuesInt[1]);
                     break;
                 case ENABLED_NETWORKS_EXCEPT_LTE_CHOICES:
                     entryValues = getResourcesForSubId().getStringArray(
                             R.array.enabled_networks_except_lte_values);
                     entryValuesInt = Stream.of(entryValues).mapToInt(Integer::parseInt).toArray();
                     if (entryValuesInt.length < 2) {
                         throw new IllegalArgumentException(
                                 "ENABLED_NETWORKS_EXCEPT_LTE_CHOICES index error.");
                     }
@@ -336,43 +341,46 @@ public class EnabledNetworkModePreferenceController extends
                     entryValues = getResourcesForSubId().getStringArray(
                             R.array.enabled_networks_values);
                     entryValuesInt = Stream.of(entryValues).mapToInt(Integer::parseInt).toArray();
                     if (entryValuesInt.length < 3) {
                         throw new IllegalArgumentException(
                                 "ENABLED_NETWORKS_4G_CHOICES index error.");
                     }
                     add5gEntry(addNrToLteNetworkType(
                             entryValuesInt[0]));
                     add4gEntry(entryValuesInt[0]);
+                    add4gOnlyEntry();
                     add3gEntry(entryValuesInt[1]);
                     add2gEntry(entryValuesInt[2]);
                     break;
                 case ENABLED_NETWORKS_CHOICES:
                     entryValues = getResourcesForSubId().getStringArray(
                             R.array.enabled_networks_values);
                     entryValuesInt = Stream.of(entryValues).mapToInt(Integer::parseInt).toArray();
                     if (entryValuesInt.length < 3) {
                         throw new IllegalArgumentException("ENABLED_NETWORKS_CHOICES index error.");
                     }
                     add5gEntry(addNrToLteNetworkType(entryValuesInt[0]));
                     addLteEntry(entryValuesInt[0]);
+                    addLteOnlyEntry();
                     add3gEntry(entryValuesInt[1]);
                     add2gEntry(entryValuesInt[2]);
                     break;
                 case PREFERRED_NETWORK_MODE_CHOICES_WORLD_MODE:
                     entryValues = getResourcesForSubId().getStringArray(
                             R.array.preferred_network_mode_values_world_mode);
                     entryValuesInt = Stream.of(entryValues).mapToInt(Integer::parseInt).toArray();
                     if (entryValuesInt.length < 3) {
                         throw new IllegalArgumentException(
                                 "PREFERRED_NETWORK_MODE_CHOICES_WORLD_MODE index error.");
                     }
+                    addLteOnlyEntry();
                     addGlobalEntry(entryValuesInt[0]);
 
                     addCustomEntry(
                             getResourcesForSubId().getString(
                                     R.string.network_world_mode_cdma_lte),
                             entryValuesInt[1]);
                     addCustomEntry(
                             getResourcesForSubId().getString(
                                     R.string.network_world_mode_gsm_lte),
                             entryValuesInt[2]);
@@ -498,38 +506,42 @@ public class EnabledNetworkModePreferenceController extends
                                 TelephonyManagerConstants.NETWORK_MODE_LTE_CDMA_EVDO_GSM_WCDMA);
                         setSummary(R.string.network_global);
                     }
                     break;
                 case TelephonyManagerConstants.NETWORK_MODE_LTE_GSM_WCDMA:
                     if (MobileNetworkUtils.isWorldMode(mContext, mSubId)) {
                         setSummary(
                                 R.string.preferred_network_mode_lte_gsm_umts_summary);
                         break;
                     }
-                case TelephonyManagerConstants.NETWORK_MODE_LTE_ONLY:
                 case TelephonyManagerConstants.NETWORK_MODE_LTE_WCDMA:
                     if (!mIsGlobalCdma) {
                         setSelectedEntry(
                                 TelephonyManagerConstants.NETWORK_MODE_LTE_GSM_WCDMA);
                         if (is5gEntryDisplayed()) {
                             setSummary(mShow4gForLTE
                                     ? R.string.network_4G_pure : R.string.network_lte_pure);
                         } else {
                             setSummary(mShow4gForLTE
                                     ? R.string.network_4G : R.string.network_lte);
                         }
                     } else {
                         setSelectedEntry(
                                 TelephonyManagerConstants.NETWORK_MODE_LTE_CDMA_EVDO_GSM_WCDMA);
                         setSummary(R.string.network_global);
                     }
                     break;
+                case TelephonyManagerConstants.NETWORK_MODE_LTE_ONLY:
+                    setSelectedEntry(TelephonyManagerConstants.NETWORK_MODE_LTE_ONLY);
+                    setSummary(mShow4gForLTE
+                            ? R.string.network_4G_only : R.string.network_lte_only);
+                    break;
                 case TelephonyManagerConstants.NETWORK_MODE_LTE_CDMA_EVDO:
                     if (MobileNetworkUtils.isWorldMode(mContext, mSubId)) {
                         setSummary(
                                 R.string.preferred_network_mode_lte_cdma_summary);
                     } else {
                         setSelectedEntry(
                                 TelephonyManagerConstants.NETWORK_MODE_LTE_CDMA_EVDO);
                         setSummary(is5gEntryDisplayed()
                                 ? R.string.network_lte_pure : R.string.network_lte);
                     }
@@ -725,20 +737,36 @@ public class EnabledNetworkModePreferenceController extends
             if (showNrList()) {
                 value = addNrToLteNetworkType(value);
             }
             mEntriesValue.add(value);
         }
 
         private boolean showNrList() {
             return mSupported5gRadioAccessFamily && mAllowed5gNetworkType;
         }
 
+        /**
+         * Add LTE only entry.
+         */
+        private void addLteOnlyEntry() {
+            mEntries.add(mContext.getString(R.string.network_lte_only));
+            mEntriesValue.add(TelephonyManagerConstants.NETWORK_MODE_LTE_ONLY);
+        }
+
+        /**
+         * Add 4G only entry
+         */
+        private void add4gOnlyEntry() {
+            mEntries.add(mContext.getString(R.string.network_4G_only));
+            mEntriesValue.add(TelephonyManagerConstants.NETWORK_MODE_LTE_ONLY);
+        }
+
         /**
          * Add LTE entry. If device supported 5G, show "LTE" instead of "LTE (recommended)".
          */
         private void addLteEntry(int value) {
             if (showNrList()) {
                 mEntries.add(getResourcesForSubId().getString(R.string.network_lte_pure));
             } else {
                 mEntries.add(getResourcesForSubId().getString(R.string.network_lte));
             }
             mEntriesValue.add(value);
diff --git a/src/com/android/settings/network/telephony/PreferredNetworkModePreferenceController.java b/src/com/android/settings/network/telephony/PreferredNetworkModePreferenceController.java
index 24197795fa20fcbdc291566ce3d2a3c56e75cc32..0202163bbae3a56836c8109fbced3a40ad247ec4 100644
--- a/src/com/android/settings/network/telephony/PreferredNetworkModePreferenceController.java
+++ b/src/com/android/settings/network/telephony/PreferredNetworkModePreferenceController.java
@@ -124,21 +124,21 @@ public class PreferredNetworkModePreferenceController extends TelephonyBasePrefe
                 return mTelephonyManager.isLteCdmaEvdoGsmWcdmaEnabled()
                         ? R.string.preferred_network_mode_cdma_summary
                         : R.string.preferred_network_mode_cdma_evdo_summary;
             case TelephonyManagerConstants.NETWORK_MODE_CDMA_NO_EVDO:
                 return R.string.preferred_network_mode_cdma_only_summary;
             case TelephonyManagerConstants.NETWORK_MODE_EVDO_NO_CDMA:
                 return R.string.preferred_network_mode_evdo_only_summary;
             case TelephonyManagerConstants.NETWORK_MODE_LTE_TDSCDMA:
                 return R.string.preferred_network_mode_lte_tdscdma_summary;
             case TelephonyManagerConstants.NETWORK_MODE_LTE_ONLY:
-                return R.string.preferred_network_mode_lte_summary;
+                return R.string.preferred_network_mode_lte_only_summary;
             case TelephonyManagerConstants.NETWORK_MODE_LTE_TDSCDMA_GSM:
                 return R.string.preferred_network_mode_lte_tdscdma_gsm_summary;
             case TelephonyManagerConstants.NETWORK_MODE_LTE_TDSCDMA_GSM_WCDMA:
                 return R.string.preferred_network_mode_lte_tdscdma_gsm_wcdma_summary;
             case TelephonyManagerConstants.NETWORK_MODE_LTE_GSM_WCDMA:
                 return R.string.preferred_network_mode_lte_gsm_wcdma_summary;
             case TelephonyManagerConstants.NETWORK_MODE_LTE_CDMA_EVDO:
                 return R.string.preferred_network_mode_lte_cdma_evdo_summary;
             case TelephonyManagerConstants.NETWORK_MODE_TDSCDMA_ONLY:
                 return R.string.preferred_network_mode_tdscdma_summary;

commit edb354cd58fa2ff08c7d94a9388052d3093b67e3
Author: lsfxz <lsfxz@users.noreply.github.com>
Date:   Sun 2019-12-08 14:58:24-0800

    add deny_new_usb setting
    
    Based on original patch by Daniel Micay <danielmicay@gmail.com>.
---
 res/values/arrays.xml                              |  16 ++++
 res/values/strings.xml                             |   2 +
 res/xml/security_dashboard_settings.xml            |   8 ++
 .../DenyNewUsbPreferenceController.java (new)      | 103 +++++++++++++++++++++
 .../settings/security/SecuritySettings.java        |   1 +
 5 files changed, 130 insertions(+)

diff --git a/res/values/arrays.xml b/res/values/arrays.xml
index 12edcd675ef9d39a4ef2d2f31caa5e40c1508c6b..1dbb5c0c79496381513ff6f6b4b7e23aa10140e7 100644
--- a/res/values/arrays.xml
+++ b/res/values/arrays.xml
@@ -127,20 +127,36 @@
     <string-array name="scramble_pin_entries">
         <item>Scramble PIN</item>
         <item>No PIN scrambling</item>
     </string-array>
 
     <string-array name="scramble_pin_values" translatable="false">
         <item>true</item>
         <item>false</item>
     </string-array>
 
+    <string-array name="deny_new_usb_entries">
+        <item>Deny new USB peripherals</item>
+        <item>Allow new USB peripherals when unlocked</item>
+        <item>Allow new USB peripherals</item>
+    </string-array>
+
+    <!-- Do not translate. -->
+    <string-array name="deny_new_usb_values" translatable="false">
+        <!-- Do not translate. -->
+        <item>enabled</item>
+        <!-- Do not translate. -->
+        <item>dynamic</item>
+        <!-- Do not translate. -->
+        <item>disabled</item>
+    </string-array>
+
     <!-- Do not translate. -->
     <string-array name="lock_after_timeout_values" translatable="false">
         <!-- Do not translate. -->
         <item>0</item>
         <!-- Do not translate. -->
         <item>5000</item>
         <!-- Do not translate. -->
         <item>15000</item>
         <!-- Do not translate. -->
         <item>30000</item>
diff --git a/res/values/strings.xml b/res/values/strings.xml
index ce719221c2219f774734fbdd6030407155bc64e3..da31acda75532a6f36f1c1aa7fa034f481a2a70c 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -13638,11 +13638,13 @@
     <string name="bluetooth_connect_access_dialog_title">Connect to Bluetooth device?</string>
     <!-- Bluetooth connect permission alert for dialog content [CHAR LIMIT=none] -->
     <string name="bluetooth_connect_access_dialog_content"><xliff:g id="device_name" example="My device">%1$s</xliff:g> wants to connect to this phone.\n\nYou haven\u2019t connected to <xliff:g id="device_name" example="My device">%2$s</xliff:g> before.</string>
     <!-- Strings for Dialog don't connect button -->
     <string name="bluetooth_connect_access_dialog_negative">Don\u2019t connect</string>
     <!-- Strings for Dialog connect button -->
     <string name="bluetooth_connect_access_dialog_positive">Connect</string>
 
     <string name="scramble_pin_title">PIN scrambling</string>
     <string name="scramble_pin_summary">Controls PIN scrambling option when inputting PIN on screen lock.</string>
+    <string name="deny_new_usb_title">USB accessories</string>
+    <string name="deny_new_usb_summary">Control support for USB peripherals such as input (mice, keyboards, joysticks) and storage devices.</string>
 </resources>
diff --git a/res/xml/security_dashboard_settings.xml b/res/xml/security_dashboard_settings.xml
index ccdd44835635e87f0369f0a581fc4676f5ca68be..d764180852e4a8dfab337279c1cf61bf518e5a1e 100644
--- a/res/xml/security_dashboard_settings.xml
+++ b/res/xml/security_dashboard_settings.xml
@@ -47,20 +47,28 @@
             android:key="fingerprint_settings"
             android:title="@string/security_settings_fingerprint_preference_title"
             android:summary="@string/summary_placeholder"
             settings:keywords="@string/keywords_fingerprint_settings" />
 
         <com.android.settingslib.RestrictedPreference
             android:key="face_settings"
             android:title="@string/security_settings_face_preference_title"
             android:summary="@string/summary_placeholder"
             settings:keywords="@string/keywords_face_settings" />
+        
+        <ListPreference
+            android:key="deny_new_usb"
+            android:title="@string/deny_new_usb_title"
+            android:summary="@string/deny_new_usb_summary"
+            android:persistent="false"
+            android:entries="@array/deny_new_usb_entries"
+            android:entryValues="@array/deny_new_usb_values" />
 
         <ListPreference
             android:key="scramble_pin_layout"
             android:title="@string/scramble_pin_title"
             android:summary="@string/scramble_pin_summary"
             android:persistent="false"
             android:entries="@array/scramble_pin_entries"
             android:entryValues="@array/scramble_pin_values" />
 
         <com.android.settingslib.RestrictedPreference
diff --git a/src/com/android/settings/security/DenyNewUsbPreferenceController.java b/src/com/android/settings/security/DenyNewUsbPreferenceController.java
new file mode 100644
index 0000000000000000000000000000000000000000..5edddbf63ace53afa33ae7be6e8654186491b06a
--- /dev/null
+++ b/src/com/android/settings/security/DenyNewUsbPreferenceController.java
@@ -0,0 +1,103 @@
+package com.android.settings.security;
+
+import android.content.Context;
+
+import android.os.UserHandle;
+import android.os.UserManager;
+import android.os.SystemProperties;
+
+import android.provider.Settings;
+
+
+import androidx.preference.ListPreference;
+import androidx.preference.Preference;
+import androidx.preference.PreferenceCategory;
+import androidx.preference.PreferenceGroup;
+import androidx.preference.PreferenceScreen;
+
+
+import com.android.internal.widget.LockPatternUtils;
+import com.android.settings.core.PreferenceControllerMixin;
+import com.android.settingslib.core.AbstractPreferenceController;
+import com.android.settingslib.core.lifecycle.events.OnResume;
+
+public class DenyNewUsbPreferenceController extends AbstractPreferenceController
+        implements PreferenceControllerMixin, OnResume, Preference.OnPreferenceChangeListener {
+
+    private static final String KEY_DENY_NEW_USB = "deny_new_usb";
+    private static final String DENY_NEW_USB_PROP = "security.deny_new_usb";
+    private static final String DENY_NEW_USB_PERSIST_PROP = "persist.security.deny_new_usb";
+    private static final String PREF_KEY_SECURITY_CATEGORY = "security_category";
+
+    private PreferenceCategory mSecurityCategory;
+    private ListPreference mDenyNewUsb;
+    private boolean mIsAdmin;
+    private final UserManager mUm;
+
+    public DenyNewUsbPreferenceController(Context context) {
+        super(context);
+        mUm = UserManager.get(context);
+    }
+
+    @Override
+    public void displayPreference(PreferenceScreen screen) {
+        super.displayPreference(screen);
+        mSecurityCategory = screen.findPreference(PREF_KEY_SECURITY_CATEGORY);
+        updatePreferenceState();
+    }
+
+    @Override
+    public boolean isAvailable() {
+        mIsAdmin = mUm.isAdminUser();
+        return mIsAdmin;
+    }
+
+    @Override
+    public String getPreferenceKey() {
+        return KEY_DENY_NEW_USB;
+    }
+
+    // TODO: should we use onCreatePreferences() instead?
+    private void updatePreferenceState() {
+        if (mSecurityCategory == null) {
+            return;
+        }
+
+        if (mIsAdmin) {
+            mDenyNewUsb = (ListPreference) mSecurityCategory.findPreference(KEY_DENY_NEW_USB);
+            mDenyNewUsb.setValue(SystemProperties.get(DENY_NEW_USB_PERSIST_PROP, "disabled"));
+        } else {
+            mSecurityCategory.removePreference(mSecurityCategory.findPreference(KEY_DENY_NEW_USB));
+        }
+    }
+
+    @Override
+    public void onResume() {
+        updatePreferenceState();
+
+        if (mDenyNewUsb != null) {
+            String mode = mDenyNewUsb.getValue();
+            if (mode.equals("dynamic") || mode.equals("disabled")) {
+                SystemProperties.set(DENY_NEW_USB_PROP, "0");
+            } else {
+                SystemProperties.set(DENY_NEW_USB_PROP, "1");
+            }
+        }
+    }
+
+    @Override
+    public boolean onPreferenceChange(Preference preference, Object value) {
+        final String key = preference.getKey();
+        if (KEY_DENY_NEW_USB.equals(key)) {
+            String mode = (String) value;
+            SystemProperties.set(DENY_NEW_USB_PERSIST_PROP, mode);
+            // The dynamic mode defaults to the disabled state
+            if (mode.equals("dynamic") || mode.equals("disabled")) {
+                SystemProperties.set(DENY_NEW_USB_PROP, "0");
+            } else {
+                SystemProperties.set(DENY_NEW_USB_PROP, "1");
+            }
+        }
+        return true;
+    }
+}
diff --git a/src/com/android/settings/security/SecuritySettings.java b/src/com/android/settings/security/SecuritySettings.java
index a68dc4d6bb19f9dac3b436fa66c5160b9945d421..bfc1830a76e9655ac68f1569c5fc67a8ab120377 100644
--- a/src/com/android/settings/security/SecuritySettings.java
+++ b/src/com/android/settings/security/SecuritySettings.java
@@ -116,20 +116,21 @@ public class SecuritySettings extends DashboardFragment {
         controllers.add(new TrustAgentListPreferenceController(context, host, lifecycle));
 
         final List<AbstractPreferenceController> securityPreferenceControllers = new ArrayList<>();
         securityPreferenceControllers.add(new FaceStatusPreferenceController(context, lifecycle));
         securityPreferenceControllers.add(new FingerprintStatusPreferenceController(
                 context, lifecycle));
         securityPreferenceControllers.add(new CombinedBiometricStatusPreferenceController(
                 context, lifecycle));
         securityPreferenceControllers.add(new ChangeScreenLockPreferenceController(context, host));
         securityPreferenceControllers.add(new PinScramblePreferenceController(context));
+        securityPreferenceControllers.add(new DenyNewUsbPreferenceController(context));
         controllers.add(new PreferenceCategoryController(context, SECURITY_CATEGORY)
                 .setChildren(securityPreferenceControllers));
         controllers.addAll(securityPreferenceControllers);
 
         final List<AbstractPreferenceController> profileSecurityControllers = new ArrayList<>();
         profileSecurityControllers.add(new ChangeProfileScreenLockPreferenceController(
                 context, host));
         profileSecurityControllers.add(new LockUnificationPreferenceController(context, host));
         profileSecurityControllers.add(new VisiblePatternProfilePreferenceController(
                 context, lifecycle));

commit 0fbbd071e25f87e39e98c23a808ad794b2eafbb9
Author: Renlord <me@renlord.com>
Date:   Tue 2020-09-15 22:40:56-0700

    add keyguard camera toggle setting
    
    Co-authored-by: inthewaves <inthewaves@pm.me>
---
 res/values/strings.xml                             |  2 +
 res/xml/security_dashboard_settings.xml            |  6 ++
 .../KeyguardCameraPreferenceController.java (new)  | 97 ++++++++++++++++++++++
 .../settings/security/SecuritySettings.java        |  1 +
 4 files changed, 106 insertions(+)

diff --git a/res/values/strings.xml b/res/values/strings.xml
index da31acda75532a6f36f1c1aa7fa034f481a2a70c..512c27dfce60a7ac0cb2aaffdc2ae219dc33f62c 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -13640,11 +13640,13 @@
     <string name="bluetooth_connect_access_dialog_content"><xliff:g id="device_name" example="My device">%1$s</xliff:g> wants to connect to this phone.\n\nYou haven\u2019t connected to <xliff:g id="device_name" example="My device">%2$s</xliff:g> before.</string>
     <!-- Strings for Dialog don't connect button -->
     <string name="bluetooth_connect_access_dialog_negative">Don\u2019t connect</string>
     <!-- Strings for Dialog connect button -->
     <string name="bluetooth_connect_access_dialog_positive">Connect</string>
 
     <string name="scramble_pin_title">PIN scrambling</string>
     <string name="scramble_pin_summary">Controls PIN scrambling option when inputting PIN on screen lock.</string>
     <string name="deny_new_usb_title">USB accessories</string>
     <string name="deny_new_usb_summary">Control support for USB peripherals such as input (mice, keyboards, joysticks) and storage devices.</string>
+    <string name="keyguard_camera_title">Screen lock camera access</string>
+    <string name="keyguard_camera_summary">Allow camera access when the device is locked</string>
 </resources>
diff --git a/res/xml/security_dashboard_settings.xml b/res/xml/security_dashboard_settings.xml
index d764180852e4a8dfab337279c1cf61bf518e5a1e..975a04f6377043153fd1b46264a5c391e8d43fcd 100644
--- a/res/xml/security_dashboard_settings.xml
+++ b/res/xml/security_dashboard_settings.xml
@@ -64,20 +64,26 @@
             android:entryValues="@array/deny_new_usb_values" />
 
         <ListPreference
             android:key="scramble_pin_layout"
             android:title="@string/scramble_pin_title"
             android:summary="@string/scramble_pin_summary"
             android:persistent="false"
             android:entries="@array/scramble_pin_entries"
             android:entryValues="@array/scramble_pin_values" />
 
+        <SwitchPreference
+            android:key="keyguard_camera"
+            android:title="@string/keyguard_camera_title"
+            android:summary="@string/keyguard_camera_summary"
+            android:persistent="false" />
+
         <com.android.settingslib.RestrictedPreference
             android:key="biometric_settings"
             android:title="@string/security_settings_biometric_preference_title"
             android:summary="@string/summary_placeholder"
             settings:keywords="@string/keywords_biometric_settings" />
     </PreferenceCategory>
 
     <PreferenceCategory
         android:order="40"
         android:key="security_settings_device_admin_category"
diff --git a/src/com/android/settings/security/KeyguardCameraPreferenceController.java b/src/com/android/settings/security/KeyguardCameraPreferenceController.java
new file mode 100644
index 0000000000000000000000000000000000000000..38606a91dfaa9058a4be5b4c10cd07e6ddebe17c
--- /dev/null
+++ b/src/com/android/settings/security/KeyguardCameraPreferenceController.java
@@ -0,0 +1,97 @@
+/*
+ * Copyright (C) 2020 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License
+ */
+
+package com.android.settings.security;
+
+import android.content.Context;
+
+import android.os.UserHandle;
+import android.os.UserManager;
+import android.os.SystemProperties;
+
+import android.provider.Settings;
+
+import androidx.preference.Preference;
+import androidx.preference.PreferenceCategory;
+import androidx.preference.PreferenceGroup;
+import androidx.preference.PreferenceScreen;
+import androidx.preference.TwoStatePreference;
+import androidx.preference.SwitchPreference;
+
+import com.android.internal.widget.LockPatternUtils;
+import com.android.settings.core.PreferenceControllerMixin;
+import com.android.settingslib.core.AbstractPreferenceController;
+import com.android.settingslib.core.lifecycle.events.OnResume;
+
+public class KeyguardCameraPreferenceController extends AbstractPreferenceController
+        implements PreferenceControllerMixin, OnResume, Preference.OnPreferenceChangeListener {
+
+    private static final String SYS_KEY_KEYGUARD_CAMERA = "persist.keyguard.camera";
+    private static final String PREF_KEY_KEYGUARD_CAMERA = "keyguard_camera";
+    private static final String PREF_KEY_SECURITY_CATEGORY = "security_category";
+
+    private PreferenceCategory mSecurityCategory;
+    private SwitchPreference mKeyguardCamera;
+
+    public KeyguardCameraPreferenceController(Context context) {
+        super(context);
+    }
+
+    @Override
+    public void displayPreference(PreferenceScreen screen) {
+        super.displayPreference(screen);
+        mSecurityCategory = screen.findPreference(PREF_KEY_SECURITY_CATEGORY);
+        updatePreferenceState();
+    }
+
+    @Override
+    public boolean isAvailable() {
+        return true;
+    }
+
+    @Override
+    public String getPreferenceKey() {
+        return PREF_KEY_KEYGUARD_CAMERA;
+    }
+
+    // TODO: should we use onCreatePreferences() instead?
+    private void updatePreferenceState() {
+        if (mSecurityCategory == null) {
+            return;
+        }
+        mKeyguardCamera = (SwitchPreference) mSecurityCategory.findPreference(PREF_KEY_KEYGUARD_CAMERA);
+        mKeyguardCamera.setChecked(SystemProperties.getBoolean(SYS_KEY_KEYGUARD_CAMERA, true));
+    }
+
+    @Override
+    public void onResume() {
+        updatePreferenceState();
+        if (mKeyguardCamera != null) {
+            boolean mode = mKeyguardCamera.isChecked();
+            SystemProperties.set(SYS_KEY_KEYGUARD_CAMERA, Boolean.toString(mode));
+        }
+    }
+
+    @Override
+    public boolean onPreferenceChange(Preference preference, Object value) {
+        final String key = preference.getKey();
+        if (PREF_KEY_KEYGUARD_CAMERA.equals(key)) {
+            final boolean mode = !mKeyguardCamera.isChecked();
+            SystemProperties.set(SYS_KEY_KEYGUARD_CAMERA, Boolean.toString(mode));
+        }
+        return true;
+    }
+}
diff --git a/src/com/android/settings/security/SecuritySettings.java b/src/com/android/settings/security/SecuritySettings.java
index bfc1830a76e9655ac68f1569c5fc67a8ab120377..8944f6055c840942c98d7a37f148b62a879d318c 100644
--- a/src/com/android/settings/security/SecuritySettings.java
+++ b/src/com/android/settings/security/SecuritySettings.java
@@ -117,20 +117,21 @@ public class SecuritySettings extends DashboardFragment {
 
         final List<AbstractPreferenceController> securityPreferenceControllers = new ArrayList<>();
         securityPreferenceControllers.add(new FaceStatusPreferenceController(context, lifecycle));
         securityPreferenceControllers.add(new FingerprintStatusPreferenceController(
                 context, lifecycle));
         securityPreferenceControllers.add(new CombinedBiometricStatusPreferenceController(
                 context, lifecycle));
         securityPreferenceControllers.add(new ChangeScreenLockPreferenceController(context, host));
         securityPreferenceControllers.add(new PinScramblePreferenceController(context));
         securityPreferenceControllers.add(new DenyNewUsbPreferenceController(context));
+        securityPreferenceControllers.add(new KeyguardCameraPreferenceController(context));
         controllers.add(new PreferenceCategoryController(context, SECURITY_CATEGORY)
                 .setChildren(securityPreferenceControllers));
         controllers.addAll(securityPreferenceControllers);
 
         final List<AbstractPreferenceController> profileSecurityControllers = new ArrayList<>();
         profileSecurityControllers.add(new ChangeProfileScreenLockPreferenceController(
                 context, host));
         profileSecurityControllers.add(new LockUnificationPreferenceController(context, host));
         profileSecurityControllers.add(new VisiblePatternProfilePreferenceController(
                 context, lifecycle));

commit a7ed5c209c1db4c99a7c4201975138a380a1fcbb
Author: flawedworld <38294951+flawedworld@users.noreply.github.com>
Date:   Tue 2021-04-06 01:15:32+0100

    add native debugging setting
---
 res/values/strings.xml                             |   2 +
 res/xml/security_dashboard_settings.xml            |   6 ++
 .../NativeDebugPreferenceController.java (new)     | 106 +++++++++++++++++++++
 .../settings/security/SecuritySettings.java        |   1 +
 4 files changed, 115 insertions(+)

diff --git a/res/values/strings.xml b/res/values/strings.xml
index 512c27dfce60a7ac0cb2aaffdc2ae219dc33f62c..c51c7e61beda9b75b9f38c8f448ed6edfce4d427 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -13642,11 +13642,13 @@
     <string name="bluetooth_connect_access_dialog_negative">Don\u2019t connect</string>
     <!-- Strings for Dialog connect button -->
     <string name="bluetooth_connect_access_dialog_positive">Connect</string>
 
     <string name="scramble_pin_title">PIN scrambling</string>
     <string name="scramble_pin_summary">Controls PIN scrambling option when inputting PIN on screen lock.</string>
     <string name="deny_new_usb_title">USB accessories</string>
     <string name="deny_new_usb_summary">Control support for USB peripherals such as input (mice, keyboards, joysticks) and storage devices.</string>
     <string name="keyguard_camera_title">Screen lock camera access</string>
     <string name="keyguard_camera_summary">Allow camera access when the device is locked</string>
+    <string name="native_debug_title">Enable native code debugging</string>
+    <string name="native_debug_summary">Generate useful logs / bug reports from crashes and permit debugging native code.</string>
 </resources>
diff --git a/res/xml/security_dashboard_settings.xml b/res/xml/security_dashboard_settings.xml
index 975a04f6377043153fd1b46264a5c391e8d43fcd..65f3f2553a97398c14bb857ff6cc2352c6a29137 100644
--- a/res/xml/security_dashboard_settings.xml
+++ b/res/xml/security_dashboard_settings.xml
@@ -56,20 +56,26 @@
             settings:keywords="@string/keywords_face_settings" />
         
         <ListPreference
             android:key="deny_new_usb"
             android:title="@string/deny_new_usb_title"
             android:summary="@string/deny_new_usb_summary"
             android:persistent="false"
             android:entries="@array/deny_new_usb_entries"
             android:entryValues="@array/deny_new_usb_values" />
 
+        <SwitchPreference
+            android:key="native_debug"
+            android:title="@string/native_debug_title"
+            android:summary="@string/native_debug_summary"
+            android:persistent="false" />
+
         <ListPreference
             android:key="scramble_pin_layout"
             android:title="@string/scramble_pin_title"
             android:summary="@string/scramble_pin_summary"
             android:persistent="false"
             android:entries="@array/scramble_pin_entries"
             android:entryValues="@array/scramble_pin_values" />
 
         <SwitchPreference
             android:key="keyguard_camera"
diff --git a/src/com/android/settings/security/NativeDebugPreferenceController.java b/src/com/android/settings/security/NativeDebugPreferenceController.java
new file mode 100644
index 0000000000000000000000000000000000000000..9271e6e21cf320cf31877fef8991305532a76316
--- /dev/null
+++ b/src/com/android/settings/security/NativeDebugPreferenceController.java
@@ -0,0 +1,106 @@
+/*
+ * Copyright (C) 2020 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License
+ */
+
+package com.android.settings.security;
+
+import android.content.Context;
+
+import android.os.UserHandle;
+import android.os.UserManager;
+import android.os.SystemProperties;
+
+import android.provider.Settings;
+
+import androidx.preference.Preference;
+import androidx.preference.PreferenceCategory;
+import androidx.preference.PreferenceGroup;
+import androidx.preference.PreferenceScreen;
+import androidx.preference.TwoStatePreference;
+import androidx.preference.SwitchPreference;
+
+import com.android.internal.widget.LockPatternUtils;
+import com.android.settings.core.PreferenceControllerMixin;
+import com.android.settingslib.core.AbstractPreferenceController;
+import com.android.settingslib.core.lifecycle.events.OnResume;
+
+public class NativeDebugPreferenceController extends AbstractPreferenceController
+        implements PreferenceControllerMixin, OnResume, Preference.OnPreferenceChangeListener {
+
+    private static final String SYS_KEY_NATIVE_DEBUG = "persist.native_debug";
+    private static final String PREF_KEY_NATIVE_DEBUG = "native_debug";
+    private static final String PREF_KEY_SECURITY_CATEGORY = "security_category";
+
+    private PreferenceCategory mSecurityCategory;
+    private SwitchPreference mNativeDebug;
+    private boolean mIsAdmin;
+    private UserManager mUm;
+
+    public NativeDebugPreferenceController(Context context) {
+        super(context);
+        mUm = UserManager.get(context);
+    }
+
+    @Override
+    public void displayPreference(PreferenceScreen screen) {
+        super.displayPreference(screen);
+        mSecurityCategory = screen.findPreference(PREF_KEY_SECURITY_CATEGORY);
+        updatePreferenceState();
+    }
+
+    @Override
+    public boolean isAvailable() {
+        mIsAdmin = mUm.isAdminUser();
+        return mIsAdmin;
+    }
+
+    @Override
+    public String getPreferenceKey() {
+        return PREF_KEY_NATIVE_DEBUG;
+    }
+
+    // TODO: should we use onCreatePreferences() instead?
+    private void updatePreferenceState() {
+        if (mSecurityCategory == null) {
+            return;
+        }
+
+        if (mIsAdmin) {
+            mNativeDebug = (SwitchPreference) mSecurityCategory.findPreference(PREF_KEY_NATIVE_DEBUG);
+            mNativeDebug.setChecked(SystemProperties.getBoolean(SYS_KEY_NATIVE_DEBUG, true));
+        } else {
+            mSecurityCategory.removePreference(mSecurityCategory.findPreference(PREF_KEY_NATIVE_DEBUG));
+        }
+    }
+
+    @Override
+    public void onResume() {
+        updatePreferenceState();
+        if (mNativeDebug != null) {
+                boolean mode = mNativeDebug.isChecked();
+                SystemProperties.set(SYS_KEY_NATIVE_DEBUG, Boolean.toString(mode));
+        }
+    }
+
+    @Override
+    public boolean onPreferenceChange(Preference preference, Object value) {
+        final String key = preference.getKey();
+        if (PREF_KEY_NATIVE_DEBUG.equals(key)) {
+            final boolean mode = !mNativeDebug.isChecked();
+            SystemProperties.set(SYS_KEY_NATIVE_DEBUG, Boolean.toString(mode));
+        }
+        return true;
+    }
+}
diff --git a/src/com/android/settings/security/SecuritySettings.java b/src/com/android/settings/security/SecuritySettings.java
index 8944f6055c840942c98d7a37f148b62a879d318c..7db358f63d02ef0346cbc01fe991d333e67a9542 100644
--- a/src/com/android/settings/security/SecuritySettings.java
+++ b/src/com/android/settings/security/SecuritySettings.java
@@ -118,20 +118,21 @@ public class SecuritySettings extends DashboardFragment {
         final List<AbstractPreferenceController> securityPreferenceControllers = new ArrayList<>();
         securityPreferenceControllers.add(new FaceStatusPreferenceController(context, lifecycle));
         securityPreferenceControllers.add(new FingerprintStatusPreferenceController(
                 context, lifecycle));
         securityPreferenceControllers.add(new CombinedBiometricStatusPreferenceController(
                 context, lifecycle));
         securityPreferenceControllers.add(new ChangeScreenLockPreferenceController(context, host));
         securityPreferenceControllers.add(new PinScramblePreferenceController(context));
         securityPreferenceControllers.add(new DenyNewUsbPreferenceController(context));
         securityPreferenceControllers.add(new KeyguardCameraPreferenceController(context));
+        securityPreferenceControllers.add(new NativeDebugPreferenceController(context));
         controllers.add(new PreferenceCategoryController(context, SECURITY_CATEGORY)
                 .setChildren(securityPreferenceControllers));
         controllers.addAll(securityPreferenceControllers);
 
         final List<AbstractPreferenceController> profileSecurityControllers = new ArrayList<>();
         profileSecurityControllers.add(new ChangeProfileScreenLockPreferenceController(
                 context, host));
         profileSecurityControllers.add(new LockUnificationPreferenceController(context, host));
         profileSecurityControllers.add(new VisiblePatternProfilePreferenceController(
                 context, lifecycle));

commit 7210cd1742a28d91106c47f8c9cfe58eeffda37d
Author: flawedworld <38294951+flawedworld@users.noreply.github.com>
Date:   Tue 2021-04-06 01:13:36+0100

    add device info field with bootloader version
---
 res/values/strings.xml                             |  2 ++
 res/xml/firmware_version.xml                       |  9 +++++++
 ...ootloaderVersionPreferenceController.java (new) | 28 ++++++++++++++++++++++
 3 files changed, 39 insertions(+)

diff --git a/res/values/strings.xml b/res/values/strings.xml
index c51c7e61beda9b75b9f38c8f448ed6edfce4d427..bd499a71c306d2e9c622c726effc8fb73fa92f20 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -3348,20 +3348,22 @@
     <string name="model_info">Model</string>
     <!-- About phone screen, dialog title for showing hardware information such as model, serial number, etc.[CHAR LIMIT=60] -->
     <string name="hardware_info">Model &amp; hardware</string>
     <!-- Label for device's hardware revision value [CHAR LIMIT=40] -->
     <string name="hardware_revision">Hardware version</string>
     <!-- About phone screen, fcc equipment id label  [CHAR LIMIT=40] -->
     <string name="fcc_equipment_id">Equipment ID</string>
     <!-- About phone screen,  setting option name  [CHAR LIMIT=40] -->
     <string name="baseband_version">Baseband version</string>
     <!-- About phone screen,  setting option name  [CHAR LIMIT=40] -->
+    <string name="bootloader_version">Bootloader version</string>
+    <!-- About phone screen,  setting option name  [CHAR LIMIT=40] -->
     <string name="kernel_version">Kernel version</string>
     <!-- About phone screen,  setting option name  [CHAR LIMIT=40] -->
     <string name="build_number">Build number</string>
     <!-- About phone screen, tapping this button will take user to a seperate UI to check Google Play system update [CHAR LIMIT=60] -->
     <string name="module_version">Google Play system update</string>
 
     <!-- About phone screen, show when a value of some status item is unavailable. -->
     <string name="device_info_not_available">Not available</string>
     <!-- About phone screen, phone status screen title -->
     <string name="device_status_activity_title">Status</string>
diff --git a/res/xml/firmware_version.xml b/res/xml/firmware_version.xml
index edc910b36cfd1c5254bff5d04dd2b40ac4b59bb4..cf9779a69882c4e9fda82a10dc1295a808fa0595 100644
--- a/res/xml/firmware_version.xml
+++ b/res/xml/firmware_version.xml
@@ -39,20 +39,29 @@
 
     <!-- Baseband -->
     <Preference
         android:key="base_band"
         android:title="@string/baseband_version"
         android:summary="@string/summary_placeholder"
         android:selectable="false"
         settings:enableCopying="true"
         settings:controller="com.android.settings.deviceinfo.firmwareversion.BasebandVersionPreferenceController"/>
 
+    <!-- Bootloader -->
+    <Preference
+        android:key="boot_loader"
+        android:title="@string/bootloader_version"
+        android:summary="@string/summary_placeholder"
+        android:selectable="false"
+        settings:enableCopying="true"
+        settings:controller="com.android.settings.deviceinfo.firmwareversion.BootloaderVersionPreferenceController"/>
+
     <!-- Kernel -->
     <Preference
         android:key="kernel_version"
         android:title="@string/kernel_version"
         android:summary="@string/summary_placeholder"
         android:selectable="false"
         settings:enableCopying="true"
         settings:controller="com.android.settings.deviceinfo.firmwareversion.KernelVersionPreferenceController"/>
 
     <!-- Build -->
diff --git a/src/com/android/settings/deviceinfo/firmwareversion/BootloaderVersionPreferenceController.java b/src/com/android/settings/deviceinfo/firmwareversion/BootloaderVersionPreferenceController.java
new file mode 100644
index 0000000000000000000000000000000000000000..32b1cb64de05bb3414088028c0d48d1ebd88d84d
--- /dev/null
+++ b/src/com/android/settings/deviceinfo/firmwareversion/BootloaderVersionPreferenceController.java
@@ -0,0 +1,28 @@
+package com.android.settings.deviceinfo.firmwareversion;
+
+import android.content.Context;
+import android.os.SystemProperties;
+
+import com.android.settings.R;
+import com.android.settings.Utils;
+import com.android.settings.core.BasePreferenceController;
+
+public class BootloaderVersionPreferenceController extends BasePreferenceController {
+
+    static final String BOOTLOADER_PROPERTY = "ro.bootloader";
+
+    public BootloaderVersionPreferenceController(Context context, String preferenceKey) {
+        super(context, preferenceKey);
+    }
+
+    @Override
+    public int getAvailabilityStatus() {
+        return AVAILABLE;
+    }
+
+    @Override
+    public CharSequence getSummary() {
+        return SystemProperties.get(BOOTLOADER_PROPERTY,
+                mContext.getString(R.string.device_info_default));
+    }
+}

commit 6ac7067776a56fc4e23b206498600288cce4cfdc
Author: pratyush <codelab@pratyush.dev>
Date:   Mon 2021-06-07 22:15:59+0100

    add auto-reboot setting
---
 res/values/arrays.xml                              | 31 ++++++++
 res/values/strings.xml                             |  2 +
 res/xml/security_dashboard_settings.xml            |  8 +++
 .../AutoRebootPreferenceController.java (new)      | 82 ++++++++++++++++++++++
 .../settings/security/SecuritySettings.java        |  1 +
 5 files changed, 124 insertions(+)

diff --git a/res/values/arrays.xml b/res/values/arrays.xml
index 1dbb5c0c79496381513ff6f6b4b7e23aa10140e7..37d9fc401e3290dc100796a69cdc34448c6fe937 100644
--- a/res/values/arrays.xml
+++ b/res/values/arrays.xml
@@ -127,20 +127,51 @@
     <string-array name="scramble_pin_entries">
         <item>Scramble PIN</item>
         <item>No PIN scrambling</item>
     </string-array>
 
     <string-array name="scramble_pin_values" translatable="false">
         <item>true</item>
         <item>false</item>
     </string-array>
 
+    <!-- Auto reboot settings -->
+    <string-array name="auto_reboot_entries">
+        <item>Off</item>
+        <item>10 minutes</item>
+        <item>30 minutes</item>
+        <item>1 hour</item>
+        <item>2 hours</item>
+        <item>4 hours</item>
+        <item>8 hours</item>
+        <item>12 hours</item>
+        <item>24 hours</item>
+        <item>36 hours</item>
+        <item>48 hours</item>
+        <item>72 hours</item>
+    </string-array>
+
+    <string-array name="auto_reboot_values" translatable="false">
+        <item>0</item>  <!-- Disabled -->
+        <item>600000</item>
+        <item>1800000</item>
+        <item>3600000</item>
+        <item>7200000</item>
+        <item>14400000</item>
+        <item>28800000</item>
+        <item>43200000</item>
+        <item>86400000</item>
+        <item>129600000</item>
+        <item>172800000</item>
+        <item>259200000</item>
+    </string-array>
+
     <string-array name="deny_new_usb_entries">
         <item>Deny new USB peripherals</item>
         <item>Allow new USB peripherals when unlocked</item>
         <item>Allow new USB peripherals</item>
     </string-array>
 
     <!-- Do not translate. -->
     <string-array name="deny_new_usb_values" translatable="false">
         <!-- Do not translate. -->
         <item>enabled</item>
diff --git a/res/values/strings.xml b/res/values/strings.xml
index bd499a71c306d2e9c622c726effc8fb73fa92f20..857ab5bcb9a578cdbb35cf84611132be3a624218 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -13641,16 +13641,18 @@
     <!-- Bluetooth connect permission alert for dialog content [CHAR LIMIT=none] -->
     <string name="bluetooth_connect_access_dialog_content"><xliff:g id="device_name" example="My device">%1$s</xliff:g> wants to connect to this phone.\n\nYou haven\u2019t connected to <xliff:g id="device_name" example="My device">%2$s</xliff:g> before.</string>
     <!-- Strings for Dialog don't connect button -->
     <string name="bluetooth_connect_access_dialog_negative">Don\u2019t connect</string>
     <!-- Strings for Dialog connect button -->
     <string name="bluetooth_connect_access_dialog_positive">Connect</string>
 
     <string name="scramble_pin_title">PIN scrambling</string>
     <string name="scramble_pin_summary">Controls PIN scrambling option when inputting PIN on screen lock.</string>
     <string name="deny_new_usb_title">USB accessories</string>
+    <string name="auto_reboot_title">Auto reboot</string>
+    <string name="auto_reboot_summary">Automatically reboot the device, if the phone hasn\'t been unlocked within the selected number of hours.</string>
     <string name="deny_new_usb_summary">Control support for USB peripherals such as input (mice, keyboards, joysticks) and storage devices.</string>
     <string name="keyguard_camera_title">Screen lock camera access</string>
     <string name="keyguard_camera_summary">Allow camera access when the device is locked</string>
     <string name="native_debug_title">Enable native code debugging</string>
     <string name="native_debug_summary">Generate useful logs / bug reports from crashes and permit debugging native code.</string>
 </resources>
diff --git a/res/xml/security_dashboard_settings.xml b/res/xml/security_dashboard_settings.xml
index 65f3f2553a97398c14bb857ff6cc2352c6a29137..bfe2b153ed9fe0fedf8881cf65074217b9b81c93 100644
--- a/res/xml/security_dashboard_settings.xml
+++ b/res/xml/security_dashboard_settings.xml
@@ -48,20 +48,28 @@
             android:title="@string/security_settings_fingerprint_preference_title"
             android:summary="@string/summary_placeholder"
             settings:keywords="@string/keywords_fingerprint_settings" />
 
         <com.android.settingslib.RestrictedPreference
             android:key="face_settings"
             android:title="@string/security_settings_face_preference_title"
             android:summary="@string/summary_placeholder"
             settings:keywords="@string/keywords_face_settings" />
         
+        <ListPreference
+            android:key="auto_reboot"
+            android:title="@string/auto_reboot_title"
+            android:summary="@string/auto_reboot_summary"
+            android:persistent="false"
+            android:entries="@array/auto_reboot_entries"
+            android:entryValues="@array/auto_reboot_values" />
+
         <ListPreference
             android:key="deny_new_usb"
             android:title="@string/deny_new_usb_title"
             android:summary="@string/deny_new_usb_summary"
             android:persistent="false"
             android:entries="@array/deny_new_usb_entries"
             android:entryValues="@array/deny_new_usb_values" />
 
         <SwitchPreference
             android:key="native_debug"
diff --git a/src/com/android/settings/security/AutoRebootPreferenceController.java b/src/com/android/settings/security/AutoRebootPreferenceController.java
new file mode 100644
index 0000000000000000000000000000000000000000..c7a75219a5e7c65e29bfa8ab479b0fd6836f4041
--- /dev/null
+++ b/src/com/android/settings/security/AutoRebootPreferenceController.java
@@ -0,0 +1,82 @@
+package com.android.settings.security;
+
+import android.content.Context;
+import android.os.UserManager;
+import android.provider.Settings;
+import android.util.Log;
+
+import androidx.preference.ListPreference;
+import androidx.preference.Preference;
+import androidx.preference.PreferenceCategory;
+import androidx.preference.PreferenceScreen;
+
+import com.android.settings.core.PreferenceControllerMixin;
+import com.android.settingslib.core.AbstractPreferenceController;
+import com.android.settingslib.core.lifecycle.events.OnResume;
+
+public class AutoRebootPreferenceController extends AbstractPreferenceController
+    implements PreferenceControllerMixin, OnResume,
+           Preference.OnPreferenceChangeListener {
+
+    private static final String KEY_AUTO_REBOOT = "auto_reboot";
+    private static final String PREF_KEY_SECURITY_CATEGORY = "security_category";
+
+    private PreferenceCategory mSecurityCategory;
+    private boolean mIsAdmin;
+    private final UserManager mUm;
+
+    public AutoRebootPreferenceController(Context context) {
+        super(context);
+        mUm = UserManager.get(context);
+    }
+
+    @Override
+    public void displayPreference(PreferenceScreen screen) {
+        super.displayPreference(screen);
+        mSecurityCategory = screen.findPreference(PREF_KEY_SECURITY_CATEGORY);
+        updatePreferenceState();
+    }
+
+    @Override
+    public boolean isAvailable() {
+        mIsAdmin = mUm.isAdminUser();
+        return mIsAdmin;
+    }
+
+    @Override
+    public String getPreferenceKey() {
+        return KEY_AUTO_REBOOT;
+    }
+
+    // TODO: should we use onCreatePreferences() instead?
+    private void updatePreferenceState() {
+        if (mSecurityCategory == null) {
+            return;
+        }
+
+        if (mIsAdmin) {
+            ListPreference autoReboot =
+                    (ListPreference) mSecurityCategory.findPreference(KEY_AUTO_REBOOT);
+            autoReboot.setValue(Long.toString(Settings.Global.getLong(
+                    mContext.getContentResolver(), Settings.Global.SETTINGS_REBOOT_AFTER_TIMEOUT, 0)));
+        } else {
+            mSecurityCategory.removePreference(
+                    mSecurityCategory.findPreference(KEY_AUTO_REBOOT));
+        }
+    }
+
+    @Override
+    public void onResume() {
+        updatePreferenceState();
+    }
+
+    @Override
+    public boolean onPreferenceChange(Preference preference, Object value) {
+        final String key = preference.getKey();
+        if (KEY_AUTO_REBOOT.equals(key) && mIsAdmin) {
+            long timeout = Long.parseLong((String) value);
+            Settings.Global.putLong(mContext.getContentResolver(), Settings.Global.SETTINGS_REBOOT_AFTER_TIMEOUT, timeout);
+        }
+        return true;
+    }
+}
diff --git a/src/com/android/settings/security/SecuritySettings.java b/src/com/android/settings/security/SecuritySettings.java
index 7db358f63d02ef0346cbc01fe991d333e67a9542..24fc7c62b18267ec4a57707c262b0a0fc42ebf54 100644
--- a/src/com/android/settings/security/SecuritySettings.java
+++ b/src/com/android/settings/security/SecuritySettings.java
@@ -116,20 +116,21 @@ public class SecuritySettings extends DashboardFragment {
         controllers.add(new TrustAgentListPreferenceController(context, host, lifecycle));
 
         final List<AbstractPreferenceController> securityPreferenceControllers = new ArrayList<>();
         securityPreferenceControllers.add(new FaceStatusPreferenceController(context, lifecycle));
         securityPreferenceControllers.add(new FingerprintStatusPreferenceController(
                 context, lifecycle));
         securityPreferenceControllers.add(new CombinedBiometricStatusPreferenceController(
                 context, lifecycle));
         securityPreferenceControllers.add(new ChangeScreenLockPreferenceController(context, host));
         securityPreferenceControllers.add(new PinScramblePreferenceController(context));
+        securityPreferenceControllers.add(new AutoRebootPreferenceController(context));
         securityPreferenceControllers.add(new DenyNewUsbPreferenceController(context));
         securityPreferenceControllers.add(new KeyguardCameraPreferenceController(context));
         securityPreferenceControllers.add(new NativeDebugPreferenceController(context));
         controllers.add(new PreferenceCategoryController(context, SECURITY_CATEGORY)
                 .setChildren(securityPreferenceControllers));
         controllers.addAll(securityPreferenceControllers);
 
         final List<AbstractPreferenceController> profileSecurityControllers = new ArrayList<>();
         profileSecurityControllers.add(new ChangeProfileScreenLockPreferenceController(
                 context, host));

commit a28e798849cc3b469015f9caa92f50c69bcc91e2
Author: Oliver Scott <olivercscott@gmail.com>
Date:   Fri 2020-10-02 12:37:30-0400

    add bluetooth auto-turn-off setting
---
 res/values/arrays.xml                              |  44 ++++++++
 res/values/strings.xml                             |  19 ++++
 res/xml/connected_devices.xml                      |   8 ++
 ...BluetoothTimeoutPreferenceController.java (new) | 115 +++++++++++++++++++++
 4 files changed, 186 insertions(+)

diff --git a/res/values/arrays.xml b/res/values/arrays.xml
index 37d9fc401e3290dc100796a69cdc34448c6fe937..e6cee16611b0513804cb564ca6671af88517da5e 100644
--- a/res/values/arrays.xml
+++ b/res/values/arrays.xml
@@ -32,20 +32,64 @@
         <!-- The next level of the time zoner picker should show time zones from Asia. -->
         <item>Asia</item>
         <!-- The next level of the time zoner picker should show time zones from Australia. -->
         <item>Australia</item>
         <!-- The next level of the time zoner picker should show time zones from Pacific. -->
         <item>Pacific</item>
         <!-- The next level of the time zoner picker should show time zones from ALL regions. -->
         <item>All</item>
     </string-array>
 
+    <!-- Bluetooth settings.  The delay in inactivity before bluetooth is turned off. These are shown in a list dialog. -->
+    <string-array name="bluetooth_timeout_entries">
+        <item>@string/bluetooth_timeout_summary_never</item>
+        <item>@string/bluetooth_timeout_summary_15secs</item>
+        <item>@string/bluetooth_timeout_summary_30secs</item>
+        <item>@string/bluetooth_timeout_summary_1min</item>
+        <item>@string/bluetooth_timeout_summary_2mins</item>
+        <item>@string/bluetooth_timeout_summary_5mins</item>
+        <item>@string/bluetooth_timeout_summary_10mins</item>
+        <item>@string/bluetooth_timeout_summary_30mins</item>
+        <item>@string/bluetooth_timeout_summary_1hour</item>
+        <item>@string/bluetooth_timeout_summary_2hours</item>
+        <item>@string/bluetooth_timeout_summary_4hours</item>
+        <item>@string/bluetooth_timeout_summary_8hours</item>
+    </string-array>
+
+    <!-- Do not translate. -->
+    <string-array name="bluetooth_timeout_values" translatable="false">
+        <!-- Do not translate. -->
+        <item>0</item>
+        <!-- Do not translate. -->
+        <item>15000</item>
+        <!-- Do not translate. -->
+        <item>30000</item>
+        <!-- Do not translate. -->
+        <item>60000</item>
+        <!-- Do not translate. -->
+        <item>120000</item>
+        <!-- Do not translate. -->
+        <item>300000</item>
+        <!-- Do not translate. -->
+        <item>600000</item>
+        <!-- Do not translate. -->
+        <item>1800000</item>
+        <!-- Do not translate. -->
+        <item>3600000</item>
+        <!-- Do not translate. -->
+        <item>7200000</item>
+        <!-- Do not translate. -->
+        <item>14400000</item>
+        <!-- Do not translate. -->
+        <item>28800000</item>
+    </string-array>
+
     <!-- Display settings.  The delay in inactivity before the screen is turned off. These are shown in a list dialog. -->
     <string-array name="screen_timeout_entries">
         <item>15 seconds</item>
         <item>30 seconds</item>
         <item>1 minute</item>
         <item>2 minutes</item>
         <item>5 minutes</item>
         <item>10 minutes</item>
         <item>30 minutes</item>
     </string-array>
diff --git a/res/values/strings.xml b/res/values/strings.xml
index 857ab5bcb9a578cdbb35cf84611132be3a624218..4d52523bc9a6c3940cf07c19c1dbe36500f1963f 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -20,20 +20,39 @@
     <string name="no">"No"</string>
     <!-- Strings for Dialog create button -->
     <string name="create">Create</string>
     <!-- Strings for Dialog allow button -->
     <string name="allow">Allow</string>
     <!-- Strings for Dialog deny button -->
     <string name="deny">Deny</string>
     <!-- Used in confirmation dialogs as the action that the user will tap to turn on the feature. [CHAR LIMIT=40]-->
     <string name="confirmation_turn_on">Turn on</string>
 
+    <!-- Connected devices screen, setting option name to change bluetooth timeout -->
+    <string name="bluetooth_timeout">Bluetooth timeout</string>
+
+    <!-- Connected devices screen, setting option summary to change bluetooth timeout -->
+    <string name="bluetooth_timeout_summary">Bluetooth will turn off after <xliff:g id="timeout_description">%1$s</xliff:g> if no devices connected</string>
+    <string name="bluetooth_timeout_summary2">Do not automatically turn off Bluetooth</string>
+    <string name="bluetooth_timeout_summary_never">Never</string>
+    <string name="bluetooth_timeout_summary_15secs">15 seconds</string>
+    <string name="bluetooth_timeout_summary_30secs">30 seconds</string>
+    <string name="bluetooth_timeout_summary_1min">1 minute</string>
+    <string name="bluetooth_timeout_summary_2mins">2 minutes</string>
+    <string name="bluetooth_timeout_summary_5mins">5 minutes</string>
+    <string name="bluetooth_timeout_summary_10mins">10 minutes</string>
+    <string name="bluetooth_timeout_summary_30mins">30 minutes</string>
+    <string name="bluetooth_timeout_summary_1hour">1 hour</string>
+    <string name="bluetooth_timeout_summary_2hours">2 hours</string>
+    <string name="bluetooth_timeout_summary_4hours">4 hours</string>
+    <string name="bluetooth_timeout_summary_8hours">8 hours</string>
+
     <!-- Device Info screen. Used for a status item's value when the proper value is not known -->
     <string name="device_info_default">Unknown</string>
     <!-- [CHAR LIMIT=NONE] Device Info screen. Countdown for user taps to enable development settings -->
     <plurals name="show_dev_countdown">
         <item quantity="one">You are now <xliff:g id="step_count">%1$d</xliff:g> step away from being a developer.</item>
         <item quantity="other">You are now <xliff:g id="step_count">%1$d</xliff:g> steps away from being a developer.</item>
     </plurals>
     <!-- [CHAR LIMIT=NONE] Device Info screen. Confirmation that developer settings are enabled -->
     <string name="show_dev_on">You are now a developer!</string>
     <!-- [CHAR LIMIT=NONE] Device Info screen. Okay we get it, stop pressing, you already have it on -->
diff --git a/res/xml/connected_devices.xml b/res/xml/connected_devices.xml
index 8e606484b7a605d79d91e9522f5b55795070fed2..48ecc59d6b7f55cb45d4fc74a463d1277bd45a09 100644
--- a/res/xml/connected_devices.xml
+++ b/res/xml/connected_devices.xml
@@ -40,20 +40,28 @@
         android:key="add_bt_devices"
         android:title="@string/bluetooth_pairing_pref_title"
         android:icon="@drawable/ic_add_24dp"
         android:summary="@string/connected_device_add_device_summary"
         android:fragment="com.android.settings.bluetooth.BluetoothPairingDetail"
         settings:keywords="@string/keywords_add_bt_device"
         settings:userRestriction="no_config_bluetooth"
         settings:useAdminDisabledSummary="true"
         settings:controller="com.android.settings.connecteddevice.AddDevicePreferenceController"/>
 
+    <androidx.preference.ListPreference
+        android:key="bluetooth_timeout"
+        android:title="@string/bluetooth_timeout"
+        android:summary="@string/summary_placeholder"
+        android:entries="@array/bluetooth_timeout_entries"
+        android:entryValues="@array/bluetooth_timeout_values"
+        settings:controller="com.android.settings.bluetooth.BluetoothTimeoutPreferenceController"/>
+
     <PreferenceCategory
         android:key="previously_connected_devices"
         android:title="@string/connected_device_previously_connected_title"
         settings:controller="com.android.settings.connecteddevice.PreviouslyConnectedDevicePreferenceController">
 
         <Preference
             android:key="previously_connected_devices_see_all"
             android:title="@string/previous_connected_see_all"
             android:icon="@drawable/ic_chevron_right_24dp"
             android:order="10"
diff --git a/src/com/android/settings/bluetooth/BluetoothTimeoutPreferenceController.java b/src/com/android/settings/bluetooth/BluetoothTimeoutPreferenceController.java
new file mode 100644
index 0000000000000000000000000000000000000000..244147948aa50873a9cb372b7566ce79d6f259fc
--- /dev/null
+++ b/src/com/android/settings/bluetooth/BluetoothTimeoutPreferenceController.java
@@ -0,0 +1,115 @@
+/*
+ * Copyright (C) 2020 The Calyx Institute
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.bluetooth;
+
+import android.bluetooth.BluetoothAdapter;
+import android.content.Context;
+import android.provider.Settings;
+import android.util.Log;
+
+import androidx.preference.ListPreference;
+import androidx.preference.Preference;
+
+import com.android.settings.R;
+import com.android.settings.core.BasePreferenceController;
+import com.android.settings.core.PreferenceControllerMixin;
+
+public class BluetoothTimeoutPreferenceController extends BasePreferenceController implements
+        PreferenceControllerMixin, Preference.OnPreferenceChangeListener {
+    private static final String TAG = "BluetoothTimeoutPrefCtrl";
+
+    public static final int FALLBACK_BLUETOOTH_TIMEOUT_VALUE = 0;
+
+    private final String mBluetoothTimeoutKey;
+
+    protected BluetoothAdapter mBluetoothAdapter;
+
+    public BluetoothTimeoutPreferenceController(Context context, String key) {
+        super(context, key);
+        mBluetoothTimeoutKey = key;
+
+        mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
+        if (mBluetoothAdapter == null) {
+            Log.e(TAG, "Bluetooth is not supported on this device");
+            return;
+        }
+    }
+
+    @Override
+    public int getAvailabilityStatus() {
+        return mBluetoothAdapter != null ? AVAILABLE : UNSUPPORTED_ON_DEVICE;
+    }
+
+    @Override
+    public String getPreferenceKey() {
+        return mBluetoothTimeoutKey;
+    }
+
+    @Override
+    public void updateState(Preference preference) {
+        final ListPreference timeoutListPreference = (ListPreference) preference;
+        final long currentTimeout = Settings.Global.getLong(mContext.getContentResolver(),
+                Settings.Global.BLUETOOTH_OFF_TIMEOUT, FALLBACK_BLUETOOTH_TIMEOUT_VALUE);
+        timeoutListPreference.setValue(String.valueOf(currentTimeout));
+        updateTimeoutPreferenceDescription(timeoutListPreference,
+                Long.parseLong(timeoutListPreference.getValue()));
+    }
+
+    @Override
+    public boolean onPreferenceChange(Preference preference, Object newValue) {
+        try {
+            long value = Long.parseLong((String) newValue);
+            Settings.Global.putLong(mContext.getContentResolver(), Settings.Global.BLUETOOTH_OFF_TIMEOUT, value);
+            updateTimeoutPreferenceDescription((ListPreference) preference, value);
+        } catch (NumberFormatException e) {
+            Log.e(TAG, "could not persist bluetooth timeout setting", e);
+        }
+        return true;
+    }
+
+    public static CharSequence getTimeoutDescription(
+            long currentTimeout, CharSequence[] entries, CharSequence[] values) {
+        if (currentTimeout < 0 || entries == null || values == null
+                || values.length != entries.length) {
+            return null;
+        }
+
+        for (int i = 0; i < values.length; i++) {
+            long timeout = Long.parseLong(values[i].toString());
+            if (currentTimeout == timeout) {
+                return entries[i];
+            }
+        }
+        return null;
+    }
+
+    private void updateTimeoutPreferenceDescription(ListPreference preference,
+                                                    long currentTimeout) {
+        final CharSequence[] entries = preference.getEntries();
+        final CharSequence[] values = preference.getEntryValues();
+        final CharSequence timeoutDescription = getTimeoutDescription(
+                currentTimeout, entries, values);
+        String summary = "";
+        if (timeoutDescription != null) {
+            if (currentTimeout != 0)
+                summary = mContext.getString(R.string.bluetooth_timeout_summary, timeoutDescription);
+            else
+                summary = mContext.getString(R.string.bluetooth_timeout_summary2);
+        }
+        preference.setSummary(summary);
+    }
+}

commit cee09b6ebf0fe7be9d272acee2e5e0781c99ead7
Author: Wonderfall <wonderfall@protonmail.com>
Date:   Mon 2021-07-19 01:31:27+0200

    hide pattern screenlock option
---
 src/com/android/settings/password/ChooseLockGenericController.java | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/src/com/android/settings/password/ChooseLockGenericController.java b/src/com/android/settings/password/ChooseLockGenericController.java
index cd9eb2fd44dc94ee9a5799439a81b761e19ffdeb..48dc2094d5026da3385ff19b95a549f9611cdbd7 100644
--- a/src/com/android/settings/password/ChooseLockGenericController.java
+++ b/src/com/android/settings/password/ChooseLockGenericController.java
@@ -168,22 +168,23 @@ public class ChooseLockGenericController {
             case NONE:
                 return !mHideInsecureScreenLockTypes
                     && !mContext.getResources().getBoolean(R.bool.config_hide_none_security_option)
                     && !managedProfile; // Profiles should use unified challenge instead.
             case SWIPE:
                 return !mHideInsecureScreenLockTypes
                     && !mContext.getResources().getBoolean(R.bool.config_hide_swipe_security_option)
                     && !managedProfile; // Swipe doesn't make sense for profiles.
             case MANAGED:
                 return mManagedPasswordProvider.isManagedPasswordChoosable();
-            case PIN:
             case PATTERN:
+                return false;
+            case PIN:
             case PASSWORD:
                 // Hide the secure lock screen options if the device doesn't support the secure lock
                 // screen feature.
                 return mLockPatternUtils.hasSecureLockScreen();
         }
         return true;
     }
 
     /**
      * Whether screen lock with {@code type} should be enabled assuming all relevant password

commit 8d37b40c32d0210c50a4130e4e682045c25c115d
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Sun 2021-07-25 14:44:48-0400

    drop support for showing nearby devices from Play
---
 res/values/config.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/res/values/config.xml b/res/values/config.xml
index 5891223ca6fab736917519de80290da864819dfc..1758c639b8d9f6691bfe1b778bbefc7ba14c7e26 100755
--- a/res/values/config.xml
+++ b/res/values/config.xml
@@ -451,21 +451,21 @@
     <!-- Whether wifi_mac_address should be shown or not. -->
     <bool name="config_show_wifi_mac_address">true</bool>
 
     <!-- Whether to disable "Uninstall Updates" menu item for System apps or not. -->
     <bool name="config_disable_uninstall_update">false</bool>
 
     <!-- Whether or not extra preview panels should be used for screen zoom setting. -->
     <bool name="config_enable_extra_screen_zoom_preview">true</bool>
 
     <!-- Slice Uri to query nearby devices. -->
-    <string name="config_nearby_devices_slice_uri" translatable="false">content://com.google.android.gms.nearby.fastpair/device_status_list_item</string>
+    <string name="config_nearby_devices_slice_uri" translatable="false"></string>
 
     <!-- Grayscale settings intent -->
     <string name="config_grayscale_settings_intent" translatable="false"></string>
 
     <!-- List containing the injected tile keys which are suppressed. -->
     <string-array name="config_suppress_injected_tile_keys" translatable="false"/>
 
     <!-- Reset application package name -->
     <string-array name="config_skip_reset_apps_package_name" translatable="false">
         <item>android</item>

commit a7b913f4b963f203945b273c5d2c73268020df01
Author: flawedworld <flawedworld@flawed.world>
Date:   Wed 2021-09-01 20:36:10+0000

    UserManager app installation restrictions
---
 res/values/strings.xml                             |  2 +
 res/xml/user_details_settings.xml                  |  4 ++
 .../settings/users/UserDetailsSettings.java        | 44 +++++++++++++++++++---
 3 files changed, 45 insertions(+), 5 deletions(-)

diff --git a/res/values/strings.xml b/res/values/strings.xml
index 4d52523bc9a6c3940cf07c19c1dbe36500f1963f..e4a6e5ac91eed4fc7abd98eb5118a62e89af357b 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -7708,20 +7708,22 @@
     <string name="user_exit_guest_confirm_title">Remove guest?</string>
     <!-- Message to user to confirm exiting guest. [CHAR LIMIT=none] -->
     <string name="user_exit_guest_confirm_message">All apps and data in this session will be deleted.</string>
     <!-- Label for button in confirmation dialog when exiting guest session [CHAR LIMIT=35] -->
     <string name="user_exit_guest_dialog_remove">Remove</string>
 
     <!-- Title of preference to enable calling[CHAR LIMIT=40] -->
     <string name="user_enable_calling">Turn on phone calls</string>
     <!-- Title of preference to enable calling and SMS [CHAR LIMIT=45] -->
     <string name="user_enable_calling_sms">Turn on phone calls &amp; SMS</string>
+    <!-- Title of preference to disallow installing apps [CHAR LIMIT=45] -->
+    <string name="user_disallow_install_apps">Disallow installing apps</string>
     <!-- Title of preference to remove the user [CHAR LIMIT=35] -->
     <string name="user_remove_user">Delete user</string>
     <!-- Title for confirmation of turning on calls [CHAR LIMIT=40] -->
     <string name="user_enable_calling_confirm_title">Turn on phone calls?</string>
     <!-- Message for confirmation of turning on calls [CHAR LIMIT=none] -->
     <string name="user_enable_calling_confirm_message">Call history will be shared with this user.</string>
     <!-- Title for confirmation of turning on calls and SMS [CHAR LIMIT=45] -->
     <string name="user_enable_calling_and_sms_confirm_title">Turn on phone calls &amp; SMS?</string>
     <!-- Message for confirmation of turning on calls and SMS [CHAR LIMIT=none] -->
     <string name="user_enable_calling_and_sms_confirm_message">Call and SMS history will be shared with this user.</string>
diff --git a/res/xml/user_details_settings.xml b/res/xml/user_details_settings.xml
index 9280ff11632fac81b8d8f23e743bedca72f00763..d0a055fae29c6127f7eb9ed9e7d6011a2843e0bb 100644
--- a/res/xml/user_details_settings.xml
+++ b/res/xml/user_details_settings.xml
@@ -22,17 +22,21 @@
             android:key="switch_user"
             android:icon="@drawable/ic_swap" />
     <SwitchPreference
             android:key="enable_calling"
             android:icon="@drawable/ic_phone"
             android:title="@string/user_enable_calling_sms" />
     <com.android.settingslib.RestrictedPreference
             android:key="app_and_content_access"
             android:icon="@drawable/ic_lock_closed"
             android:title="@string/user_restrictions_title" />
+    <SwitchPreference
+            android:icon="@drawable/ic_settings_install"
+            android:key="disallow_install_apps"
+            android:title="@string/user_disallow_install_apps" />
     <com.android.settingslib.RestrictedPreference
             android:key="remove_user"
             android:icon="@drawable/ic_delete"
             settings:userRestriction="no_remove_user"
             settings:useAdminDisabledSummary="true" />
 
 </PreferenceScreen>
diff --git a/src/com/android/settings/users/UserDetailsSettings.java b/src/com/android/settings/users/UserDetailsSettings.java
index ce186f2134a6507ef3408780aaf8704c88678d41..3b4f984ca964c497771ed4d35bcdd5d5a54a1914 100644
--- a/src/com/android/settings/users/UserDetailsSettings.java
+++ b/src/com/android/settings/users/UserDetailsSettings.java
@@ -55,20 +55,21 @@ import java.util.concurrent.atomic.AtomicBoolean;
  */
 public class UserDetailsSettings extends SettingsPreferenceFragment
         implements Preference.OnPreferenceClickListener, Preference.OnPreferenceChangeListener {
 
     private static final String TAG = UserDetailsSettings.class.getSimpleName();
 
     private static final String KEY_SWITCH_USER = "switch_user";
     private static final String KEY_ENABLE_TELEPHONY = "enable_calling";
     private static final String KEY_REMOVE_USER = "remove_user";
     private static final String KEY_APP_AND_CONTENT_ACCESS = "app_and_content_access";
+    private static final String KEY_DISALLOW_INSTALL_APPS = "disallow_install_apps";
 
     /** Integer extra containing the userId to manage */
     static final String EXTRA_USER_ID = "user_id";
 
     private static final int DIALOG_CONFIRM_REMOVE = 1;
     private static final int DIALOG_CONFIRM_ENABLE_CALLING = 2;
     private static final int DIALOG_CONFIRM_ENABLE_CALLING_AND_SMS = 3;
     private static final int DIALOG_SETUP_USER = 4;
     private static final int DIALOG_CONFIRM_RESET_GUEST = 5;
 
@@ -78,20 +79,21 @@ public class UserDetailsSettings extends SettingsPreferenceFragment
     private final AtomicBoolean mGuestCreationScheduled = new AtomicBoolean();
     private final ExecutorService mExecutor = Executors.newSingleThreadExecutor();
 
     @VisibleForTesting
     RestrictedPreference mSwitchUserPref;
     private SwitchPreference mPhonePref;
     @VisibleForTesting
     Preference mAppAndContentAccessPref;
     @VisibleForTesting
     Preference mRemoveUserPref;
+    private SwitchPreference mInstallAppsPref;
 
     @VisibleForTesting
     UserInfo mUserInfo;
     private Bundle mDefaultGuestRestrictions;
 
     @Override
     public int getMetricsCategory() {
         return SettingsEnums.USER_DETAILS;
     }
 
@@ -141,26 +143,51 @@ public class UserDetailsSettings extends SettingsPreferenceFragment
             }
         } else if (preference == mAppAndContentAccessPref) {
             openAppAndContentAccessScreen(false);
             return true;
         }
         return false;
     }
 
     @Override
     public boolean onPreferenceChange(Preference preference, Object newValue) {
-        if (Boolean.TRUE.equals(newValue)) {
-            showDialog(mUserInfo.isGuest() ? DIALOG_CONFIRM_ENABLE_CALLING
-                    : DIALOG_CONFIRM_ENABLE_CALLING_AND_SMS);
-            return false;
+        if (preference == mPhonePref) {
+            if (Boolean.TRUE.equals(newValue)) {
+                showDialog(mUserInfo.isGuest() ? DIALOG_CONFIRM_ENABLE_CALLING
+                        : DIALOG_CONFIRM_ENABLE_CALLING_AND_SMS);
+                return false;
+            }
+            enableCallsAndSms(false);
+        } else if (preference == mInstallAppsPref) {
+            if (mUserInfo.isGuest()) {
+                mDefaultGuestRestrictions.putBoolean(UserManager.DISALLOW_INSTALL_APPS, (Boolean) newValue);
+                mUserManager.setDefaultGuestRestrictions(mDefaultGuestRestrictions);
+
+                // Update the guest's restrictions, if there is a guest
+                // TODO: Maybe setDefaultGuestRestrictions() can internally just set the restrictions
+                // on any existing guest rather than do it here with multiple Binder calls.
+                List<UserInfo> users = mUserManager.getUsers(true);
+                for (UserInfo user: users) {
+                    if (user.isGuest()) {
+                        UserHandle userHandle = UserHandle.of(user.id);
+                        for (String key : mDefaultGuestRestrictions.keySet()) {
+                            mUserManager.setUserRestriction(
+                                    key, mDefaultGuestRestrictions.getBoolean(key), userHandle);
+                        }
+                    }
+                }
+            } else {
+                UserHandle userHandle = UserHandle.of(mUserInfo.id);
+                mUserManager.setUserRestriction(UserManager.DISALLOW_INSTALL_APPS, (Boolean) newValue,
+                        userHandle);
+            }
         }
-        enableCallsAndSms(false);
         return true;
     }
 
     @Override
     public int getDialogMetricsCategory(int dialogId) {
         switch (dialogId) {
             case DIALOG_CONFIRM_REMOVE:
             case DIALOG_CONFIRM_RESET_GUEST:
                 return SettingsEnums.DIALOG_USER_REMOVE;
             case DIALOG_CONFIRM_ENABLE_CALLING:
@@ -234,37 +261,39 @@ public class UserDetailsSettings extends SettingsPreferenceFragment
             throw new IllegalStateException("Arguments to this fragment must contain the user id");
         }
         boolean isNewUser =
                 arguments.getBoolean(AppRestrictionsFragment.EXTRA_NEW_USER, false);
         mUserInfo = mUserManager.getUserInfo(userId);
 
         mSwitchUserPref = findPreference(KEY_SWITCH_USER);
         mPhonePref = findPreference(KEY_ENABLE_TELEPHONY);
         mRemoveUserPref = findPreference(KEY_REMOVE_USER);
         mAppAndContentAccessPref = findPreference(KEY_APP_AND_CONTENT_ACCESS);
+        mInstallAppsPref = findPreference(KEY_DISALLOW_INSTALL_APPS);
 
         mSwitchUserPref.setTitle(
                 context.getString(com.android.settingslib.R.string.user_switch_to_user,
                         UserSettings.getUserName(context, mUserInfo)));
 
         if (mUserCaps.mDisallowSwitchUser) {
             mSwitchUserPref.setDisabledByAdmin(RestrictedLockUtilsInternal.getDeviceOwner(context));
         } else {
             mSwitchUserPref.setDisabledByAdmin(null);
             mSwitchUserPref.setSelectable(true);
             mSwitchUserPref.setOnPreferenceClickListener(this);
         }
 
         if (!mUserManager.isAdminUser()) { // non admin users can't remove users and allow calls
             removePreference(KEY_ENABLE_TELEPHONY);
             removePreference(KEY_REMOVE_USER);
             removePreference(KEY_APP_AND_CONTENT_ACCESS);
+            removePreference(KEY_DISALLOW_INSTALL_APPS);
         } else {
             if (!Utils.isVoiceCapable(context)) { // no telephony
                 removePreference(KEY_ENABLE_TELEPHONY);
             }
 
             if (mUserInfo.isRestricted()) {
                 removePreference(KEY_ENABLE_TELEPHONY);
                 if (isNewUser) {
                     // for newly created restricted users we should open the apps and content access
                     // screen to initialize the default restrictions
@@ -281,33 +310,38 @@ public class UserDetailsSettings extends SettingsPreferenceFragment
                 mPhonePref.setTitle(R.string.user_enable_calling);
                 mDefaultGuestRestrictions = mUserManager.getDefaultGuestRestrictions();
                 mPhonePref.setChecked(
                         !mDefaultGuestRestrictions.getBoolean(UserManager.DISALLOW_OUTGOING_CALLS));
                 mRemoveUserPref.setTitle(mGuestUserAutoCreated
                         ? com.android.settingslib.R.string.guest_reset_guest
                         : R.string.user_exit_guest_title);
                 if (mGuestUserAutoCreated) {
                     mRemoveUserPref.setEnabled((mUserInfo.flags & UserInfo.FLAG_INITIALIZED) != 0);
                 }
+                mRemoveUserPref.setTitle(R.string.user_exit_guest_title);
+                removePreference(KEY_DISALLOW_INSTALL_APPS);
             } else {
                 mPhonePref.setChecked(!mUserManager.hasUserRestriction(
                         UserManager.DISALLOW_OUTGOING_CALLS, new UserHandle(userId)));
                 mRemoveUserPref.setTitle(R.string.user_remove_user);
+                mInstallAppsPref.setChecked(mUserManager.hasUserRestriction(
+                        UserManager.DISALLOW_INSTALL_APPS, new UserHandle(userId)));
             }
             if (RestrictedLockUtilsInternal.hasBaseUserRestriction(context,
                     UserManager.DISALLOW_REMOVE_USER, UserHandle.myUserId())) {
                 removePreference(KEY_REMOVE_USER);
             }
 
             mRemoveUserPref.setOnPreferenceClickListener(this);
             mPhonePref.setOnPreferenceChangeListener(this);
             mAppAndContentAccessPref.setOnPreferenceClickListener(this);
+            mInstallAppsPref.setOnPreferenceChangeListener(this);
         }
     }
 
     @VisibleForTesting
     boolean canDeleteUser() {
         if (!mUserManager.isAdminUser()) {
             return false;
         }
 
         Context context = getActivity();

commit e73ea00747f05096155a12893059104d3c450565
Author: Oliver Scott <olivercscott@gmail.com>
Date:   Thu 2021-02-25 11:31:14-0500

    add Wi-Fi timeout feature
---
 res/values/arrays.xml                              |  44 ++++++++
 res/values/strings.xml                             |  19 ++++
 res/xml/wifi_configure_settings.xml                |   8 ++
 .../WifiTimeoutPreferenceController.java (new)     | 115 +++++++++++++++++++++
 4 files changed, 186 insertions(+)

diff --git a/res/values/arrays.xml b/res/values/arrays.xml
index e6cee16611b0513804cb564ca6671af88517da5e..198239d0d4d44827b5b863e0fb96c1904d1d144c 100644
--- a/res/values/arrays.xml
+++ b/res/values/arrays.xml
@@ -76,20 +76,64 @@
         <!-- Do not translate. -->
         <item>3600000</item>
         <!-- Do not translate. -->
         <item>7200000</item>
         <!-- Do not translate. -->
         <item>14400000</item>
         <!-- Do not translate. -->
         <item>28800000</item>
     </string-array>
 
+    <!-- Wifi settings.  The delay in inactivity before wifi is turned off. These are shown in a list dialog. -->
+    <string-array name="wifi_timeout_entries">
+        <item>@string/wifi_timeout_summary_never</item>
+        <item>@string/wifi_timeout_summary_15secs</item>
+        <item>@string/wifi_timeout_summary_30secs</item>
+        <item>@string/wifi_timeout_summary_1min</item>
+        <item>@string/wifi_timeout_summary_2mins</item>
+        <item>@string/wifi_timeout_summary_5mins</item>
+        <item>@string/wifi_timeout_summary_10mins</item>
+        <item>@string/wifi_timeout_summary_30mins</item>
+        <item>@string/wifi_timeout_summary_1hour</item>
+        <item>@string/wifi_timeout_summary_2hours</item>
+        <item>@string/wifi_timeout_summary_4hours</item>
+        <item>@string/wifi_timeout_summary_8hours</item>
+    </string-array>
+
+    <!-- Do not translate. -->
+    <string-array name="wifi_timeout_values" translatable="false">
+        <!-- Do not translate. -->
+        <item>0</item>
+        <!-- Do not translate. -->
+        <item>15000</item>
+        <!-- Do not translate. -->
+        <item>30000</item>
+        <!-- Do not translate. -->
+        <item>60000</item>
+        <!-- Do not translate. -->
+        <item>120000</item>
+        <!-- Do not translate. -->
+        <item>300000</item>
+        <!-- Do not translate. -->
+        <item>600000</item>
+        <!-- Do not translate. -->
+        <item>1800000</item>
+        <!-- Do not translate. -->
+        <item>3600000</item>
+        <!-- Do not translate. -->
+        <item>7200000</item>
+        <!-- Do not translate. -->
+        <item>14400000</item>
+        <!-- Do not translate. -->
+        <item>28800000</item>
+    </string-array>
+
     <!-- Display settings.  The delay in inactivity before the screen is turned off. These are shown in a list dialog. -->
     <string-array name="screen_timeout_entries">
         <item>15 seconds</item>
         <item>30 seconds</item>
         <item>1 minute</item>
         <item>2 minutes</item>
         <item>5 minutes</item>
         <item>10 minutes</item>
         <item>30 minutes</item>
     </string-array>
diff --git a/res/values/strings.xml b/res/values/strings.xml
index e4a6e5ac91eed4fc7abd98eb5118a62e89af357b..90652f44755931341f8e11616c5e62e3327a631d 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -39,20 +39,39 @@
     <string name="bluetooth_timeout_summary_1min">1 minute</string>
     <string name="bluetooth_timeout_summary_2mins">2 minutes</string>
     <string name="bluetooth_timeout_summary_5mins">5 minutes</string>
     <string name="bluetooth_timeout_summary_10mins">10 minutes</string>
     <string name="bluetooth_timeout_summary_30mins">30 minutes</string>
     <string name="bluetooth_timeout_summary_1hour">1 hour</string>
     <string name="bluetooth_timeout_summary_2hours">2 hours</string>
     <string name="bluetooth_timeout_summary_4hours">4 hours</string>
     <string name="bluetooth_timeout_summary_8hours">8 hours</string>
 
+    <!--  screen, setting option name to change wifi timeout -->
+    <string name="wifi_timeout">Turn off Wi-Fi automatically</string>
+
+    <!--  screen, setting option summary to change wifi timeout -->
+    <string name="wifi_timeout_summary">Wi-Fi will turn off after <xliff:g id="timeout_description">%1$s</xliff:g> if no network connected</string>
+    <string name="wifi_timeout_summary2">Disabled</string>
+    <string name="wifi_timeout_summary_never">Never</string>
+    <string name="wifi_timeout_summary_15secs">15 seconds</string>
+    <string name="wifi_timeout_summary_30secs">30 seconds</string>
+    <string name="wifi_timeout_summary_1min">1 minute</string>
+    <string name="wifi_timeout_summary_2mins">2 minutes</string>
+    <string name="wifi_timeout_summary_5mins">5 minutes</string>
+    <string name="wifi_timeout_summary_10mins">10 minutes</string>
+    <string name="wifi_timeout_summary_30mins">30 minutes</string>
+    <string name="wifi_timeout_summary_1hour">1 hour</string>
+    <string name="wifi_timeout_summary_2hours">2 hours</string>
+    <string name="wifi_timeout_summary_4hours">4 hours</string>
+    <string name="wifi_timeout_summary_8hours">8 hours</string>
+
     <!-- Device Info screen. Used for a status item's value when the proper value is not known -->
     <string name="device_info_default">Unknown</string>
     <!-- [CHAR LIMIT=NONE] Device Info screen. Countdown for user taps to enable development settings -->
     <plurals name="show_dev_countdown">
         <item quantity="one">You are now <xliff:g id="step_count">%1$d</xliff:g> step away from being a developer.</item>
         <item quantity="other">You are now <xliff:g id="step_count">%1$d</xliff:g> steps away from being a developer.</item>
     </plurals>
     <!-- [CHAR LIMIT=NONE] Device Info screen. Confirmation that developer settings are enabled -->
     <string name="show_dev_on">You are now a developer!</string>
     <!-- [CHAR LIMIT=NONE] Device Info screen. Okay we get it, stop pressing, you already have it on -->
diff --git a/res/xml/wifi_configure_settings.xml b/res/xml/wifi_configure_settings.xml
index 2ab7b6a28feea616dcd8d746bc9ad2f5c8e84bc2..a682e2db92d25dcd2695f4dc7157453121482425 100644
--- a/res/xml/wifi_configure_settings.xml
+++ b/res/xml/wifi_configure_settings.xml
@@ -19,20 +19,28 @@
     xmlns:settings="http://schemas.android.com/apk/res-auto"
     android:title="@string/wifi_configure_settings_preference_title">
 
     <SwitchPreference
         android:key="enable_wifi_wakeup"
         android:title="@string/wifi_wakeup"
         android:icon="@drawable/ic_auto_wifi"
         android:summary="@string/wifi_wakeup_summary"
         settings:controller="com.android.settings.wifi.WifiWakeupPreferenceController"/>
 
+    <ListPreference
+        android:key="wifi_timeout"
+        android:title="@string/wifi_timeout"
+        android:summary="@string/wifi_timeout_summary"
+        android:entries="@array/wifi_timeout_entries"
+        android:entryValues="@array/wifi_timeout_values"
+        settings:controller="com.android.settings.wifi.WifiTimeoutPreferenceController"/>
+
     <SwitchPreference
         android:key="notify_open_networks"
         android:title="@string/wifi_notify_open_networks"
         android:icon="@drawable/ic_open_wifi_notifications"
         android:summary="@string/wifi_notify_open_networks_summary"
         settings:keywords="@string/keywords_wifi_notify_open_networks"
         settings:controller="com.android.settings.wifi.NotifyOpenNetworksPreferenceController"/>
 
     <SwitchPreference
         android:key="wifi_cellular_data_fallback"
diff --git a/src/com/android/settings/wifi/WifiTimeoutPreferenceController.java b/src/com/android/settings/wifi/WifiTimeoutPreferenceController.java
new file mode 100644
index 0000000000000000000000000000000000000000..7116c9051904dd0a5109bafc7bec0420eac82369
--- /dev/null
+++ b/src/com/android/settings/wifi/WifiTimeoutPreferenceController.java
@@ -0,0 +1,115 @@
+/*
+ * Copyright (C) 2020 The Calyx Institute
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.wifi;
+
+import android.content.Context;
+import android.net.wifi.WifiManager;
+import android.provider.Settings;
+import android.util.Log;
+
+import androidx.preference.ListPreference;
+import androidx.preference.Preference;
+
+import com.android.settings.R;
+import com.android.settings.core.BasePreferenceController;
+import com.android.settings.core.PreferenceControllerMixin;
+
+public class WifiTimeoutPreferenceController extends BasePreferenceController implements
+        PreferenceControllerMixin, Preference.OnPreferenceChangeListener {
+    private static final String TAG = "WifiTimeoutPrefCtrl";
+
+    public static final int FALLBACK_WIFI_TIMEOUT_VALUE = 0;
+
+    private final String mWifiTimeoutKey;
+
+    protected WifiManager mWifiManager;
+
+    public WifiTimeoutPreferenceController(Context context, String key) {
+        super(context, key);
+        mWifiTimeoutKey = key;
+
+        mWifiManager = context.getSystemService(WifiManager.class);
+        if (mWifiManager == null) {
+            Log.e(TAG, "Wifi is not supported on this device");
+            return;
+        }
+    }
+
+    @Override
+    public int getAvailabilityStatus() {
+        return mWifiManager != null ? AVAILABLE : UNSUPPORTED_ON_DEVICE;
+    }
+
+    @Override
+    public String getPreferenceKey() {
+        return mWifiTimeoutKey;
+    }
+
+    @Override
+    public void updateState(Preference preference) {
+        final ListPreference timeoutListPreference = (ListPreference) preference;
+        final long currentTimeout = Settings.Global.getLong(mContext.getContentResolver(),
+                Settings.Global.WIFI_OFF_TIMEOUT, FALLBACK_WIFI_TIMEOUT_VALUE);
+        timeoutListPreference.setValue(String.valueOf(currentTimeout));
+        updateTimeoutPreferenceDescription(timeoutListPreference,
+                Long.parseLong(timeoutListPreference.getValue()));
+    }
+
+    @Override
+    public boolean onPreferenceChange(Preference preference, Object newValue) {
+        try {
+            long value = Long.parseLong((String) newValue);
+            Settings.Global.putLong(mContext.getContentResolver(), Settings.Global.WIFI_OFF_TIMEOUT, value);
+            updateTimeoutPreferenceDescription((ListPreference) preference, value);
+        } catch (NumberFormatException e) {
+            Log.e(TAG, "could not persist wifi timeout setting", e);
+        }
+        return true;
+    }
+
+    public static CharSequence getTimeoutDescription(
+            long currentTimeout, CharSequence[] entries, CharSequence[] values) {
+        if (currentTimeout < 0 || entries == null || values == null
+                || values.length != entries.length) {
+            return null;
+        }
+
+        for (int i = 0; i < values.length; i++) {
+            long timeout = Long.parseLong(values[i].toString());
+            if (currentTimeout == timeout) {
+                return entries[i];
+            }
+        }
+        return null;
+    }
+
+    private void updateTimeoutPreferenceDescription(ListPreference preference,
+                                                    long currentTimeout) {
+        final CharSequence[] entries = preference.getEntries();
+        final CharSequence[] values = preference.getEntryValues();
+        final CharSequence timeoutDescription = getTimeoutDescription(
+                currentTimeout, entries, values);
+        String summary = "";
+        if (timeoutDescription != null) {
+            if (currentTimeout != 0)
+                summary = mContext.getString(R.string.wifi_timeout_summary, timeoutDescription);
+            else
+                summary = mContext.getString(R.string.wifi_timeout_summary2);
+        }
+        preference.setSummary(summary);
+    }
+}

commit ec47f7567ae76e213188a8363e7f7e87327ec1ef
Author: flawedworld <flawedworld@flawed.world>
Date:   Mon 2021-10-18 23:15:06+0100

    add a toggle for disabling fingerprint unlock
    
    Ported from 11. In 12 fingerprint is handled by the new biometric API and so technically in 12 this is not just disabling fingerprint unlock but all biometrics. This does not affect the Pixel 4 generation of devices with face scanning however as they were released on Q and so use the legacy face API. No frameworks/base changes are needed for 12 in this case other than migration which can be done in another commit.
---
 res/values/strings.xml                             |  3 +++
 res/xml/security_settings_fingerprint.xml          | 15 ++++++++++-
 .../fingerprint/FingerprintSettings.java           | 31 ++++++++++++++++++++--
 3 files changed, 46 insertions(+), 3 deletions(-)

diff --git a/res/values/strings.xml b/res/values/strings.xml
index 90652f44755931341f8e11616c5e62e3327a631d..551ebeb80a02e3547e447dd164e67e88cb11bab9 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -13688,11 +13688,14 @@
     <string name="scramble_pin_title">PIN scrambling</string>
     <string name="scramble_pin_summary">Controls PIN scrambling option when inputting PIN on screen lock.</string>
     <string name="deny_new_usb_title">USB accessories</string>
     <string name="auto_reboot_title">Auto reboot</string>
     <string name="auto_reboot_summary">Automatically reboot the device, if the phone hasn\'t been unlocked within the selected number of hours.</string>
     <string name="deny_new_usb_summary">Control support for USB peripherals such as input (mice, keyboards, joysticks) and storage devices.</string>
     <string name="keyguard_camera_title">Screen lock camera access</string>
     <string name="keyguard_camera_summary">Allow camera access when the device is locked</string>
     <string name="native_debug_title">Enable native code debugging</string>
     <string name="native_debug_summary">Generate useful logs / bug reports from crashes and permit debugging native code.</string>
+    <string name="security_settings_fingerprint_settings_screen_lock_category">Screen lock</string>
+    <string name="security_settings_fingerprint_settings_use_fingerprint_unlock_phone_title">Allow fingerprint unlocking</string>
+    <string name="security_settings_fingerprint_settings_use_fingerprint_unlock_phone_summary">Allow fingerprints to unlock the screen lock. If this is disabled, fingerprints can still be used in apps.</string>
 </resources>
diff --git a/res/xml/security_settings_fingerprint.xml b/res/xml/security_settings_fingerprint.xml
index 804ef881630f5587943e6e58501147376df780e7..e271e87bc17aefdd5a9836f44ee9d661fe616613 100644
--- a/res/xml/security_settings_fingerprint.xml
+++ b/res/xml/security_settings_fingerprint.xml
@@ -9,12 +9,25 @@
 
      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
 -->
 
 <PreferenceScreen
     xmlns:android="http://schemas.android.com/apk/res/android"
-    android:title="@string/security_settings_fingerprint_preference_title"/>
+    android:title="@string/security_settings_fingerprint_preference_title">
+
+    <PreferenceCategory
+        android:title="@string/security_settings_fingerprint_settings_screen_lock_category"
+        android:order="10"
+        android:key="security_settings_fingerprint_unlock_category">
+
+        <SwitchPreference
+            android:key="security_settings_fingerprint_keyguard"
+            android:title="@string/security_settings_fingerprint_settings_use_fingerprint_unlock_phone_title"
+            android:summary="@string/security_settings_fingerprint_settings_use_fingerprint_unlock_phone_summary" />
+    </PreferenceCategory>
+
+</PreferenceScreen>
 
diff --git a/src/com/android/settings/biometrics/fingerprint/FingerprintSettings.java b/src/com/android/settings/biometrics/fingerprint/FingerprintSettings.java
index 87a29b2209421666fd9338b1e296119150a741bc..aa6daa4ae964ed9f0bcefec963f644478aba4fc3 100644
--- a/src/com/android/settings/biometrics/fingerprint/FingerprintSettings.java
+++ b/src/com/android/settings/biometrics/fingerprint/FingerprintSettings.java
@@ -29,35 +29,37 @@ import android.content.Intent;
 import android.graphics.drawable.Drawable;
 import android.hardware.fingerprint.Fingerprint;
 import android.hardware.fingerprint.FingerprintManager;
 import android.hardware.fingerprint.FingerprintSensorPropertiesInternal;
 import android.os.Bundle;
 import android.os.Handler;
 import android.os.UserHandle;
 import android.os.UserManager;
 import android.text.InputFilter;
 import android.text.Spanned;
+import android.provider.Settings;
 import android.text.TextUtils;
 import android.util.Log;
 import android.view.View;
 import android.widget.ImeAwareEditText;
 import android.widget.Toast;
 
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.annotation.VisibleForTesting;
 import androidx.appcompat.app.AlertDialog;
 import androidx.preference.Preference;
 import androidx.preference.Preference.OnPreferenceChangeListener;
 import androidx.preference.PreferenceGroup;
 import androidx.preference.PreferenceScreen;
 import androidx.preference.PreferenceViewHolder;
+import androidx.preference.SwitchPreference;
 
 import com.android.settings.R;
 import com.android.settings.SettingsPreferenceFragment;
 import com.android.settings.SubSettings;
 import com.android.settings.Utils;
 import com.android.settings.biometrics.BiometricEnrollBase;
 import com.android.settings.biometrics.BiometricUtils;
 import com.android.settings.core.instrumentation.InstrumentedDialogFragment;
 import com.android.settings.password.ChooseLockGeneric;
 import com.android.settings.password.ChooseLockSettingsHelper;
@@ -108,22 +110,24 @@ public class FingerprintSettings extends SubSettings {
         setTitle(msg);
     }
 
     public static class FingerprintSettingsFragment extends SettingsPreferenceFragment
             implements OnPreferenceChangeListener, FingerprintPreference.OnDeleteClickListener {
         private static final int RESET_HIGHLIGHT_DELAY_MS = 500;
 
         private static final String TAG = "FingerprintSettings";
         private static final String KEY_FINGERPRINT_ITEM_PREFIX = "key_fingerprint_item";
         private static final String KEY_FINGERPRINT_ADD = "key_fingerprint_add";
+        private static final String KEY_FINGERPRINT_SCREEN_LOCK_OPTIONS_CATEGORY =
+                "security_settings_fingerprint_unlock_category";
         private static final String KEY_FINGERPRINT_ENABLE_KEYGUARD_TOGGLE =
-                "fingerprint_enable_keyguard_toggle";
+                "security_settings_fingerprint_keyguard";
         private static final String KEY_LAUNCHED_CONFIRM = "launched_confirm";
 
         private static final int MSG_REFRESH_FINGERPRINT_TEMPLATES = 1000;
         private static final int MSG_FINGER_AUTH_SUCCESS = 1001;
         private static final int MSG_FINGER_AUTH_FAIL = 1002;
         private static final int MSG_FINGER_AUTH_ERROR = 1003;
         private static final int MSG_FINGER_AUTH_HELP = 1004;
 
         private static final int CONFIRM_REQUEST = 101;
         private static final int CHOOSE_LOCK_GENERIC_REQUEST = 102;
@@ -392,49 +396,69 @@ public class FingerprintSettings extends SubSettings {
          */
         private PreferenceScreen createPreferenceHierarchy() {
             PreferenceScreen root = getPreferenceScreen();
             if (root != null) {
                 root.removeAll();
             }
             addPreferencesFromResource(R.xml.security_settings_fingerprint);
             root = getPreferenceScreen();
             addFingerprintItemPreferences(root);
             setPreferenceScreen(root);
+
+            // Need to add back the keyguard preferences, since addFingerprintItemPreferences
+            // calls root.removeAll() again.
+            addPreferencesFromResource(R.xml.security_settings_fingerprint);
+
+            // Don't show keyguard preferences for work profile settings.
+            if (UserManager.get(getContext()).isManagedProfile(mUserId)) {
+                removePreference(KEY_FINGERPRINT_SCREEN_LOCK_OPTIONS_CATEGORY);
+            } else {
+                SwitchPreference lockScreenFingerprintPreference =
+                        (SwitchPreference) findPreference(KEY_FINGERPRINT_ENABLE_KEYGUARD_TOGGLE);
+
+                lockScreenFingerprintPreference.setChecked(Settings.Secure.getInt(
+                        getContext().getContentResolver(),
+                        Settings.Secure.BIOMETRIC_KEYGUARD_ENABLED, 1) == 1);
+                lockScreenFingerprintPreference.setOnPreferenceChangeListener(this);
+            }
+
             return root;
         }
 
         private void addFingerprintItemPreferences(PreferenceGroup root) {
             root.removeAll();
             final List<Fingerprint> items = mFingerprintManager.getEnrolledFingerprints(mUserId);
             final int fingerprintCount = items.size();
             for (int i = 0; i < fingerprintCount; i++) {
                 final Fingerprint item = items.get(i);
                 FingerprintPreference pref = new FingerprintPreference(root.getContext(),
                         this /* onDeleteClickListener */);
                 pref.setKey(genKey(item.getBiometricId()));
                 pref.setTitle(item.getName());
                 pref.setFingerprint(item);
+                pref.setOrder(1);
                 pref.setPersistent(false);
                 pref.setIcon(R.drawable.ic_fingerprint_24dp);
                 if (mRemovalSidecar.isRemovingFingerprint(item.getBiometricId())) {
                     pref.setEnabled(false);
                 }
                 if (mFingerprintsRenaming.containsKey(item.getBiometricId())) {
                     pref.setTitle(mFingerprintsRenaming.get(item.getBiometricId()));
                 }
                 root.addPreference(pref);
                 pref.setOnPreferenceChangeListener(this);
             }
             Preference addPreference = new Preference(root.getContext());
             addPreference.setKey(KEY_FINGERPRINT_ADD);
             addPreference.setTitle(R.string.fingerprint_add_title);
             addPreference.setIcon(R.drawable.ic_add_24dp);
+            addPreference.setOrder(2);
             root.addPreference(addPreference);
             addPreference.setOnPreferenceChangeListener(this);
             updateAddPreference();
             createFooterPreference(root);
         }
 
         private void updateAddPreference() {
             if (getActivity() == null) return; // Activity went away
 
             final Preference addPreference = findPreference(KEY_FINGERPRINT_ADD);
@@ -575,21 +599,24 @@ public class FingerprintSettings extends SubSettings {
             renameDialog.setTargetFragment(this, 0);
             renameDialog.show(getFragmentManager(), RenameDialog.class.getName());
             mAuthenticateSidecar.stopAuthentication();
         }
 
         @Override
         public boolean onPreferenceChange(Preference preference, Object value) {
             boolean result = true;
             final String key = preference.getKey();
             if (KEY_FINGERPRINT_ENABLE_KEYGUARD_TOGGLE.equals(key)) {
-                // TODO
+                boolean enableFingerprintUnlock = (boolean) value;
+                Settings.Secure.putInt(getContext().getContentResolver(),
+                        Settings.Secure.BIOMETRIC_KEYGUARD_ENABLED,
+                        (enableFingerprintUnlock) ? 1 : 0);
             } else {
                 Log.v(TAG, "Unknown key:" + key);
             }
             return result;
         }
 
         @Override
         public int getHelpResource() {
             return R.string.help_url_fingerprint;
         }

commit c94c3d1b85e81554471e27f3113821e88c18cf91
Author: Your Name <you@example.com>
Date:   Mon 2021-10-18 02:17:56+0000

    Dark mode support for app installation restriction icon
---
 res/drawable/ic_settings_install.xml | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/res/drawable/ic_settings_install.xml b/res/drawable/ic_settings_install.xml
index 5bd5e300eae34389bd41987567756ec27da2a99d..eefecc242a4c514298c1bf360ad55d7058518fc8 100644
--- a/res/drawable/ic_settings_install.xml
+++ b/res/drawable/ic_settings_install.xml
@@ -11,18 +11,19 @@
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
   -->
 
 <vector xmlns:android="http://schemas.android.com/apk/res/android"
     android:width="24dp"
     android:height="24dp"
     android:viewportWidth="24"
-    android:viewportHeight="24">
+    android:viewportHeight="24"
+    android:tint="?android:attr/colorControlNormal">
   <path
       android:fillColor="#FF000000"
       android:pathData="M18,15v3H6v-3H4v3c0,1.1 0.9,2 2,2h12c1.1,0 2,-0.9 2,-2v-3H18z"/>
   <path
       android:fillColor="#FF000000"
       android:pathData="M17,11.5l-1.41,-1.41l-2.59,2.58l0,-8.67l-2,0l0,8.67l-2.59,-2.58l-1.41,1.41l5,5z"/>
 </vector>

commit 45171c95682e53038b26fa43c59aea1962709546
Author: Pratyush <codelab@pratyush.dev>
Date:   Wed 2021-10-20 05:40:11+0530

    add toggle to set captiveportal settings
    
    Access is disallowed for users that are disallowed from configuring
    Private DNS settings. This restriction provides administrative control
    over this feature in a way that's compatible with existing device
    manager implementations. Private DNS is the closest fit from the
    existing user management restrictions that are available.
    
    Co-authored-by: stuux <stuux@posteo.net>
    Co-authored-by: Renlord <me@renlord.com>
    Co-authored-by: Danny Lin <danny@kdrag0n.dev>
    Co-authored-by: anupritaisno1 <www.anuprita804@gmail.com>
    Signed-off-by: empratyush <codelab@pratyush.dev>
---
 res/values/arrays.xml                              |  12 ++
 res/values/strings.xml                             |   2 +
 ...onnectivityCheckPreferenceController.java (new) | 202 +++++++++++++++++++++
 .../settings/network/NetworkDashboardFragment.java |   3 +
 4 files changed, 219 insertions(+)

diff --git a/res/values/arrays.xml b/res/values/arrays.xml
index 198239d0d4d44827b5b863e0fb96c1904d1d144c..1401000f0d457bf0d2efb98f1c9d5fab1a3bc45b 100644
--- a/res/values/arrays.xml
+++ b/res/values/arrays.xml
@@ -262,20 +262,32 @@
     <!-- Do not translate. -->
     <string-array name="deny_new_usb_values" translatable="false">
         <!-- Do not translate. -->
         <item>enabled</item>
         <!-- Do not translate. -->
         <item>dynamic</item>
         <!-- Do not translate. -->
         <item>disabled</item>
     </string-array>
 
+    <string-array name="connectivity_check_entries">
+        <item>GrapheneOS</item>
+        <item>Standard (Google)</item>
+        <item>Disabled</item>
+    </string-array>
+
+    <string-array name="connectivity_check_values" translatable="false">
+        <item>0</item>
+        <item>1</item>
+        <item>2</item>
+    </string-array>
+
     <!-- Do not translate. -->
     <string-array name="lock_after_timeout_values" translatable="false">
         <!-- Do not translate. -->
         <item>0</item>
         <!-- Do not translate. -->
         <item>5000</item>
         <!-- Do not translate. -->
         <item>15000</item>
         <!-- Do not translate. -->
         <item>30000</item>
diff --git a/res/values/strings.xml b/res/values/strings.xml
index 551ebeb80a02e3547e447dd164e67e88cb11bab9..45e74358d1cdb3d8f335022c5179efd927754403 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -13691,11 +13691,13 @@
     <string name="auto_reboot_title">Auto reboot</string>
     <string name="auto_reboot_summary">Automatically reboot the device, if the phone hasn\'t been unlocked within the selected number of hours.</string>
     <string name="deny_new_usb_summary">Control support for USB peripherals such as input (mice, keyboards, joysticks) and storage devices.</string>
     <string name="keyguard_camera_title">Screen lock camera access</string>
     <string name="keyguard_camera_summary">Allow camera access when the device is locked</string>
     <string name="native_debug_title">Enable native code debugging</string>
     <string name="native_debug_summary">Generate useful logs / bug reports from crashes and permit debugging native code.</string>
     <string name="security_settings_fingerprint_settings_screen_lock_category">Screen lock</string>
     <string name="security_settings_fingerprint_settings_use_fingerprint_unlock_phone_title">Allow fingerprint unlocking</string>
     <string name="security_settings_fingerprint_settings_use_fingerprint_unlock_phone_summary">Allow fingerprints to unlock the screen lock. If this is disabled, fingerprints can still be used in apps.</string>
+    <string name="connectivity_check_title">Internet connectivity check</string>
+    <string name="connectivity_check_summary">HTTP endpoints to use for performing internet connectivity checks.</string>
 </resources>
diff --git a/src/com/android/settings/network/ConnectivityCheckPreferenceController.java b/src/com/android/settings/network/ConnectivityCheckPreferenceController.java
new file mode 100644
index 0000000000000000000000000000000000000000..aa34865ac14e114d33c51a5193fb2b98c74ece9d
--- /dev/null
+++ b/src/com/android/settings/network/ConnectivityCheckPreferenceController.java
@@ -0,0 +1,202 @@
+/*
+ * Copyright (C) 2020 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.network;
+
+import android.content.ContentResolver;
+import android.content.Context;
+import android.content.res.Resources;
+import android.database.ContentObserver;
+import android.net.LinkProperties;
+import android.net.Network;
+import android.os.Handler;
+import android.os.Looper;
+import android.os.UserHandle;
+import android.os.UserManager;
+import android.provider.Settings;
+import androidx.preference.ListPreference;
+import androidx.preference.Preference;
+import androidx.preference.PreferenceScreen;
+import com.android.internal.util.ArrayUtils;
+import com.android.settings.R;
+import com.android.settings.core.BasePreferenceController;
+import com.android.settings.core.PreferenceControllerMixin;
+import com.android.settingslib.RestrictedLockUtils.EnforcedAdmin;
+import com.android.settingslib.RestrictedLockUtilsInternal;
+import com.android.settingslib.core.lifecycle.events.OnResume;
+
+public class ConnectivityCheckPreferenceController
+        extends BasePreferenceController
+        implements PreferenceControllerMixin, Preference.OnPreferenceChangeListener,
+        OnResume {
+
+    private static final String GRAPHENEOS_CAPTIVE_PORTAL_HTTPS_URL =
+            "https://connectivitycheck.grapheneos.network/generate_204";
+    private static final String GRAPHENEOS_CAPTIVE_PORTAL_HTTP_URL =
+            "http://connectivitycheck.grapheneos.network/generate_204";
+    private static final String GRAPHENEOS_CAPTIVE_PORTAL_FALLBACK_URL =
+            "http://grapheneos.online/gen_204";
+    private static final String GRAPHENEOS_CAPTIVE_PORTAL_OTHER_FALLBACK_URL =
+            "http://grapheneos.online/generate_204";
+
+    // imported defaults from AOSP NetworkStack
+    private static final String STANDARD_HTTPS_URL =
+            "https://www.google.com/generate_204";
+    private static final String STANDARD_HTTP_URL =
+            "http://connectivitycheck.gstatic.com/generate_204";
+    private static final String STANDARD_FALLBACK_URL =
+            "http://www.google.com/gen_204";
+    private static final String STANDARD_OTHER_FALLBACK_URLS =
+            "http://play.googleapis.com/generate_204";
+
+    private static final int GRAPHENEOS_CAPTIVE_PORTAL_HTTP_URL_INTVAL = 0;
+    private static final int STANDARD_CAPTIVE_PORTAL_HTTP_URL_INTVAL = 1;
+    private static final int DISABLED_CAPTIVE_PORTAL_INTVAL = 2;
+
+    private static final String KEY_CONNECTIVITY_CHECK_SETTINGS =
+            "connectivity_check_settings";
+
+    private ListPreference mConnectivityPreference;
+
+    public ConnectivityCheckPreferenceController(Context context) {
+        super(context, KEY_CONNECTIVITY_CHECK_SETTINGS);
+    }
+
+    @Override
+    public int getAvailabilityStatus() {
+        if (isDisabledByAdmin()) {
+            return BasePreferenceController.DISABLED_FOR_USER;
+        }
+        return BasePreferenceController.AVAILABLE;
+    }
+
+    @Override
+    public void displayPreference(PreferenceScreen screen) {
+        ListPreference captiveList = new ListPreference(screen.getContext());
+        captiveList.setKey(KEY_CONNECTIVITY_CHECK_SETTINGS);
+        captiveList.setOrder(30);
+        captiveList.setIcon(R.drawable.ic_settings_language);
+        captiveList.setTitle(R.string.connectivity_check_title);
+        captiveList.setSummary(R.string.connectivity_check_summary);
+        captiveList.setEntries(R.array.connectivity_check_entries);
+        captiveList.setEntryValues(R.array.connectivity_check_values);
+
+        if(mConnectivityPreference == null){
+            screen.addPreference(captiveList);
+            mConnectivityPreference = captiveList;
+        }
+        super.displayPreference(screen);
+        updatePreferenceState();
+    }
+
+    @Override
+    public String getPreferenceKey() {
+        return KEY_CONNECTIVITY_CHECK_SETTINGS;
+    }
+
+    private void updatePreferenceState() {
+        if (Settings.Global.getInt(mContext.getContentResolver(),
+                Settings.Global.CAPTIVE_PORTAL_MODE, Settings.Global.CAPTIVE_PORTAL_MODE_PROMPT)
+                == Settings.Global.CAPTIVE_PORTAL_MODE_IGNORE) {
+            mConnectivityPreference.setValueIndex(DISABLED_CAPTIVE_PORTAL_INTVAL);
+            return;
+        }
+
+        String pref = Settings.Global.getString(
+                mContext.getContentResolver(), Settings.Global.CAPTIVE_PORTAL_HTTP_URL);
+        if (STANDARD_HTTP_URL.equals(pref)) {
+            mConnectivityPreference.setValueIndex(
+                    STANDARD_CAPTIVE_PORTAL_HTTP_URL_INTVAL);
+        } else {
+            mConnectivityPreference.setValueIndex(
+                    GRAPHENEOS_CAPTIVE_PORTAL_HTTP_URL_INTVAL);
+        }
+    }
+
+    @Override
+    public void onResume() {
+        updatePreferenceState();
+        if (mConnectivityPreference != null) {
+            setCaptivePortalURLs(
+                    mContext.getContentResolver(),
+                    Integer.parseInt(mConnectivityPreference.getValue()));
+        }
+    }
+
+    private void setCaptivePortalURLs(ContentResolver cr, int mode) {
+        switch (mode) {
+            case STANDARD_CAPTIVE_PORTAL_HTTP_URL_INTVAL:
+                Settings.Global.putString(cr, Settings.Global.CAPTIVE_PORTAL_HTTP_URL,
+                        STANDARD_HTTP_URL);
+                Settings.Global.putString(cr, Settings.Global.CAPTIVE_PORTAL_HTTPS_URL,
+                        STANDARD_HTTPS_URL);
+                Settings.Global.putString(cr, Settings.Global.CAPTIVE_PORTAL_FALLBACK_URL,
+                        STANDARD_FALLBACK_URL);
+                Settings.Global.putString(
+                        cr, Settings.Global.CAPTIVE_PORTAL_OTHER_FALLBACK_URLS,
+                        STANDARD_OTHER_FALLBACK_URLS);
+                Settings.Global.putInt(cr, Settings.Global.CAPTIVE_PORTAL_MODE,
+                        Settings.Global.CAPTIVE_PORTAL_MODE_PROMPT);
+                break;
+            case GRAPHENEOS_CAPTIVE_PORTAL_HTTP_URL_INTVAL:
+                Settings.Global.putString(cr, Settings.Global.CAPTIVE_PORTAL_HTTP_URL,
+                        GRAPHENEOS_CAPTIVE_PORTAL_HTTP_URL);
+                Settings.Global.putString(cr, Settings.Global.CAPTIVE_PORTAL_HTTPS_URL,
+                        GRAPHENEOS_CAPTIVE_PORTAL_HTTPS_URL);
+                Settings.Global.putString(cr, Settings.Global.CAPTIVE_PORTAL_FALLBACK_URL,
+                        GRAPHENEOS_CAPTIVE_PORTAL_FALLBACK_URL);
+                Settings.Global.putString(
+                        cr, Settings.Global.CAPTIVE_PORTAL_OTHER_FALLBACK_URLS,
+                        GRAPHENEOS_CAPTIVE_PORTAL_OTHER_FALLBACK_URL);
+                Settings.Global.putInt(cr, Settings.Global.CAPTIVE_PORTAL_MODE,
+                        Settings.Global.CAPTIVE_PORTAL_MODE_PROMPT);
+                break;
+            default:
+                // GrapheneOS URLs as placeholder
+                Settings.Global.putString(cr, Settings.Global.CAPTIVE_PORTAL_HTTP_URL,
+                        GRAPHENEOS_CAPTIVE_PORTAL_HTTP_URL);
+                Settings.Global.putString(cr, Settings.Global.CAPTIVE_PORTAL_HTTPS_URL,
+                        GRAPHENEOS_CAPTIVE_PORTAL_HTTPS_URL);
+                Settings.Global.putString(cr, Settings.Global.CAPTIVE_PORTAL_FALLBACK_URL,
+                        GRAPHENEOS_CAPTIVE_PORTAL_FALLBACK_URL);
+                Settings.Global.putString(
+                        cr, Settings.Global.CAPTIVE_PORTAL_OTHER_FALLBACK_URLS,
+                        GRAPHENEOS_CAPTIVE_PORTAL_OTHER_FALLBACK_URL);
+                Settings.Global.putInt(cr, Settings.Global.CAPTIVE_PORTAL_MODE,
+                        Settings.Global.CAPTIVE_PORTAL_MODE_IGNORE);
+        }
+    }
+
+    @Override
+    public boolean onPreferenceChange(Preference preference, Object value) {
+        final String key = preference.getKey();
+        if (KEY_CONNECTIVITY_CHECK_SETTINGS.equals(key)) {
+            setCaptivePortalURLs(mContext.getContentResolver(),
+                    Integer.parseInt((String)value));
+            return true;
+        } else {
+            return false;
+        }
+    }
+
+    private EnforcedAdmin getEnforcedAdmin() {
+        return RestrictedLockUtilsInternal.checkIfRestrictionEnforced(
+                mContext, UserManager.DISALLOW_CONFIG_PRIVATE_DNS,
+                UserHandle.myUserId());
+    }
+
+    private boolean isDisabledByAdmin() { return getEnforcedAdmin() != null; }
+}
\ No newline at end of file
diff --git a/src/com/android/settings/network/NetworkDashboardFragment.java b/src/com/android/settings/network/NetworkDashboardFragment.java
index 286e4e36e5b5042c746e743fe4f5f1bb36c80297..2eb788fbd074e6bddd5d671fcdb505dee9c67566 100644
--- a/src/com/android/settings/network/NetworkDashboardFragment.java
+++ b/src/com/android/settings/network/NetworkDashboardFragment.java
@@ -112,20 +112,23 @@ public class NetworkDashboardFragment extends DashboardFragment implements
         controllers.add(new MobileNetworkSummaryController(context, lifecycle));
         controllers.add(new TetherPreferenceController(context, lifecycle));
         controllers.add(vpnPreferenceController);
         controllers.add(new ProxyPreferenceController(context));
         controllers.add(mobilePlanPreferenceController);
         if (internetPreferenceController != null) {
             controllers.add(internetPreferenceController);
         }
         controllers.add(privateDnsPreferenceController);
         controllers.add(new NetworkProviderCallsSmsController(context, lifecycle));
+        ConnectivityCheckPreferenceController connectivityCheck =
+                new ConnectivityCheckPreferenceController(context);
+        controllers.add(connectivityCheck);
         return controllers;
     }
 
     @Override
     public void showMobilePlanMessageDialog() {
         showDialog(MANAGE_MOBILE_PLAN_DIALOG_ID);
     }
 
     @Override
     public Dialog onCreateDialog(int dialogId) {

commit 200f34108a21c614d1c9953fb76ac054c891dbdf
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Thu 2016-11-17 07:48:17-0500

    remove information referencing Google Play
---
 res/values/strings.xml | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/res/values/strings.xml b/res/values/strings.xml
index 45e74358d1cdb3d8f335022c5179efd927754403..65f37c813243788819b472d0bf4c467010e93295 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -4015,23 +4015,23 @@
     <string name="reset_esim_error_title">Can\u2019t erase SIMs</string>
     <!-- Message of the error message shown when error happens during erase eSIM data [CHAR LIMIT=NONE] -->
     <string name="reset_esim_error_msg">Downloaded SIMs can\u2019t be erased due to an error.\n\nRestart your device and try again.</string>
 
     <!-- Main Clear -->
     <!-- Button title to factory data reset the entire device [CHAR LIMIT=NONE] -->
     <string name="main_clear_title">Erase all data (factory reset)</string>
     <!-- Button title to factory data reset the entire device. The "(factory reset)" part is optional for translation. [CHAR LIMIT=30 BACKUP_MESSAGE_ID=3531267871084279512]-->
     <string name="main_clear_short_title">Erase all data (factory reset)</string>
     <!-- SD card & phone storage settings screen, message on screen after user selects Factory data reset [CHAR LIMIT=NONE] -->
-    <string name="main_clear_desc" product="tablet">"This will erase all data from your tablet\u2019s <b>internal storage</b>, including:\n\n<li>Your Google Account</li>\n<li>System and app data and settings</li>\n<li>Downloaded apps</li>"</string>
+    <string name="main_clear_desc" product="tablet">"This will erase all data from your tablet\u2019s <b>internal storage</b>, including:\n\n<li>System and app data and settings</li>\n<li>Downloaded apps</li>"</string>
     <!-- SD card & phone storage settings screen, message on screen after user selects Factory data reset [CHAR LIMIT=NONE] -->
-    <string name="main_clear_desc" product="default">"This will erase all data from your phone\u2019s <b>internal storage</b>, including:\n\n<li>Your Google Account</li>\n<li>System and app data and settings</li>\n<li>Downloaded apps</li>"</string>
+    <string name="main_clear_desc" product="default">"This will erase all data from your phone\u2019s <b>internal storage</b>, including:\n\n<li>System and app data and settings</li>\n<li>Downloaded apps</li>"</string>
     <!-- SD card & phone storage settings screen, instructions and list of current accounts.  The list of accounts follows this text[CHAR LIMIT=NONE] -->
     <string name="main_clear_accounts" product="default">"\n\nYou are currently signed into the following accounts:\n"</string>
     <!-- SD card & phone storage settings screen, notification if other users are present on the device [CHAR LIMIT=NONE] -->
     <string name="main_clear_other_users_present" product="default">"\n\nThere are other users present on this device.\n"</string>
     <!-- SD card & phone storage settings screen, list of items in user data storage (USB storage or SD card) that will be erased during this operation [CHAR LIMIT=NONE] -->
     <string name="main_clear_desc_also_erases_external">"<li>Music</li>\n<li>Photos</li>\n<li>Other user data</li>"</string>
     <!-- SD card & phone storage settings screen, list of items on an eSIM (embedded SIM) that will be erased during this operation [CHAR LIMIT=NONE] -->
     <string name="main_clear_desc_also_erases_esim">"<li>eSIMs</li>"</string>
     <!-- SD card & phone storage settings screen, notification if there are eSIM (embedded SIM) profiles present that the user's mobile service plan will not be canceled [CHAR LIMIT=NONE] -->
     <string name="main_clear_desc_no_cancel_mobile_plan">"\n\nThis will not cancel your mobile service plan.</string>

commit cf0b86c5ecc145c425e7e9d1a2ec3a01c2b60b72
Author: Danny Lin <danny@kdrag0n.dev>
Date:   Wed 2021-07-07 03:02:05-0700

    Add preference for increased touch sensitivity (glove mode)
    
    This preference controls the glove mode feature on Pixel devices for
    increased touch sensitivity without requiring a custom HAL or other
    device-side code. This is done by using the debug.touch_sensitivity_mode
    system property, which Settings has permission to change. The
    user-visible value is persisted in Settings.Secure, while the property
    is persisted in persist.vendor.touch_sensitivity_mode.
    
    Requires frameworks/base commit: "Add a config to state whether a device supports increased touch sensitivity."
    Requires device/google/* commit: "Express support for increased touch sensitivity."
    
    Closes: #1
    Co-authored-by: Diab Neiroukh <lazerl0rd@thezest.dev>
    Change-Id: I86af721fde33226d314d8a44525f310828299a72
---
 res/values/strings.xml                             |  4 ++
 res/xml/display_settings.xml                       |  6 +++
 ...chSensitivityPreferenceController.java (new +x) | 61 ++++++++++++++++++++++
 3 files changed, 71 insertions(+)

diff --git a/res/values/strings.xml b/res/values/strings.xml
index 65f37c813243788819b472d0bf4c467010e93295..3087202fafa95240d2793ba48458370c35c27377 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -3101,20 +3101,24 @@
     <!-- auto_rotate settings screen, title about the camera privacy lock enabled [CHAR LIMIT=NONE]-->
     <string name="auto_rotate_camera_lock_title">Camera is locked</string>
     <!-- Description feature's privacy sensitive details to make sure users understand what feature users, what it saves/sends etc [CHAR LIMIT=NONE]-->
     <string name="auto_rotate_camera_lock_summary">Camera must be unlocked for Face Detection</string>
     <!-- screen_timeout settings screen, summary about the camera being disabled [CHAR LIMIT=NONE]-->
     <string name="adaptive_sleep_camera_lock_summary">Camera must be unlocked for Screen Attention</string>
     <!-- auto_rotate settings screen, title about the required permission is missing [CHAR LIMIT=NONE]-->
     <string name="auto_rotate_summary_no_permission">Camera access is required for Face Detection. Tap to manage permissions for Device Personalization Services</string>
     <!-- auto_rotate settings screen, text for the camera permission button [CHAR LIMIT=NONE]-->
     <string name="auto_rotate_manage_permission_button">Manage permissions</string>
+    <!-- Display settings screen, increased touch sensitivity settings title [CHAR LIMIT=30] -->
+    <string name="touch_sensitivity_title">Increase touch sensitivity</string>
+    <!-- Display settings screen, increased touch sensitivity settings summary [CHAR LIMIT=NONE] -->
+    <string name="touch_sensitivity_summary">Improves touch when using screen protectors</string>
 
     <!-- Night display screen, setting option name to enable night display (renamed "Night Light" with title caps). [CHAR LIMIT=30] -->
     <string name="night_display_title">Night Light</string>
     <!-- Night display screen, description of night display feature (renamed "Night Light" with title caps). [CHAR LIMIT=NONE] -->
     <string name="night_display_text">Night Light tints your screen amber. This makes it easier to look at your screen or read in dim light, and may help you fall asleep more easily.</string>
     <!-- Night display screen, setting option name to configure whether night display turn on/off automatically. [CHAR LIMIT=30] -->
     <string name="night_display_auto_mode_title">Schedule</string>
     <!-- Night display screen, setting option value for night display to *never* turn on/off automatically. [CHAR LIMIT=30] -->
     <string name="night_display_auto_mode_never">None</string>
     <!-- Night display screen, setting option value for night display to turn on/off automatically according to a user defined schedule. [CHAR LIMIT=32] -->
diff --git a/res/xml/display_settings.xml b/res/xml/display_settings.xml
index c48dcbcaef3929d2a9614ec459f01ed323909d98..a79bc28bf9fcbec0c2bcc7cf2e583e840f033aff 100644
--- a/res/xml/display_settings.xml
+++ b/res/xml/display_settings.xml
@@ -114,20 +114,26 @@
             android:title="@string/display_white_balance_title"
             android:summary="@string/display_white_balance_summary"
             settings:controller="com.android.settings.display.DisplayWhiteBalancePreferenceController"/>
 
         <SwitchPreference
             android:key="peak_refresh_rate"
             android:title="@string/peak_refresh_rate_title"
             android:summary="@string/peak_refresh_rate_summary"
             settings:controller="com.android.settings.display.PeakRefreshRatePreferenceController"/>
 
+        <SwitchPreference
+            android:key="touch_sensitivity"
+            android:title="@string/touch_sensitivity_title"
+            android:summary="@string/touch_sensitivity_summary"
+            settings:controller="com.android.settings.display.TouchSensitivityPreferenceController" />
+
         <SwitchPreference
             android:key="show_operator_name"
             android:title="@string/show_operator_name_title"
             android:summary="@string/show_operator_name_summary"/>
 
         <Preference
             android:key="screensaver"
             android:title="@string/screensaver_settings_title"
             android:fragment="com.android.settings.dream.DreamSettings"/>
 
diff --git a/src/com/android/settings/display/TouchSensitivityPreferenceController.java b/src/com/android/settings/display/TouchSensitivityPreferenceController.java
new file mode 100755
index 0000000000000000000000000000000000000000..a6f90f593f0aa95835d780d75d5a07562662afcd
--- /dev/null
+++ b/src/com/android/settings/display/TouchSensitivityPreferenceController.java
@@ -0,0 +1,61 @@
+/*
+ * Copyright (C) 2021 The Proton AOSP Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.display;
+
+import android.content.Context;
+import android.os.SystemProperties;
+import android.provider.Settings;
+
+import com.android.settings.core.TogglePreferenceController;
+import com.android.settings.R;
+
+public class TouchSensitivityPreferenceController extends TogglePreferenceController {
+
+    // Settings can only set the debug.* property, so we need to persist it
+    // in system settings. Match the stock setting name for backup compatibility.
+    private static final String SETTINGS_KEY = "touch_sensitivity_enabled";
+    private static final String PROP_NAME = "debug.touch_sensitivity_mode";
+
+    public TouchSensitivityPreferenceController(Context context, String preferenceKey) {
+        super(context, preferenceKey);
+    }
+
+    @Override
+    public int getAvailabilityStatus() {
+        return mContext.getResources().getBoolean(com.android.internal.R.bool.config_supportGloveMode)
+            ? AVAILABLE
+            : UNSUPPORTED_ON_DEVICE;
+    }
+
+    @Override
+    public boolean setChecked(boolean value) {
+        Settings.Secure.putInt(mContext.getContentResolver(), SETTINGS_KEY, value ? 1 : 0);
+        SystemProperties.set(PROP_NAME, value ? "1" : "0");
+        return true;
+    }
+
+    @Override
+    public boolean isChecked() {
+        // debug prop isn't persistent
+        return Settings.Secure.getInt(mContext.getContentResolver(), SETTINGS_KEY, 0) == 1;
+    }
+
+    @Override
+    public int getSliceHighlightMenuRes() {
+        return R.string.menu_key_display;
+    }
+}

commit 777e2201289e82655f22726a43564b5fff66cbca
Author: Dmitry Muhomor <muhomor.dmitry@gmail.com>
Date:   Fri 2022-01-21 22:05:44+0200

    add link to Sandboxed Google Play settings
---
 res/values/strings.xml | 2 ++
 res/xml/apps.xml       | 9 +++++++++
 2 files changed, 11 insertions(+)

diff --git a/res/values/strings.xml b/res/values/strings.xml
index 3087202fafa95240d2793ba48458370c35c27377..4651570d9f39bcfe113d1b4dbf2bdae2ae264b25 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -13697,11 +13697,13 @@
     <string name="deny_new_usb_summary">Control support for USB peripherals such as input (mice, keyboards, joysticks) and storage devices.</string>
     <string name="keyguard_camera_title">Screen lock camera access</string>
     <string name="keyguard_camera_summary">Allow camera access when the device is locked</string>
     <string name="native_debug_title">Enable native code debugging</string>
     <string name="native_debug_summary">Generate useful logs / bug reports from crashes and permit debugging native code.</string>
     <string name="security_settings_fingerprint_settings_screen_lock_category">Screen lock</string>
     <string name="security_settings_fingerprint_settings_use_fingerprint_unlock_phone_title">Allow fingerprint unlocking</string>
     <string name="security_settings_fingerprint_settings_use_fingerprint_unlock_phone_summary">Allow fingerprints to unlock the screen lock. If this is disabled, fingerprints can still be used in apps.</string>
     <string name="connectivity_check_title">Internet connectivity check</string>
     <string name="connectivity_check_summary">HTTP endpoints to use for performing internet connectivity checks.</string>
+
+    <string name="sandboxed_google_play">Sandboxed Google Play</string>
 </resources>
diff --git a/res/xml/apps.xml b/res/xml/apps.xml
index e6314dab28ad2ba41632453fc2f0ac86a3ae8a3e..8e86a10c5ea2f8cb7f06aabec20f00cab9e0141a 100644
--- a/res/xml/apps.xml
+++ b/res/xml/apps.xml
@@ -84,11 +84,20 @@
         <intent android:action="android.intent.action.MANAGE_UNUSED_APPS"/>
     </Preference>
 
     <Preference
         android:key="special_access"
         android:fragment="com.android.settings.applications.specialaccess.SpecialAccessSettings"
         android:title="@string/special_access"
         android:order="20"
         settings:controller="com.android.settings.applications.SpecialAppAccessPreferenceController"/>
 
+    <Preference
+        android:title="@string/sandboxed_google_play"
+        android:order="-995">
+        <intent
+            android:action="app.grapheneos.gmscompat.SETTINGS_LINK"
+            android:targetPackage="app.grapheneos.gmscompat"
+        />
+    </Preference>
+
 </PreferenceScreen>

commit fd6db0e4b8c4913c8bdde7157fafb36242bf89b6
Author: Dmitry Muhomor <muhomor.dmitry@gmail.com>
Date:   Thu 2022-02-03 16:49:25+0200

    do not allow disabling GmsCompat app
    
    Apps will break if it's disabled, handling this case in code increases
    complexity unnecessarily.
---
 .../settings/applications/appinfo/AppButtonsPreferenceController.java    | 1 +
 1 file changed, 1 insertion(+)

diff --git a/src/com/android/settings/applications/appinfo/AppButtonsPreferenceController.java b/src/com/android/settings/applications/appinfo/AppButtonsPreferenceController.java
index 51ae93459f75d42eccc56b7c7d9fc8a9d3c129b7..232e424083da913af5e4ecda267a4bfd7a4e4b01 100644
--- a/src/com/android/settings/applications/appinfo/AppButtonsPreferenceController.java
+++ b/src/com/android/settings/applications/appinfo/AppButtonsPreferenceController.java
@@ -582,20 +582,21 @@ public class AppButtonsPreferenceController extends BasePreferenceController imp
 
     @VisibleForTesting
     boolean handleDisableable() {
         boolean disableable = false;
         // Try to prevent the user from bricking their phone
         // by not allowing disabling of apps signed with the
         // system cert and any launcher app in the system.
         if (mHomePackages.contains(mAppEntry.info.packageName)
                 || mAppEntry.info.packageName.equals("com.android.inputmethod.latin")
                 || mAppEntry.info.packageName.equals("app.vanadium.webview")
+                || mAppEntry.info.packageName.equals("app.grapheneos.gmscompat")
                 || isSystemPackage(mActivity.getResources(), mPm, mPackageInfo)) {
             // Disable button for core system applications.
             mButtonsPref.setButton2Text(R.string.disable_text)
                     .setButton2Icon(R.drawable.ic_settings_disable);
         } else if (mAppEntry.info.enabled && !isDisabledUntilUsed()) {
             mButtonsPref.setButton2Text(R.string.disable_text)
                     .setButton2Icon(R.drawable.ic_settings_disable);
             disableable = !mApplicationFeatureProvider.getKeepEnabledPackages()
                     .contains(mAppEntry.info.packageName);
         } else {

commit e864de634eb72fc9073fe762901593377d2365f7
Author: Luca Stefani <luca.stefani.ge1@gmail.com>
Date:   Tue 2018-01-23 22:27:43+0100

    Add package name to installed app details
    
    Change-Id: I8ce737ec5150f37e61240d8053403046ca9317fb
---
 res/xml/app_info_settings.xml                      |  9 ++++++-
 .../appinfo/AppInfoDashboardFragment.java          |  1 +
 .../AppPackageNamePreferenceController.java (new)  | 31 ++++++++++++++++++++++
 3 files changed, 40 insertions(+), 1 deletion(-)

diff --git a/res/xml/app_info_settings.xml b/res/xml/app_info_settings.xml
index 14429607ec2735c79bca9334e83c70041ecc0720..49962f98a349890d8802c30b25906cbf29006b1c 100644
--- a/res/xml/app_info_settings.xml
+++ b/res/xml/app_info_settings.xml
@@ -193,16 +193,23 @@
         <Preference
             android:key="app_info_store"
             android:title="@string/app_install_details_title"
             settings:controller="com.android.settings.applications.appinfo.AppInstallerInfoPreferenceController" />
 
     </PreferenceCategory>
 
     <Preference
         android:key="app_version"
         android:selectable="false"
-        android:order="9999"
+        android:order="9998"
         settings:controller="com.android.settings.applications.appinfo.AppVersionPreferenceController"
         settings:allowDividerAbove="true"
         settings:enableCopying="true"/>
 
+    <Preference
+        android:key="app_package_name"
+        android:selectable="false"
+        android:order="9999"
+        settings:controller="com.android.settings.applications.appinfo.AppPackageNamePreferenceController"
+        settings:enableCopying="true"/>
+
 </PreferenceScreen>
diff --git a/src/com/android/settings/applications/appinfo/AppInfoDashboardFragment.java b/src/com/android/settings/applications/appinfo/AppInfoDashboardFragment.java
index e1ea8e47afa32b0b7dfe4a2099004ee0ec04a160..ed82166036af18ee53a0e529414288190d99b8eb 100755
--- a/src/com/android/settings/applications/appinfo/AppInfoDashboardFragment.java
+++ b/src/com/android/settings/applications/appinfo/AppInfoDashboardFragment.java
@@ -157,20 +157,21 @@ public class AppInfoDashboardFragment extends DashboardFragment
                 .setPackageName(packageName)
                 .setParentFragment(this);
 
         use(AppPermissionPreferenceController.class).setParentFragment(this);
         use(AppPermissionPreferenceController.class).setPackageName(packageName);
         use(AppSettingPreferenceController.class)
                 .setPackageName(packageName)
                 .setParentFragment(this);
         use(AppStoragePreferenceController.class).setParentFragment(this);
         use(AppVersionPreferenceController.class).setParentFragment(this);
+        use(AppPackageNamePreferenceController.class).setParentFragment(this);
         use(InstantAppDomainsPreferenceController.class).setParentFragment(this);
         use(ExtraAppInfoPreferenceController.class).setPackageName(packageName);
 
         final HibernationSwitchPreferenceController appHibernationSettings =
                 use(HibernationSwitchPreferenceController.class);
         appHibernationSettings.setParentFragment(this);
         appHibernationSettings.setPackage(packageName);
         use(AppHibernationPreferenceCategoryController.class).setChildren(
                 Arrays.asList(appHibernationSettings));
 
diff --git a/src/com/android/settings/applications/appinfo/AppPackageNamePreferenceController.java b/src/com/android/settings/applications/appinfo/AppPackageNamePreferenceController.java
new file mode 100644
index 0000000000000000000000000000000000000000..bd4f12f508811a073c296b83464ea76b3636d371
--- /dev/null
+++ b/src/com/android/settings/applications/appinfo/AppPackageNamePreferenceController.java
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2018 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.applications.appinfo;
+
+import android.content.Context;
+
+public class AppPackageNamePreferenceController extends AppInfoPreferenceControllerBase {
+
+    public AppPackageNamePreferenceController(Context context, String key) {
+        super(context, key);
+    }
+
+    @Override
+    public CharSequence getSummary() {
+        return mParent.getPackageInfo().packageName;
+    }
+}

commit 99018fc159046f5817bf09c51a2af3237cbbce1f
Author: flawedworld <flawedworld@flawed.world>
Date:   Sat 2022-02-05 17:42:07+0000

    add GrapheneOS icon
---
 AndroidManifest.xml                           |  3 ++-
 res/drawable/ic_launcher_foreground.xml (new) | 27 +++++++++++++++++++++++++++
 res/mipmap-anydpi/ic_launcher.xml (new)       |  5 +++++
 res/mipmap-anydpi/ic_launcher_round.xml (new) |  5 +++++
 res/values/ic_launcher_background.xml (new)   |  4 ++++
 5 files changed, 43 insertions(+), 1 deletion(-)

diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index c84132fd437139390ad936d1e71b6700e12b20b7..4933180e01304b84348e61826769cde83fe7eedf 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -106,21 +106,22 @@
     <uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW" />
     <uses-permission android:name="android.permission.READ_DREAM_STATE" />
     <uses-permission android:name="android.permission.READ_DREAM_SUPPRESSION" />
     <uses-permission android:name="android.permission.MANAGE_APP_HIBERNATION" />
     <uses-permission android:name="android.permission.LAUNCH_MULTI_PANE_SETTINGS_DEEP_LINK" />
     <uses-permission android:name="android.permission.ALLOW_PLACE_IN_MULTI_PANE_SETTINGS" />
 
     <application
             android:name=".SettingsApplication"
             android:label="@string/settings_label"
-            android:icon="@drawable/ic_launcher_settings"
+            android:icon="@mipmap/ic_launcher"
+            android:roundIcon="@mipmap/ic_launcher_round"
             android:theme="@style/Theme.Settings"
             android:hardwareAccelerated="true"
             android:requiredForAllUsers="true"
             android:supportsRtl="true"
             android:backupAgent="com.android.settings.backup.SettingsBackupHelper"
             android:usesCleartextTraffic="true"
             android:defaultToDeviceProtectedStorage="true"
             android:directBootAware="true"
             android:appComponentFactory="androidx.core.app.CoreComponentFactory">
 
diff --git a/res/drawable/ic_launcher_foreground.xml b/res/drawable/ic_launcher_foreground.xml
new file mode 100644
index 0000000000000000000000000000000000000000..43a50071e0cb897b0dfb4cd8e1e4eaa1c4a07d87
--- /dev/null
+++ b/res/drawable/ic_launcher_foreground.xml
@@ -0,0 +1,27 @@
+<!--
+  Copyright (C) 2021 Google Inc.
+  Licensed under the Apache License, Version 2.0 (the "License");
+  you may not use this file except in compliance with the License.
+  You may obtain a copy of the License at
+    http://www.apache.org/licenses/LICENSE-2.0
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+  -->
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+  android:width="108dp"
+  android:height="108dp"
+  android:viewportWidth="108"
+  android:viewportHeight="108"
+  android:tint="?attr/colorControlNormal">
+<group android:scaleX="2.25"
+    android:scaleY="2.25"
+    android:translateX="27"
+    android:translateY="27">
+  <path
+      android:fillColor="@android:color/black"
+      android:pathData="M19.44,12.99l-0.01,0.02c0.04,-0.33 0.08,-0.67 0.08,-1.01 0,-0.34 -0.03,-0.66 -0.07,-0.99l0.01,0.02 2.44,-1.92 -2.43,-4.22 -2.87,1.16 0.01,0.01c-0.52,-0.4 -1.09,-0.74 -1.71,-1h0.01L14.44,2H9.57l-0.44,3.07h0.01c-0.62,0.26 -1.19,0.6 -1.71,1l0.01,-0.01 -2.88,-1.17 -2.44,4.22 2.44,1.92 0.01,-0.02c-0.04,0.33 -0.07,0.65 -0.07,0.99 0,0.34 0.03,0.68 0.08,1.01l-0.01,-0.02 -2.1,1.65 -0.33,0.26 2.43,4.2 2.88,-1.15 -0.02,-0.04c0.53,0.41 1.1,0.75 1.73,1.01h-0.03L9.58,22h4.85s0.03,-0.18 0.06,-0.42l0.38,-2.65h-0.01c0.62,-0.26 1.2,-0.6 1.73,-1.01l-0.02,0.04 2.88,1.15 2.43,-4.2s-0.14,-0.12 -0.33,-0.26l-2.11,-1.66zM12,15.5c-1.93,0 -3.5,-1.57 -3.5,-3.5s1.57,-3.5 3.5,-3.5 3.5,1.57 3.5,3.5 -1.57,3.5 -3.5,3.5z"/>
+</group>
+</vector>
diff --git a/res/mipmap-anydpi/ic_launcher.xml b/res/mipmap-anydpi/ic_launcher.xml
new file mode 100644
index 0000000000000000000000000000000000000000..a8a8fa5518fcdb2db0385028800968b2667af71e
--- /dev/null
+++ b/res/mipmap-anydpi/ic_launcher.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
+    <background android:drawable="@color/ic_launcher_background" />
+    <foreground android:drawable="@drawable/ic_launcher_foreground" />
+</adaptive-icon>
diff --git a/res/mipmap-anydpi/ic_launcher_round.xml b/res/mipmap-anydpi/ic_launcher_round.xml
new file mode 100644
index 0000000000000000000000000000000000000000..a8a8fa5518fcdb2db0385028800968b2667af71e
--- /dev/null
+++ b/res/mipmap-anydpi/ic_launcher_round.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
+    <background android:drawable="@color/ic_launcher_background" />
+    <foreground android:drawable="@drawable/ic_launcher_foreground" />
+</adaptive-icon>
diff --git a/res/values/ic_launcher_background.xml b/res/values/ic_launcher_background.xml
new file mode 100644
index 0000000000000000000000000000000000000000..f42ada656ee26e30d170aaa67989f0f15c1a300b
--- /dev/null
+++ b/res/values/ic_launcher_background.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <color name="ic_launcher_background">#FFFFFF</color>
+</resources>

commit 811f5c46adf70f5f46f84ea1d9978f64426df18f
Author: smdyv <88971341+smdyv@users.noreply.github.com>
Date:   Wed 2022-02-09 12:24:56+0100

    Replace launcher icon
---
 res/drawable/ic_launcher_foreground.xml | 29 ++++++++++++++++-------------
 1 file changed, 16 insertions(+), 13 deletions(-)

diff --git a/res/drawable/ic_launcher_foreground.xml b/res/drawable/ic_launcher_foreground.xml
index 43a50071e0cb897b0dfb4cd8e1e4eaa1c4a07d87..3a707cae45dfd9eb292aac4b04eec49bd0074386 100644
--- a/res/drawable/ic_launcher_foreground.xml
+++ b/res/drawable/ic_launcher_foreground.xml
@@ -1,27 +1,30 @@
 <!--
   Copyright (C) 2021 Google Inc.
+
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
+
     http://www.apache.org/licenses/LICENSE-2.0
+
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
   -->
 <vector xmlns:android="http://schemas.android.com/apk/res/android"
-  android:width="108dp"
-  android:height="108dp"
-  android:viewportWidth="108"
-  android:viewportHeight="108"
-  android:tint="?attr/colorControlNormal">
-<group android:scaleX="2.25"
-    android:scaleY="2.25"
-    android:translateX="27"
-    android:translateY="27">
-  <path
-      android:fillColor="@android:color/black"
-      android:pathData="M19.44,12.99l-0.01,0.02c0.04,-0.33 0.08,-0.67 0.08,-1.01 0,-0.34 -0.03,-0.66 -0.07,-0.99l0.01,0.02 2.44,-1.92 -2.43,-4.22 -2.87,1.16 0.01,0.01c-0.52,-0.4 -1.09,-0.74 -1.71,-1h0.01L14.44,2H9.57l-0.44,3.07h0.01c-0.62,0.26 -1.19,0.6 -1.71,1l0.01,-0.01 -2.88,-1.17 -2.44,4.22 2.44,1.92 0.01,-0.02c-0.04,0.33 -0.07,0.65 -0.07,0.99 0,0.34 0.03,0.68 0.08,1.01l-0.01,-0.02 -2.1,1.65 -0.33,0.26 2.43,4.2 2.88,-1.15 -0.02,-0.04c0.53,0.41 1.1,0.75 1.73,1.01h-0.03L9.58,22h4.85s0.03,-0.18 0.06,-0.42l0.38,-2.65h-0.01c0.62,-0.26 1.2,-0.6 1.73,-1.01l-0.02,0.04 2.88,1.15 2.43,-4.2s-0.14,-0.12 -0.33,-0.26l-2.11,-1.66zM12,15.5c-1.93,0 -3.5,-1.57 -3.5,-3.5s1.57,-3.5 3.5,-3.5 3.5,1.57 3.5,3.5 -1.57,3.5 -3.5,3.5z"/>
-</group>
+    android:width="108dp"
+    android:height="108dp"
+    android:viewportWidth="108"
+    android:viewportHeight="108">
+    <group
+        android:scaleX="2.277"
+        android:scaleY="2.277"
+        android:translateX="26.676"
+        android:translateY="26.676">
+        <path
+            android:fillColor="#000000"
+            android:pathData="M19.5,12c0,-0.23 -0.01,-0.45 -0.03,-0.68l1.86,-1.41c0.4,-0.3 0.51,-0.86 0.26,-1.3l-1.87,-3.23c-0.25,-0.44 -0.79,-0.62 -1.25,-0.42l-2.15,0.91c-0.37,-0.26 -0.76,-0.49 -1.17,-0.68l-0.29,-2.31C14.8,2.38 14.37,2 13.87,2h-3.73C9.63,2 9.2,2.38 9.14,2.88L8.85,5.19c-0.41,0.19 -0.8,0.42 -1.17,0.68L5.53,4.96c-0.46,-0.2 -1,-0.02 -1.25,0.42L2.41,8.62c-0.25,0.44 -0.14,0.99 0.26,1.3l1.86,1.41C4.51,11.55 4.5,11.77 4.5,12s0.01,0.45 0.03,0.68l-1.86,1.41c-0.4,0.3 -0.51,0.86 -0.26,1.3l1.87,3.23c0.25,0.44 0.79,0.62 1.25,0.42l2.15,-0.91c0.37,0.26 0.76,0.49 1.17,0.68l0.29,2.31C9.2,21.62 9.63,22 10.13,22h3.73c0.5,0 0.93,-0.38 0.99,-0.88l0.29,-2.31c0.41,-0.19 0.8,-0.42 1.17,-0.68l2.15,0.91c0.46,0.2 1,0.02 1.25,-0.42l1.87,-3.23c0.25,-0.44 0.14,-0.99 -0.26,-1.3l-1.86,-1.41C19.49,12.45 19.5,12.23 19.5,12zM12.04,15.5c-1.93,0 -3.5,-1.57 -3.5,-3.5s1.57,-3.5 3.5,-3.5s3.5,1.57 3.5,3.5S13.97,15.5 12.04,15.5z" />
+    </group>
 </vector>

commit 0d94e4438df48391b294a05a5e732559cd499905 (HEAD, tag: SP2A.220305.012.2022030801, m/master, grapheneos/12.1)
Author: flawedworld <flawedworld@flawed.world>
Date:   Sat 2022-03-05 17:37:47+0000

    Show Hardware SKU in About Phone
---
 res/values/strings.xml                             |  2 +
 res/xml/hardware_info.xml                          |  9 ++++
 .../HardwareSkuPreferenceController.java (new)     | 54 ++++++++++++++++++++++
 3 files changed, 65 insertions(+)

diff --git a/res/values/strings.xml b/res/values/strings.xml
index 4651570d9f39bcfe113d1b4dbf2bdae2ae264b25..5db5e7c97dffbf134453af912f24ef0f66b22ea5 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -3408,20 +3408,22 @@
     <!-- About phone screen, show when a value of some status item is unavailable. -->
     <string name="device_info_not_available">Not available</string>
     <!-- About phone screen, phone status screen title -->
     <string name="device_status_activity_title">Status</string>
     <!-- About phone screen, title of the item to go into the Phone status screen -->
     <string name="device_status">Status</string>
     <!-- About tablet screen, summary of the item that takes you to tablet status screen -->
     <string name="device_status_summary" product="tablet">Status of the battery, network, and other information</string>
     <!-- About phone screen, summary of the item to go into the phone status screen -->
     <string name="device_status_summary" product="default">Phone number, signal, etc.</string>
+    <!-- Do not translate. About phone, status item title -->
+    <string name="hardware_sku">Hardware SKU</string>
     <!-- Main settings screen item's title to go into the storage settings screen [CHAR LIMIT=25] -->
     <string name="storage_settings" >Storage</string>
     <!-- Settings title that shows user how much storage and cache space an App is taking [CHAR LIMIT=50] -->
     <string name="storage_settings_for_app" >Storage &amp; cache</string>
     <!-- Main settings screen item's title to go into the storage & USB settings screen [CHAR LIMIT=25] -->
     <string name="storage_usb_settings" >Storage</string>
     <!-- Storage settings screen title -->
     <string name="storage_settings_title">Storage settings</string>
     <!-- [CHAR LIMIT=100] Main settings screen item's summary for the SD card and storage settings -->
     <string name="storage_settings_summary" product="nosdcard">Unmount USB storage, view available storage</string>
diff --git a/res/xml/hardware_info.xml b/res/xml/hardware_info.xml
index 10de2990ae802cc32bb809bd0ec6e65301fc2fc5..a3d8bbf3e3b749e6d2b55853c92da39f22d17d8e 100644
--- a/res/xml/hardware_info.xml
+++ b/res/xml/hardware_info.xml
@@ -41,11 +41,20 @@
 
     <!-- Hardware revision -->
     <Preference
         android:key="hardware_info_device_revision"
         android:title="@string/hardware_revision"
         android:summary="@string/summary_placeholder"
         android:selectable="false"
         settings:controller="com.android.settings.deviceinfo.hardwareinfo.HardwareRevisionPreferenceController"
         settings:enableCopying="true"/>
 
+    <!-- Device SKU -->
+    <Preference
+        android:key="hardware_info_device_sku"
+        android:title="@string/hardware_sku"
+        android:summary="@string/summary_placeholder"
+        android:selectable="false"
+        settings:controller="com.android.settings.deviceinfo.hardwareinfo.HardwareSkuPreferenceController"
+        settings:enableCopying="true"/>
+
 </PreferenceScreen>
diff --git a/src/com/android/settings/deviceinfo/hardwareinfo/HardwareSkuPreferenceController.java b/src/com/android/settings/deviceinfo/hardwareinfo/HardwareSkuPreferenceController.java
new file mode 100644
index 0000000000000000000000000000000000000000..2381d8a75c37482ef63fbcf0dc35a3644b93fc5d
--- /dev/null
+++ b/src/com/android/settings/deviceinfo/hardwareinfo/HardwareSkuPreferenceController.java
@@ -0,0 +1,54 @@
+/*
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.deviceinfo.hardwareinfo;
+
+import android.content.Context;
+import android.os.SystemProperties;
+import android.text.TextUtils;
+
+import com.android.settings.R;
+import com.android.settings.core.BasePreferenceController;
+import com.android.settings.slices.Sliceable;
+
+public class HardwareSkuPreferenceController extends BasePreferenceController {
+
+    public HardwareSkuPreferenceController(Context context, String preferenceKey) {
+        super(context, preferenceKey);
+    }
+
+    @Override
+    public int getAvailabilityStatus() {
+        return mContext.getResources().getBoolean(R.bool.config_show_device_model) &&
+                !TextUtils.isEmpty(getSummary()) ? AVAILABLE : UNSUPPORTED_ON_DEVICE;
+    }
+
+    @Override
+    public boolean useDynamicSliceSummary() {
+        return true;
+    }
+
+    @Override
+    public void copy() {
+        Sliceable.setCopyContent(mContext, getSummary(),
+                mContext.getText(R.string.hardware_sku));
+    }
+
+    @Override
+    public CharSequence getSummary() {
+        return SystemProperties.get("ro.boot.hardware.sku");
+    }
+}
