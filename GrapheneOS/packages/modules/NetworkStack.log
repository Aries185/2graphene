commit 9004b50b88d01b60d883e1639e707e47f1de6a4e
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Wed 2020-11-25 03:54:51-0500

    default to GrapheneOS connectivity check server
---
 res/values/config.xml | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/res/values/config.xml b/res/values/config.xml
index d6a11abe196fa157b908a1ccd67f7c8de856032b..c86935f3b57116aad1e143d8ca40cabcf42c6d81 100644
--- a/res/values/config.xml
+++ b/res/values/config.xml
@@ -6,40 +6,40 @@
     The overlays must apply to the config_* values, not the default_* values. The default_*
     values are meant to be the default when no other configuration is specified.
     -->
     <!-- HTTP URL for network validation, to use for detecting captive portals. -->
     <!-- default_captive_portal_http_url is not configured as overlayable so
          OEMs that wish to change captive_portal_http_url configuration must
          do so via configuring runtime resource overlay to
          config_captive_portal_http_url and *NOT* by changing or overlaying
          this resource. It will break if the enforcement of overlayable starts.
          -->
-    <string name="default_captive_portal_http_url" translatable="false">http://connectivitycheck.gstatic.com/generate_204</string>
+    <string name="default_captive_portal_http_url" translatable="false">http://connectivitycheck.grapheneos.network/generate_204</string>
     <!-- HTTPS URL for network validation, to use for confirming internet connectivity. -->
     <!-- default_captive_portal_https_url is not configured as overlayable so
          OEMs that wish to change captive_portal_https_url configuration must
          do so via configuring runtime resource overlay to
          config_captive_portal_https_url and *NOT* by changing or overlaying
          this resource. It will break if the enforcement of overlayable starts.
          -->
-    <string name="default_captive_portal_https_url" translatable="false">https://www.google.com/generate_204</string>
+    <string name="default_captive_portal_https_url" translatable="false">https://connectivitycheck.grapheneos.network/generate_204</string>
 
     <!-- List of fallback URLs to use for detecting captive portals. -->
     <!-- default_captive_portal_fallback_urls is not configured as overlayable
          so OEMs that wish to change captive_portal_fallback_urls configuration
          must do so via configuring runtime resource overlay to
          config_captive_portal_fallback_urls and *NOT* by changing or overlaying
          this resource. It will break if the enforcement of overlayable starts.
          -->
     <string-array name="default_captive_portal_fallback_urls" translatable="false">
-        <item>http://www.google.com/gen_204</item>
-        <item>http://play.googleapis.com/generate_204</item>
+        <item>http://grapheneos.online/gen_204</item>
+        <item>http://grapheneos.online/generate_204</item>
     </string-array>
     <!-- Configuration hooks for the above settings.
          Empty by default but may be overridden by RROs. -->
     <integer name="config_captive_portal_dns_probe_timeout"></integer>
     <!--suppress CheckTagEmptyBody: overlayable resource to use as configuration hook -->
     <string name="config_captive_portal_http_url" translatable="false"></string>
     <!--suppress CheckTagEmptyBody: overlayable resource to use as configuration hook -->
     <string name="config_captive_portal_https_url" translatable="false"></string>
     <!-- Literal commas are not allowed in the url configuration because they
          are used as a separator internally. -->

commit 561b45b730b4a4d78dfd827109757d34c3a85008
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Wed 2020-11-25 06:30:31-0500

    remove China connectivity server overlay
    
    This will need to be handled differently.
---
 res/values-mcc460/config.xml (gone) | 24 ------------------------
 1 file changed, 24 deletions(-)

diff --git a/res/values-mcc460/config.xml b/res/values-mcc460/config.xml
deleted file mode 100644
index 2863edd734c10b5325750152756ea4ee7d0fda76..0000000000000000000000000000000000000000
--- a/res/values-mcc460/config.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<resources>
-    <!-- Network validation URL configuration for devices using a Chinese SIM (MCC 460).
-         The below URLs are often whitelisted by captive portals, so they should not be used in the
-         general case as this could degrade the user experience (portals not detected properly).
-         However in China the default URLs are not accessible in general. The below alternatives
-         should allow users to connect to local networks normally. -->
-    <!-- default_captive_portal_https_url is not configured as overlayable so
-         OEMs that wish to change captive_portal_https_url configuration must
-         do so via configuring runtime resource overlay to
-         config_captive_portal_https_url and *NOT* by changing or overlaying
-         this resource. It will break if the enforcement of overlayable starts.
-         -->
-    <string name="default_captive_portal_https_url" translatable="false">https://connectivitycheck.gstatic.com/generate_204</string>
-    <!-- default_captive_portal_fallback_urls is not configured as overlayable
-         so OEMs that wish to change captive_portal_fallback_urls configuration
-         must do so via configuring runtime resource overlay to
-         config_captive_portal_fallback_urls and *NOT* by changing or overlaying
-         this resource. It will break if the enforcement of overlayable starts.
-         -->
-    <string-array name="default_captive_portal_fallback_urls" translatable="false">
-        <item>http://www.googleapis.cn/generate_204</item>
-    </string-array>
-</resources>

commit e2b33d4d19f7489779d3fcfe78855077bbdef528
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Mon 2020-12-28 20:57:14-0500

    update unused hard-wired fallback URLs
---
 src/android/net/util/NetworkStackUtils.java | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/android/net/util/NetworkStackUtils.java b/src/android/net/util/NetworkStackUtils.java
index 94de7c3979e56a40e8282a20c5729a276734673d..c73ca517032417e6548164c3af5398110312d5f1 100755
--- a/src/android/net/util/NetworkStackUtils.java
+++ b/src/android/net/util/NetworkStackUtils.java
@@ -163,28 +163,28 @@ public class NetworkStackUtils {
      * List of fallback probe specs to use for detecting captive portals. This is an alternative to
      * fallback URLs that provides more flexibility on detection rules. Empty, so unused by default.
      */
     public static final String[] DEFAULT_CAPTIVE_PORTAL_FALLBACK_PROBE_SPECS =
             new String[] {};
 
     /**
      * The default list of HTTP URLs to use for detecting captive portals.
      */
     public static final String[] DEFAULT_CAPTIVE_PORTAL_HTTP_URLS =
-            new String [] {"http://connectivitycheck.gstatic.com/generate_204"};
+            new String [] {"http://connectivitycheck.grapheneos.network/generate_204"};
 
     /**
      * The default list of HTTPS URLs for network validation, to use for confirming internet
      * connectivity.
      */
     public static final String[] DEFAULT_CAPTIVE_PORTAL_HTTPS_URLS =
-            new String [] {"https://www.google.com/generate_204"};
+            new String [] {"https://connectivitycheck.grapheneos.network/generate_204"};
 
     /**
      * @deprecated Considering boolean experiment flag is likely to cause misconfiguration
      *             particularly when NetworkStack module rolls back to previous version. It's
      *             much safer to determine whether or not to enable one specific experimental
      *             feature by comparing flag version with module version.
      */
     @Deprecated
     public static final String DHCP_INIT_REBOOT_ENABLED = "dhcp_init_reboot_enabled";
 

commit 1af8ee8f7017ebec8bf7b1507b3ed8cfa71af9b5 (HEAD, tag: RQ3A.210705.001.2021.07.07.19, m/master)
Author: Pratyush <39559233+empratyush@users.noreply.github.com>
Date:   Thu 2021-05-20 13:21:31+0530

    avoid reusing DHCP state for full MAC randomization
---
 src/android/net/dhcp/DhcpClient.java | 30 +++++++++++++++++++++++++++++-
 1 file changed, 29 insertions(+), 1 deletion(-)

diff --git a/src/android/net/dhcp/DhcpClient.java b/src/android/net/dhcp/DhcpClient.java
index 4fedf30893c5b9de9926694c966b25de3c99689b..5b613a2aa50ecdcb4760ea20dbcbf9cb91970fe1 100644
--- a/src/android/net/dhcp/DhcpClient.java
+++ b/src/android/net/dhcp/DhcpClient.java
@@ -67,20 +67,23 @@ import android.net.ipmemorystore.NetworkAttributes;
 import android.net.ipmemorystore.OnNetworkAttributesRetrievedListener;
 import android.net.ipmemorystore.OnStatusListener;
 import android.net.metrics.DhcpClientEvent;
 import android.net.metrics.DhcpErrorEvent;
 import android.net.metrics.IpConnectivityLog;
 import android.net.util.HostnameTransliterator;
 import android.net.util.InterfaceParams;
 import android.net.util.NetworkStackUtils;
 import android.net.util.PacketReader;
 import android.net.util.SocketUtils;
+import android.net.wifi.WifiConfiguration;
+import android.net.wifi.WifiInfo;
+import android.net.wifi.WifiManager;
 import android.os.Build;
 import android.os.Handler;
 import android.os.Message;
 import android.os.PowerManager;
 import android.os.SystemClock;
 import android.provider.Settings;
 import android.stats.connectivity.DhcpFeature;
 import android.system.ErrnoException;
 import android.system.Os;
 import android.util.EventLog;
@@ -104,20 +107,22 @@ import com.android.networkstack.apishim.common.ShimUtils;
 import com.android.networkstack.arp.ArpPacket;
 import com.android.networkstack.metrics.IpProvisioningMetrics;
 
 import java.io.FileDescriptor;
 import java.io.IOException;
 import java.net.Inet4Address;
 import java.net.SocketAddress;
 import java.net.SocketException;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
+import java.util.ArrayList;
+import java.util.List;
 import java.util.Random;
 
 /**
  * A DHCPv4 client.
  *
  * Written to behave similarly to the DhcpStateMachine + dhcpcd 5.5.6 combination used in Android
  * 5.1 and below, as configured on Nexus 6. The interface is the same as DhcpStateMachine.
  *
  * TODO:
  *
@@ -1191,21 +1196,21 @@ public class DhcpClient extends StateMachine {
 
                 case EVENT_CONFIGURATION_OBTAINED:
                     final long currentTime = System.currentTimeMillis();
                     NetworkAttributes attributes = (NetworkAttributes) message.obj;
                     if (DBG) {
                         Log.d(TAG, "l2key: "         + mConfiguration.l2Key
                                 + " lease address: " + attributes.assignedV4Address
                                 + " lease expiry: "  + attributes.assignedV4AddressExpiry
                                 + " current time: "  + currentTime);
                     }
-                    if (currentTime >= attributes.assignedV4AddressExpiry) {
+                    if (currentTime >= attributes.assignedV4AddressExpiry || shouldAvoidStateReuse()) {
                         // Lease has expired.
                         transitionTo(mDhcpInitState);
                         return HANDLED;
                     }
                     mLastAssignedIpv4Address = attributes.assignedV4Address;
                     mLastAssignedIpv4AddressExpiry = attributes.assignedV4AddressExpiry;
                     transitionTo(mDhcpInitRebootState);
                     return HANDLED;
 
                 default:
@@ -1216,20 +1221,43 @@ public class DhcpClient extends StateMachine {
 
         @Override
         public void exit() {
             super.exit();
             removeMessages(EVENT_CONFIGURATION_INVALID);
             removeMessages(EVENT_CONFIGURATION_TIMEOUT);
             removeMessages(EVENT_CONFIGURATION_OBTAINED);
         }
     }
 
+    private static final int RANDOMIZATION_ALWAYS = 100;
+
+    private boolean shouldAvoidStateReuse() {
+        try {
+            WifiManager wifiManager = (WifiManager) mContext.getSystemService(Context.WIFI_SERVICE);
+            WifiInfo wifiInfo =  wifiManager.getConnectionInfo();
+            if (wifiInfo != null) {
+                int connectedNetworkId = wifiInfo.getNetworkId();
+                List<WifiConfiguration> configurationList = wifiManager.getConfiguredNetworks();
+                for (WifiConfiguration configuration : configurationList){
+                    if (configuration.networkId == connectedNetworkId){
+                        return configuration.macRandomizationSetting == RANDOMIZATION_ALWAYS;
+                    }
+                }
+            }
+        } catch (Exception e) {
+            loge(e.getLocalizedMessage(), e);
+        }
+
+        loge("ConfiguredNetworks should contain Connected network id config");
+        return true;
+    }
+
     private void receiveOfferOrAckPacket(final DhcpPacket packet, final boolean acceptRapidCommit) {
         if (!isValidPacket(packet)) return;
 
         // 1. received the DHCPOFFER packet, process it by following RFC2131.
         // 2. received the DHCPACK packet from DHCP Servers that support Rapid
         //    Commit option, process it by following RFC4039.
         if (packet instanceof DhcpOfferPacket) {
             mOffer = packet.toDhcpResults();
             if (mOffer != null) {
                 Log.d(TAG, "Got pending lease: " + mOffer);
