commit 04232c6b6fb3db17b765538d21d61637ee957723 (HEAD, tag: SP1A.211105.002.2021110617, m/master, grapheneos/12)
Author: renlord <me@renlord.com>
Date:   Fri 2021-10-15 19:11:18+0530

    add support for always generating new random MAC
    
    To trigger re-generation of randomized MAC addressed for an already
    connected AP. User simply has to toggle on/off wifi. Otherwise, on
    re-connection, a new randomized MAC address also gets generated.
    
    based on https://github.com/GrapheneOS/platform_frameworks_opt_net_wifi/commit/a0d9bda06b71694f38fe02bbe24628ee21a7d270
---
 .../android/wifitrackerlib/StandardWifiEntry.java  | 31 ++++++++++++++++------
 .../src/com/android/wifitrackerlib/WifiEntry.java  |  1 +
 2 files changed, 24 insertions(+), 8 deletions(-)

diff --git a/libs/WifiTrackerLib/src/com/android/wifitrackerlib/StandardWifiEntry.java b/libs/WifiTrackerLib/src/com/android/wifitrackerlib/StandardWifiEntry.java
index 994331a69543c3252fae69e89fba22a60d27019f..002617727cd8baff8060ea70d4036eb1cf850526 100644
--- a/libs/WifiTrackerLib/src/com/android/wifitrackerlib/StandardWifiEntry.java
+++ b/libs/WifiTrackerLib/src/com/android/wifitrackerlib/StandardWifiEntry.java
@@ -247,21 +247,21 @@ public class StandardWifiEntry extends WifiEntry {
 
     @Override
     public synchronized String getMacAddress() {
         if (mWifiInfo != null) {
             final String wifiInfoMac = mWifiInfo.getMacAddress();
             if (!TextUtils.isEmpty(wifiInfoMac)
                     && !TextUtils.equals(wifiInfoMac, DEFAULT_MAC_ADDRESS)) {
                 return wifiInfoMac;
             }
         }
-        if (mTargetWifiConfig == null || getPrivacy() != PRIVACY_RANDOMIZED_MAC) {
+        if (mTargetWifiConfig == null || getPrivacy() == PRIVACY_DEVICE_MAC) {
             final String[] factoryMacs = mWifiManager.getFactoryMacAddresses();
             if (factoryMacs.length > 0) {
                 return factoryMacs[0];
             }
             return null;
         }
         return mTargetWifiConfig.getRandomizedMacAddress().toString();
     }
 
     @Override
@@ -501,40 +501,55 @@ public class StandardWifiEntry extends WifiEntry {
     }
 
     @Override
     public boolean canSetPrivacy() {
         return isSaved();
     }
 
     @Override
     @Privacy
     public synchronized int getPrivacy() {
-        if (mTargetWifiConfig != null
-                && mTargetWifiConfig.macRandomizationSetting
-                == WifiConfiguration.RANDOMIZATION_NONE) {
-            return PRIVACY_DEVICE_MAC;
+        if (mTargetWifiConfig != null) {
+            switch(mTargetWifiConfig.macRandomizationSetting) {
+                case WifiConfiguration.RANDOMIZATION_NONE:
+                    return PRIVACY_DEVICE_MAC;
+                case WifiConfiguration.RANDOMIZATION_PERSISTENT:
+                    return PRIVACY_RANDOMIZED_MAC;
+                default:
+                    return PRIVACY_RANDOMIZATION_ALWAYS;
+            }
         } else {
-            return PRIVACY_RANDOMIZED_MAC;
+            return PRIVACY_RANDOMIZATION_ALWAYS;
         }
     }
 
     @Override
     public synchronized void setPrivacy(int privacy) {
         if (!canSetPrivacy()) {
             return;
         }
 
-        mTargetWifiConfig.macRandomizationSetting = privacy == PRIVACY_RANDOMIZED_MAC
-                ? WifiConfiguration.RANDOMIZATION_AUTO : WifiConfiguration.RANDOMIZATION_NONE;
+        mTargetWifiConfig.macRandomizationSetting = translatePrivacyToWifiConfigurationValues(privacy);
         mWifiManager.save(mTargetWifiConfig, null /* listener */);
     }
 
+    private static int translatePrivacyToWifiConfigurationValues(int privacy_value) {
+        switch(privacy_value) {
+            case PRIVACY_RANDOMIZED_MAC:
+                return WifiConfiguration.RANDOMIZATION_PERSISTENT;
+            case PRIVACY_DEVICE_MAC:
+                return WifiConfiguration.RANDOMIZATION_NONE;
+            default:
+                return WifiConfiguration.RANDOMIZATION_ALWAYS;
+        }
+    }
+
     @Override
     public synchronized boolean isAutoJoinEnabled() {
         if (mTargetWifiConfig == null) {
             return false;
         }
 
         return mTargetWifiConfig.allowAutojoin;
     }
 
     @Override
diff --git a/libs/WifiTrackerLib/src/com/android/wifitrackerlib/WifiEntry.java b/libs/WifiTrackerLib/src/com/android/wifitrackerlib/WifiEntry.java
index 6ec5d8ba3348e08240e3b973c3fedd09164a1f83..f7e1dcb19bedcd2e7395d25e0c648703eb9093e5 100644
--- a/libs/WifiTrackerLib/src/com/android/wifitrackerlib/WifiEntry.java
+++ b/libs/WifiTrackerLib/src/com/android/wifitrackerlib/WifiEntry.java
@@ -149,20 +149,21 @@ public class WifiEntry implements Comparable<WifiEntry> {
             PRIVACY_DEVICE_MAC,
             PRIVACY_RANDOMIZED_MAC,
             PRIVACY_UNKNOWN
     })
 
     public @interface Privacy {}
 
     public static final int PRIVACY_DEVICE_MAC = 0;
     public static final int PRIVACY_RANDOMIZED_MAC = 1;
     public static final int PRIVACY_UNKNOWN = 2;
+    public static final int PRIVACY_RANDOMIZATION_ALWAYS = 100;
 
     @Retention(RetentionPolicy.SOURCE)
     @IntDef(value = {
             FREQUENCY_2_4_GHZ,
             FREQUENCY_5_GHZ,
             FREQUENCY_6_GHZ,
             FREQUENCY_60_GHZ,
             FREQUENCY_UNKNOWN
     })
 
