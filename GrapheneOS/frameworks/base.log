commit ec58276666c5f8669ec11406fc019579413dd1e5
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Sat 2016-10-15 20:09:49-0400

    enable doze and app standby
---
 core/res/res/values/config.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/core/res/res/values/config.xml b/core/res/res/values/config.xml
index 5f02eb6a6a37eda6a34cc94b33d263e6c8ba0fe4..d31844d5bdfad0e7b903444f0125b6a5bcbc58eb 100644
--- a/core/res/res/values/config.xml
+++ b/core/res/res/values/config.xml
@@ -238,21 +238,21 @@
          ActivityManager based on screen size. -->
     <integer name="config_extraFreeKbytesAdjust">0</integer>
 
     <!-- Set this to true to enable the platform's auto-power-save modes like doze and
          app standby.  These are not enabled by default because they require a standard
          cloud-to-device messaging service for apps to interact correctly with the modes
          (such as to be able to deliver an instant message to the device even when it is
          dozing).  This should be enabled if you have such services and expect apps to
          correctly use them when installed on your device.  Otherwise, keep this disabled
          so that applications can still use their own mechanisms. -->
-    <bool name="config_enableAutoPowerModes">false</bool>
+    <bool name="config_enableAutoPowerModes">true</bool>
 
     <!-- Whether (if true) this is a kind of device that can be moved around (eg. phone/laptop),
          or (if false) something for which movement is either not measurable or should not count
          toward power states (eg. tv/soundbar). -->
     <bool name="config_autoPowerModeUseMotionSensor">true</bool>
 
     <!-- The threshold angle for any motion detection in auto-power save modes.
          In hundreths of a degree. -->
     <integer name="config_autoPowerModeThresholdAngle">200</integer>
 

commit 21993c2fb697f5fbcd7374191583ff49b4f962e8
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Thu 2017-06-15 19:35:32-0400

    enable boot/bootloader/radio version checks
    
    This enables the Build.isBuildConsistent checks after tweaking the radio
    check to stop failing when the radio hasn't been turned on. The property
    used to check the radio version (gsm.baseband.version) is only set once
    the radio is turned on and initialized.
    
    The API documentation already claims that this is done.
---
 core/java/android/os/Build.java | 4 +---
 1 file changed, 1 insertion(+), 3 deletions(-)

diff --git a/core/java/android/os/Build.java b/core/java/android/os/Build.java
index 018bb2c9f9b2409c3db4e249d2746f8ab0e419f2..f9dabcf4b23e9772b1d947826709999e0a217347 100755
--- a/core/java/android/os/Build.java
+++ b/core/java/android/os/Build.java
@@ -1135,45 +1135,43 @@ public class Build {
         }
 
         if (!TextUtils.isEmpty(vendor)) {
             if (!Objects.equals(system, vendor)) {
                 Slog.e(TAG, "Mismatched fingerprints; system reported " + system
                         + " but vendor reported " + vendor);
                 return false;
             }
         }
 
-        /* TODO: Figure out issue with checks failing
         if (!TextUtils.isEmpty(bootimage)) {
             if (!Objects.equals(system, bootimage)) {
                 Slog.e(TAG, "Mismatched fingerprints; system reported " + system
                         + " but bootimage reported " + bootimage);
                 return false;
             }
         }
 
         if (!TextUtils.isEmpty(requiredBootloader)) {
             if (!Objects.equals(currentBootloader, requiredBootloader)) {
                 Slog.e(TAG, "Mismatched bootloader version: build requires " + requiredBootloader
                         + " but runtime reports " + currentBootloader);
                 return false;
             }
         }
 
-        if (!TextUtils.isEmpty(requiredRadio)) {
+        if (!TextUtils.isEmpty(requiredRadio) && !TextUtils.isEmpty(currentRadio)) {
             if (!Objects.equals(currentRadio, requiredRadio)) {
                 Slog.e(TAG, "Mismatched radio version: build requires " + requiredRadio
                         + " but runtime reports " + currentRadio);
                 return false;
             }
         }
-        */
 
         return true;
     }
 
     /** Build information for a particular device partition. */
     public static class Partition {
         /** The name identifying the system partition. */
         public static final String PARTITION_NAME_SYSTEM = "system";
 
         private final String mName;

commit 548b719826263226304b9be097f238d7fb07c02d
Author: flawedworld <38294951+flawedworld@users.noreply.github.com>
Date:   Fri 2021-07-16 02:00:19+0000

    Display UART notification on user builds
    
    The prior implementation relied on checking the init.svc.console prop,
    however as the console service is never launched on a user build due to
    it requiring ro.debuggable=1 , the UART notification will never appear.
    If UART is enabled the kernel cmdline is changed so that console is no
    longer null so use this to determine if UART is enabled and use the old
    method as an additional check.
---
 .../android/server/am/ActivityManagerService.java  | 24 +++++++++++++++++++++-
 1 file changed, 23 insertions(+), 1 deletion(-)

diff --git a/services/core/java/com/android/server/am/ActivityManagerService.java b/services/core/java/com/android/server/am/ActivityManagerService.java
index 0ae9cc279e6817d1ea0fa40c7780074f12bb5ba9..c9eb7e624a02fff2b6d25587213c871360691583 100644
--- a/services/core/java/com/android/server/am/ActivityManagerService.java
+++ b/services/core/java/com/android/server/am/ActivityManagerService.java
@@ -378,40 +378,42 @@ import com.android.server.wm.ActivityTaskManagerService;
 import com.android.server.wm.WindowManagerInternal;
 import com.android.server.wm.WindowManagerService;
 import com.android.server.wm.WindowProcessController;
 
 import dalvik.system.VMRuntime;
 
 import libcore.util.EmptyArray;
 
 import java.io.File;
 import java.io.FileDescriptor;
+import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.io.PrintWriter;
 import java.io.StringWriter;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.Date;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.Objects;
+import java.util.Scanner;
 import java.util.Set;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.Executor;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.function.BiFunction;
 
 public class ActivityManagerService extends IActivityManager.Stub
         implements Watchdog.Monitor, BatteryStatsImpl.BatteryCallback {
@@ -5566,22 +5568,42 @@ public class ActivityManagerService extends IActivityManager.Stub
                     });
             maybeLogUserspaceRebootEvent();
             mUserController.scheduleStartProfiles();
         }
         // UART is on if init's console service is running, send a warning notification.
         showConsoleNotificationIfActive();
 
         t.traceEnd();
     }
 
+    private static Boolean isUartEnabled() {
+        // console=null should be set in the kernel cmdline when UART is off
+        final String console_string = "console=null";
+        boolean isEnabled = false;
+        try (Scanner sc = new Scanner(new FileInputStream("/proc/cmdline"))) {
+            StringBuilder scOutput = new StringBuilder();
+            while(sc.hasNextLine()){
+                scOutput.append(sc.nextLine());
+            }
+            isEnabled = !scOutput.toString().contains(console_string);
+        } catch (IOException ignored) {
+        }
+        // This check will only work on userdebug and eng builds due
+        // to the console service not being present on user builds.
+        if (SystemProperties.get("init.svc.console").equals("running")) {
+            isEnabled = true;
+        }
+        return isEnabled;
+    }
+
     private void showConsoleNotificationIfActive() {
-        if (!SystemProperties.get("init.svc.console").equals("running")) {
+        if (!isUartEnabled()) {
             return;
         }
         String title = mContext
                 .getString(com.android.internal.R.string.console_running_notification_title);
         String message = mContext
                 .getString(com.android.internal.R.string.console_running_notification_message);
         Notification notification =
                 new Notification.Builder(mContext, SystemNotificationChannels.DEVELOPER)
                         .setSmallIcon(com.android.internal.R.drawable.stat_sys_adb)
                         .setWhen(0)

commit ef022b033c9b9d51b40162b610e217314767a9bd
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Fri 2018-03-09 20:23:12-0500

    use round adaptive icon mask and parse round icons
---
 core/res/res/values/config.xml | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/core/res/res/values/config.xml b/core/res/res/values/config.xml
index d31844d5bdfad0e7b903444f0125b6a5bcbc58eb..be242ee172a1e578c3425c21e03875014beef900 100644
--- a/core/res/res/values/config.xml
+++ b/core/res/res/values/config.xml
@@ -3397,21 +3397,21 @@
 
     <!-- List of files pinned by the Pinner Service with the JIT Zygote boot image b/119800099 -->
     <string-array translatable="false" name="config_jitzygoteBootImagePinnerServiceFiles">
     </string-array>
 
     <!-- Number of days preloaded file cache should be preserved on a device before it can be
          deleted -->
     <integer name="config_keepPreloadsMinDays">7</integer>
 
     <!-- Flag indicating whether round icons should be parsed from the application manifest. -->
-    <bool name="config_useRoundIcon">false</bool>
+    <bool name="config_useRoundIcon">true</bool>
 
     <!-- Flag indicating whether the assist disclosure can be disabled using
          ASSIST_DISCLOSURE_ENABLED. -->
     <bool name="config_allowDisablingAssistDisclosure">true</bool>
 
     <!-- True if the device supports system navigation keys. -->
     <bool name="config_supportSystemNavigationKeys">false</bool>
 
     <!-- emergency call number for the emergency affordance -->
     <string name="config_emergency_call_number" translatable="false">112</string>
@@ -3494,21 +3494,21 @@
          1.0 corresponds to 1x animator scale, 0 means that there will be no transition
          animations. Note that this is only a default and will be overridden by a
          user-set value if toggled by settings so the "Transition animation scale" setting
          should also be hidden if intended to be permanent. -->
     <item name="config_appTransitionAnimationDurationScaleDefault" format="float" type="dimen">1.0</item>
 
     <!-- Flag indicates that whether non-system apps can be installed on internal storage. -->
     <bool name="config_allow3rdPartyAppOnInternal">true</bool>
 
     <!-- Specifies the path that is used by AdaptiveIconDrawable class to crop launcher icons. -->
-    <string name="config_icon_mask" translatable="false">"M50,0L92,0C96.42,0 100,4.58 100 8L100,92C100, 96.42 96.42 100 92 100L8 100C4.58, 100 0 96.42 0 92L0 8 C 0 4.42 4.42 0 8 0L50 0Z"</string>
+    <string name="config_icon_mask" translatable="false">"M50 0C77.6 0 100 22.4 100 50C100 77.6 77.6 100 50 100C22.4 100 0 77.6 0 50C0 22.4 22.4 0 50 0Z"</string>
 
     <!-- The component name, flattened to a string, for the default accessibility service to be
          enabled by the accessibility shortcut. This service must be trusted, as it can be activated
          without explicit consent of the user. If no accessibility service with the specified name
          exists on the device, the accessibility shortcut will be disabled by default. -->
     <string name="config_defaultAccessibilityService" translatable="false"></string>
 
     <!-- Flag indicates that whether escrow token API is enabled for TrustAgent -->
     <!-- Warning: This API can be dangerous when not implemented properly. In particular,
          escrow token must NOT be retrievable from device storage. In other words, either

commit 95e1032c0819b6d47def0de9f5d0b449a32ec37d
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Wed 2018-11-28 01:08:00-0500

    enable gesture navigation by default
---
 core/res/res/values/config.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/core/res/res/values/config.xml b/core/res/res/values/config.xml
index be242ee172a1e578c3425c21e03875014beef900..06573015c9d078b629b783c257d0e4e2662212c4 100644
--- a/core/res/res/values/config.xml
+++ b/core/res/res/values/config.xml
@@ -3225,21 +3225,21 @@
          1 - Nav bar is always translucent when the freeform stack is visible, otherwise always
              opaque.
          2 - Nav bar is never forced opaque.
          -->
     <integer name="config_navBarOpacityMode">0</integer>
 
     <!-- Controls the navigation bar interaction mode:
          0: 3 button mode (back, home, overview buttons)
          1: 2 button mode (back, home buttons + swipe up for overview)
          2: gestures only for back, home and overview -->
-    <integer name="config_navBarInteractionMode">0</integer>
+    <integer name="config_navBarInteractionMode">2</integer>
 
     <!-- Controls whether the nav bar can move from the bottom to the side in landscape.
          Only applies if the device display is not square. -->
     <bool name="config_navBarCanMove">true</bool>
 
     <!-- Controls whether the navigation bar lets through taps. -->
     <bool name="config_navBarTapThrough">false</bool>
 
     <!-- Controls whether the side edge gestures can always trigger the transient nav bar to
          show. -->

commit 2a68e4d89ecd128e5c58becaf6e63caa8d93bdfe
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Wed 2018-11-28 01:14:54-0500

    enable multi user UI
---
 core/res/res/values/config.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/core/res/res/values/config.xml b/core/res/res/values/config.xml
index 06573015c9d078b629b783c257d0e4e2662212c4..5eae06de2a678b2c71f8407ad05438851aeb6ba6 100644
--- a/core/res/res/values/config.xml
+++ b/core/res/res/values/config.xml
@@ -2319,21 +2319,21 @@
           - to enable feature (fully enforced) for a complete whitelist: 1
           - to enable feature for an incomplete whitelist (so use implicit whitelist mode): 5
           - to enable feature but implicitly whitelist for SYSTEM user to ease local development: 9
           - to disable feature completely if it had never been enabled: 16
           - to henceforth disable feature and try to undo its previous effects: 0
         Note: This list must be kept current with PACKAGE_WHITELIST_MODE_PROP in
         frameworks/base/services/core/java/com/android/server/pm/UserSystemPackageInstaller.java -->
     <integer name="config_userTypePackageWhitelistMode">13</integer> <!-- 1+4+8 -->
 
     <!-- Whether UI for multi user should be shown -->
-    <bool name="config_enableMultiUserUI">false</bool>
+    <bool name="config_enableMultiUserUI">true</bool>
 
     <!-- Whether the new Auto Selection Network UI should be shown -->
     <bool name="config_enableNewAutoSelectNetworkUI">false</bool>
 
     <!-- If true, then we do not ask user for permission for apps to connect to USB devices.
          Do not set this to true for production devices. Doing so will cause you to fail CTS. -->
     <bool name="config_disableUsbPermissionDialogs">false</bool>
 
     <!-- Activity to handle Usb Device connection in USB Host side. Keeping it to null value will
          lead into handling it inside system using Intent resolution. Non-null contents will have

commit c536bc627f28fc4e799ac976d4cd829ca3235773
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Wed 2018-11-28 01:16:09-0500

    raise maximum users to 4
---
 core/res/res/values/config.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/core/res/res/values/config.xml b/core/res/res/values/config.xml
index 5eae06de2a678b2c71f8407ad05438851aeb6ba6..670edade16c7c519fb785c7a29ff9f85261f8a26 100644
--- a/core/res/res/values/config.xml
+++ b/core/res/res/values/config.xml
@@ -2285,21 +2285,21 @@
     <integer-array translatable="false" name="config_oemUsbModeOverride">
     </integer-array>
 
     <!-- Set to true to add links to Cell Broadcast app from Settings and MMS app. -->
     <bool name="config_cellBroadcastAppLinks">true</bool>
 
     <!-- The default value if the SyncStorageEngine should sync automatically or not -->
     <bool name="config_syncstorageengine_masterSyncAutomatically">true</bool>
 
     <!--  Maximum number of supported users -->
-    <integer name="config_multiuserMaximumUsers">1</integer>
+    <integer name="config_multiuserMaximumUsers">4</integer>
 
     <!-- Maximum number of users we allow to be running at a time -->
     <integer name="config_multiuserMaxRunningUsers">3</integer>
 
     <!-- Whether to delay user data locking for background user.
          If false, user switched-out from user switching will still be in running state until
          config_multiuserMaxRunningUsers is reached. Once config_multiuserMaxRunningUsers is
          reached, user will be stopped and user data is locked.
          If true, user switched out from user switching will always be stopped but its user data
          is not locked. Total number of unlocked users will be limited by

commit ea31568195d69ea4c6e73c8ad7e3e5db97773af5
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Tue 2018-12-04 00:34:24-0500

    disable bluetooth by default
---
 packages/SettingsProvider/res/values/defaults.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/packages/SettingsProvider/res/values/defaults.xml b/packages/SettingsProvider/res/values/defaults.xml
index 51f69a95e1635241184a109c0b6bad7007586892..b7a3aecbb174c0a53140a2f4f701385b1b8ade25 100644
--- a/packages/SettingsProvider/res/values/defaults.xml
+++ b/packages/SettingsProvider/res/values/defaults.xml
@@ -29,21 +29,21 @@
     <bool name="def_auto_time">true</bool>
     <bool name="def_auto_time_zone">true</bool>
     <bool name="def_accelerometer_rotation">false</bool>
     <!-- Default screen brightness, from 0 to 255.  102 is 40%. -->
     <integer name="def_screen_brightness">102</integer>
     <bool name="def_screen_brightness_automatic_mode">false</bool>
     <fraction name="def_window_animation_scale">100%</fraction>
     <fraction name="def_window_transition_scale">100%</fraction>
     <bool name="def_haptic_feedback">true</bool>
 
-    <bool name="def_bluetooth_on">true</bool>
+    <bool name="def_bluetooth_on">false</bool>
     <bool name="def_wifi_display_on">false</bool>
     <bool name="def_install_non_market_apps">false</bool>
     <!-- 0 == off, 3 == on -->
     <integer name="def_location_mode">3</integer>
     <bool name="assisted_gps_enabled">true</bool>
     <bool name="def_netstats_enabled">true</bool>
     <bool name="def_usb_mass_storage_enabled">true</bool>
     <bool name="def_wifi_on">false</bool>
     <!-- 0 == never, 1 == only when plugged in, 2 == always -->
     <integer name="def_wifi_sleep_policy">2</integer>

commit 3582120a2f67b85ce5262247210dc3d1ad5846c5
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Thu 2017-06-29 10:16:52-0400

    increase default max password length to 64
---
 core/java/android/app/admin/DevicePolicyManager.java | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/core/java/android/app/admin/DevicePolicyManager.java b/core/java/android/app/admin/DevicePolicyManager.java
index e2e8049c2980ffdf95099d0e0d7de2f5297636b8..9f6ac309e44d2913733fd65a35b9a99b910313d1 100644
--- a/core/java/android/app/admin/DevicePolicyManager.java
+++ b/core/java/android/app/admin/DevicePolicyManager.java
@@ -2385,21 +2385,21 @@ public class DevicePolicyManager {
      * or it could happen during provisioning finalization if the administrator supports
      * finalization during setup wizard.
      */
     public static final String ACTION_ADMIN_POLICY_COMPLIANCE =
             "android.app.action.ADMIN_POLICY_COMPLIANCE";
 
     /**
      * Maximum supported password length. Kind-of arbitrary.
      * @hide
      */
-    public static final int MAX_PASSWORD_LENGTH = 16;
+    public static final int MAX_PASSWORD_LENGTH = 64;
 
     /**
      * Service Action: Service implemented by a device owner or profile owner supervision app to
      * provide a secondary lockscreen.
      * @hide
      */
     @SystemApi
     public static final String ACTION_BIND_SECONDARY_LOCKSCREEN_SERVICE =
             "android.app.action.BIND_SECONDARY_LOCKSCREEN_SERVICE";
 

commit cbe810e8ab50a5b2be0b65c0f6710afeebfc3e47
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Tue 2017-09-12 01:52:11-0400

    use permanent fingerprint lockout immediately
---
 .../com/android/server/biometrics/fingerprint/FingerprintService.java   | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/services/core/java/com/android/server/biometrics/fingerprint/FingerprintService.java b/services/core/java/com/android/server/biometrics/fingerprint/FingerprintService.java
index a90fee6788a8ac337a4d785d07ba14ed12ae2df5..918952af05f4f1d7a9cf65cf8a0c1bf254db4924 100644
--- a/services/core/java/com/android/server/biometrics/fingerprint/FingerprintService.java
+++ b/services/core/java/com/android/server/biometrics/fingerprint/FingerprintService.java
@@ -96,21 +96,21 @@ import java.util.concurrent.CopyOnWriteArrayList;
  * @hide
  */
 public class FingerprintService extends BiometricServiceBase {
 
     protected static final String TAG = "FingerprintService";
     private static final boolean DEBUG = true;
     private static final String FP_DATA_DIR = "fpdata";
     private static final String ACTION_LOCKOUT_RESET =
             "com.android.server.biometrics.fingerprint.ACTION_LOCKOUT_RESET";
     private static final int MAX_FAILED_ATTEMPTS_LOCKOUT_TIMED = 5;
-    private static final int MAX_FAILED_ATTEMPTS_LOCKOUT_PERMANENT = 20;
+    private static final int MAX_FAILED_ATTEMPTS_LOCKOUT_PERMANENT = 5;
     private static final long FAIL_LOCKOUT_TIMEOUT_MS = 30 * 1000;
     private static final String KEY_LOCKOUT_RESET_USER = "lockout_reset_user";
 
     private final class ResetFailedAttemptsForUserRunnable implements Runnable {
         @Override
         public void run() {
             resetFailedAttemptsForUser(true /* clearAttemptCounter */,
                     ActivityManager.getCurrentUser());
         }
     }

commit 65fd73ba54af991f23051834214961ac814846ba
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Mon 2018-04-02 12:59:51-0400

    use Cloudflare DNS as the default fallback
    
    Cloudflare DNS has a better privacy policy than Google Public DNS while
    still supporting DNS over TLS.
---
 core/res/res/values/config.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/core/res/res/values/config.xml b/core/res/res/values/config.xml
index 670edade16c7c519fb785c7a29ff9f85261f8a26..35a7dba6ae851cd5936cc4ee474c88ea2414bb47 100644
--- a/core/res/res/values/config.xml
+++ b/core/res/res/values/config.xml
@@ -1825,21 +1825,21 @@
     <string name="config_systemGallery" translatable="false">com.android.gallery3d</string>
 
     <!-- The name of the package that will be allowed to change its components' label/icon. -->
     <string name="config_overrideComponentUiPackage" translatable="false"></string>
 
     <!-- Enable/disable default bluetooth profiles:
         HSP_AG, ObexObjectPush, Audio, NAP -->
     <bool name="config_bluetooth_default_profiles">true</bool>
 
     <!-- IP address of the dns server to use if nobody else suggests one -->
-    <string name="config_default_dns_server" translatable="false">8.8.8.8</string>
+    <string name="config_default_dns_server" translatable="false">1.0.0.1</string>
 
     <!-- The default mobile provisioning apn. Empty by default, maybe overridden by
          an mcc/mnc specific config.xml -->
     <string name="mobile_provisioning_apn" translatable="false"></string>
 
     <!-- The default mobile provisioning url. Empty by default, maybe overridden by
          an mcc/mnc specific config.xml -->
     <string name="mobile_provisioning_url" translatable="false"></string>
 
     <!-- The default character set for GsmAlphabet -->

commit 614f03696644a759eed9d006d768bfef08a74965
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Wed 2020-09-09 12:01:37-0400

    tethering: use Cloudflare DNS servers as defaults
    
    Cloudflare DNS has a better privacy policy than Google Public DNS while
    still supporting DNS over TLS.
---
 .../src/com/android/networkstack/tethering/TetheringConfiguration.java  | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/packages/Tethering/src/com/android/networkstack/tethering/TetheringConfiguration.java b/packages/Tethering/src/com/android/networkstack/tethering/TetheringConfiguration.java
index e1771a5613707d7d6e6e8d883a46b1d113e37b90..409bd1f1c14733550a83391ce1fa3d82b55d9739 100644
--- a/packages/Tethering/src/com/android/networkstack/tethering/TetheringConfiguration.java
+++ b/packages/Tethering/src/com/android/networkstack/tethering/TetheringConfiguration.java
@@ -63,21 +63,21 @@ public class TetheringConfiguration {
     // BT is limited to max default of 5 connections. 192.168.44.1 to 192.168.48.1
     // with 255.255.255.0
     // P2P is 192.168.49.1 and 255.255.255.0
     private static final String[] LEGACY_DHCP_DEFAULT_RANGE = {
         "192.168.42.2", "192.168.42.254", "192.168.43.2", "192.168.43.254",
         "192.168.44.2", "192.168.44.254", "192.168.45.2", "192.168.45.254",
         "192.168.46.2", "192.168.46.254", "192.168.47.2", "192.168.47.254",
         "192.168.48.2", "192.168.48.254", "192.168.49.2", "192.168.49.254",
     };
 
-    private static final String[] DEFAULT_IPV4_DNS = {"8.8.4.4", "8.8.8.8"};
+    private static final String[] DEFAULT_IPV4_DNS = {"1.0.0.1", "1.1.1.1"};
 
     /**
      * Override enabling BPF offload configuration for tethering.
      */
     public static final String OVERRIDE_TETHER_ENABLE_BPF_OFFLOAD =
             "override_tether_enable_bpf_offload";
 
     /**
      * Use the old dnsmasq DHCP server for tethering instead of the framework implementation.
      */

commit b7b648e5a25b7c997150564ddc7f133104d9b95a
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Mon 2018-04-02 10:37:46-0400

    SettingsLib: use Cloudflare DNS servers as hints
    
    Cloudflare DNS has a better privacy policy than Google Public DNS while
    still supporting DNS over TLS.
---
 packages/SettingsLib/res/values/strings.xml | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/packages/SettingsLib/res/values/strings.xml b/packages/SettingsLib/res/values/strings.xml
index a5501368945f56fc6636b01feb676fdbdc9fd88c..63a784b354dd1e7e238d2b1b370b3d274c01c0fe 100644
--- a/packages/SettingsLib/res/values/strings.xml
+++ b/packages/SettingsLib/res/values/strings.xml
@@ -1143,23 +1143,23 @@
 
     <!-- Label for length of time since the battery graph started [CHAR LIMIT=20] -->
     <string name="charge_length_format"><xliff:g name="time" example="3 hours">%1$s</xliff:g> ago</string>
 
     <!-- Label for length of time until battery is charged [CHAR LIMIT=20] -->
     <string name="remaining_length_format"><xliff:g name="time" example="3 hours">%1$s</xliff:g> left</string>
 
     <!-- Hint text for the IP address -->
     <string name="wifi_ip_address_hint" translatable="false">192.168.1.128</string>
     <!-- Hint text for DNS -->
-    <string name="wifi_dns1_hint" translatable="false">8.8.8.8</string>
+    <string name="wifi_dns1_hint" translatable="false">1.0.0.1</string>
     <!-- Hint text for DNS -->
-    <string name="wifi_dns2_hint" translatable="false">8.8.4.4</string>
+    <string name="wifi_dns2_hint" translatable="false">1.1.1.1</string>
     <!-- Hint text for the gateway -->
     <string name="wifi_gateway_hint" translatable="false">192.168.1.1</string>
     <!-- Hint text for network prefix length -->
     <string name="wifi_network_prefix_length_hint" translatable="false">24</string>
     <!-- HTTP proxy settings. The hint text field for port. -->
     <string name="proxy_port_hint" translatable="false">8080</string>
     <!-- HTTP proxy settings. Hint for Proxy-Auto Config URL. -->
     <string name="proxy_url_hint" translatable="false">https://www.example.com/proxy.pac</string>
     <!-- HTTP proxy settings. The hint text for proxy exclusion list. -->
     <string name="proxy_exclusionlist_hint" translatable="false">example.com,mycomp.test.com,localhost</string>

commit fe8b1a828b09b4c5020c14e251b45dd80617d83c
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Mon 2018-04-02 13:06:33-0400

    NetworkDiagnostics: switch to Cloudflare DNS
    
    Cloudflare DNS has a better privacy policy than Google Public DNS while
    still supporting DNS over TLS.
---
 .../core/java/com/android/server/connectivity/NetworkDiagnostics.java | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/services/core/java/com/android/server/connectivity/NetworkDiagnostics.java b/services/core/java/com/android/server/connectivity/NetworkDiagnostics.java
index 49c16ad96eb7197590379e22422ec7d41b52d36b..a25fd65a25be63ab4ac0a34505a80c0238c6f58c 100644
--- a/services/core/java/com/android/server/connectivity/NetworkDiagnostics.java
+++ b/services/core/java/com/android/server/connectivity/NetworkDiagnostics.java
@@ -90,23 +90,23 @@ import javax.net.ssl.SSLSocketFactory;
  *
  * The supplied timeout bounds the entire diagnostic process.  Each specific
  * check class must implement this upper bound on measurements in whichever
  * manner is most appropriate and effective.
  *
  * @hide
  */
 public class NetworkDiagnostics {
     private static final String TAG = "NetworkDiagnostics";
 
-    private static final InetAddress TEST_DNS4 = NetworkUtils.numericToInetAddress("8.8.8.8");
+    private static final InetAddress TEST_DNS4 = NetworkUtils.numericToInetAddress("1.0.0.1");
     private static final InetAddress TEST_DNS6 = NetworkUtils.numericToInetAddress(
-            "2001:4860:4860::8888");
+            "2606:4700:4700::1001");
 
     // For brevity elsewhere.
     private static final long now() {
         return SystemClock.elapsedRealtime();
     }
 
     // Values from RFC 1035 section 4.1.1, names from <arpa/nameser.h>.
     // Should be a member of DnsUdpCheck, but "compiler says no".
     public static enum DnsResponseCode { NOERROR, FORMERR, SERVFAIL, NXDOMAIN, NOTIMP, REFUSED };
 

commit e1cb522111777d3959bea1a337662ade1c341627
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Sun 2019-03-17 19:11:12-0400

    SystemUI: enable NFC quick settings tile
---
 packages/SystemUI/res/values/config.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/packages/SystemUI/res/values/config.xml b/packages/SystemUI/res/values/config.xml
index 9530a74d0ece2e499eec49cca97b6eed28d29734..43860044a02467f33ec902a5708df2469b438a68 100644
--- a/packages/SystemUI/res/values/config.xml
+++ b/packages/SystemUI/res/values/config.xml
@@ -107,21 +107,21 @@
     <!-- The default tiles to display in QuickSettings -->
     <string name="quick_settings_tiles_default" translatable="false">
         wifi,bt,dnd,flashlight,rotation,battery,cell,airplane,cast,screenrecord
     </string>
 
     <!-- The minimum number of tiles to display in QuickSettings -->
     <integer name="quick_settings_min_num_tiles">6</integer>
 
     <!-- Tiles native to System UI. Order should match "quick_settings_tiles_default" -->
     <string name="quick_settings_tiles_stock" translatable="false">
-        wifi,cell,battery,dnd,flashlight,rotation,bt,airplane,location,hotspot,inversion,saver,dark,work,cast,night,screenrecord,reverse
+        wifi,cell,battery,dnd,flashlight,rotation,bt,airplane,nfc,location,hotspot,inversion,saver,dark,work,cast,night,screenrecord,reverse
     </string>
 
     <!-- The tiles to display in QuickSettings -->
     <string name="quick_settings_tiles" translatable="false">default</string>
 
     <!-- The tiles to display in QuickSettings in retail mode -->
     <string name="quick_settings_tiles_retail_mode" translatable="false">
         night,dark,dnd,flashlight,rotation,location
     </string>
 

commit 630498a233635bd6627a1cbeb418f420c238c3b6
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Mon 2017-01-02 18:51:57-0500

    hide sensitive information while locked by default
---
 packages/SettingsProvider/res/values/defaults.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/packages/SettingsProvider/res/values/defaults.xml b/packages/SettingsProvider/res/values/defaults.xml
index b7a3aecbb174c0a53140a2f4f701385b1b8ade25..91305c73faa16062baef8023500b7e6c41e16df0 100644
--- a/packages/SettingsProvider/res/values/defaults.xml
+++ b/packages/SettingsProvider/res/values/defaults.xml
@@ -156,21 +156,21 @@
          Override to disable immersive mode confirmation for certain packages. -->
     <string name="def_immersive_mode_confirmations" translatable="false"></string>
 
     <!-- Default for Settings.Global.WIFI_SCAN_ALWAYS_AVAILABLE -->
     <integer name="def_wifi_scan_always_available">0</integer>
 
     <!-- Default for Settings.Secure.LOCK_SCREEN_SHOW_NOTIFICATIONS, 1==on -->
     <integer name="def_lock_screen_show_notifications">1</integer>
 
     <!-- Default for Settings.Secure.LOCK_SCREEN_ALLOW_PRIVATE_NOTIFICATIONS -->
-    <bool name="def_lock_screen_allow_private_notifications">true</bool>
+    <bool name="def_lock_screen_allow_private_notifications">false</bool>
 
     <!-- Default for Settings.Global.HEADS_UP_NOTIFICATIONS_ENABLED, 1==on -->
     <integer name="def_heads_up_enabled">1</integer>
 
     <!-- Default for Settings.Global.DEVICE_NAME $1=MANUFACTURER $2=MODEL-->
     <string name="def_device_name">%1$s %2$s</string>
 
     <!-- Default for Settings.Global.DEVICE_NAME $1=MODEL-->
     <string name="def_device_name_simple">%1$s</string>
 

commit 65cf691b30d6ec0870cc959242d5f9fd8dd8950a
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Fri 2017-02-03 06:53:00-0500

    set TEXT_SHOW_PASSWORD to false by default
---
 packages/SettingsProvider/res/values/defaults.xml                      | 2 ++
 .../src/com/android/providers/settings/DatabaseHelper.java             | 3 +++
 2 files changed, 5 insertions(+)

diff --git a/packages/SettingsProvider/res/values/defaults.xml b/packages/SettingsProvider/res/values/defaults.xml
index 91305c73faa16062baef8023500b7e6c41e16df0..658be01e64ac5b9eca4ae06b0f3844ecbe5aa2fb 100644
--- a/packages/SettingsProvider/res/values/defaults.xml
+++ b/packages/SettingsProvider/res/values/defaults.xml
@@ -233,11 +233,13 @@
     <bool name="def_skip_gesture">false</bool>
 
     <!-- Default for Settings.Secure.SILENCE_GESTURE -->
     <bool name="def_silence_gesture">false</bool>
 
     <!-- Default for Settings.Secure.AWARE_LOCK_ENABLED -->
     <bool name="def_aware_lock_enabled">false</bool>
 
     <!-- Default for setting for Settings.Global.HDMI_CONTROL_AUTO_DEVICE_OFF_ENABLED -->
     <bool name="def_hdmiControlAutoDeviceOff">false</bool>
+
+    <bool name="def_text_show_password">false</bool>
 </resources>
diff --git a/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java b/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java
index 266bfe0a22b5543ce1771fb39c25624520f1ccdf..f3021714f227ee72b142c516eeafdd4ce695541e 100644
--- a/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java
+++ b/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java
@@ -2268,20 +2268,23 @@ class DatabaseHelper extends SQLiteOpenHelper {
             loadDefaultHapticSettings(stmt);
 
             loadBooleanSetting(stmt, Settings.System.NOTIFICATION_LIGHT_PULSE,
                     R.bool.def_notification_pulse);
 
             loadUISoundEffectsSettings(stmt);
 
             loadIntegerSetting(stmt, Settings.System.POINTER_SPEED,
                     R.integer.def_pointer_speed);
 
+            loadBooleanSetting(stmt, Settings.System.TEXT_SHOW_PASSWORD,
+                    R.bool.def_text_show_password);
+
             /*
              * IMPORTANT: Do not add any more upgrade steps here as the global,
              * secure, and system settings are no longer stored in a database
              * but are kept in memory and persisted to XML.
              *
              * See: SettingsProvider.UpgradeController#onUpgradeLocked
              */
         } finally {
             if (stmt != null) stmt.close();
         }

commit 52fe7901d278049950017742ead29147c48ec6a8
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Wed 2020-09-09 12:04:55-0400

    constify JNINativeMethod tables
---
 cmds/hid/jni/com_android_commands_hid_Device.cpp           | 2 +-
 core/jni/android_app_ActivityThread.cpp                    | 2 +-
 core/jni/android_os_HidlMemory.cpp                         | 2 +-
 core/jni/android_os_HwBinder.cpp                           | 2 +-
 core/jni/android_os_HwBlob.cpp                             | 2 +-
 core/jni/android_os_HwParcel.cpp                           | 2 +-
 core/jni/android_os_HwRemoteBinder.cpp                     | 2 +-
 libs/hwui/jni/android_graphics_DisplayListCanvas.cpp       | 2 +-
 media/jni/android_media_ImageWriter.cpp                    | 4 ++--
 media/jni/android_media_MediaSync.cpp                      | 2 +-
 media/jni/soundpool/android_media_SoundPool.cpp            | 2 +-
 services/core/jni/com_android_server_UsbMidiDevice.cpp     | 2 +-
 services/core/jni/com_android_server_tv_TvUinputBridge.cpp | 2 +-
 13 files changed, 14 insertions(+), 14 deletions(-)

diff --git a/cmds/hid/jni/com_android_commands_hid_Device.cpp b/cmds/hid/jni/com_android_commands_hid_Device.cpp
index 1e200c52a2075fdc8343f8e220efd1ca98f63c43..011e1ed9d80e798887e89db640fc14b7f3dd9ddb 100644
--- a/cmds/hid/jni/com_android_commands_hid_Device.cpp
+++ b/cmds/hid/jni/com_android_commands_hid_Device.cpp
@@ -333,21 +333,21 @@ static void sendGetFeatureReportReply(JNIEnv* env, jclass /* clazz */, jlong ptr
     }
 }
 
 static void closeDevice(JNIEnv* /* env */, jclass /* clazz */, jlong ptr) {
     uhid::Device* d = reinterpret_cast<uhid::Device*>(ptr);
     if (d) {
         delete d;
     }
 }
 
-static JNINativeMethod sMethods[] = {
+static const JNINativeMethod sMethods[] = {
         {"nativeOpenDevice",
          "(Ljava/lang/String;IIII[B"
          "Lcom/android/commands/hid/Device$DeviceCallback;)J",
          reinterpret_cast<void*>(openDevice)},
         {"nativeSendReport", "(J[B)V", reinterpret_cast<void*>(sendReport)},
         {"nativeSendGetFeatureReportReply", "(JI[B)V",
          reinterpret_cast<void*>(sendGetFeatureReportReply)},
         {"nativeCloseDevice", "(J)V", reinterpret_cast<void*>(closeDevice)},
 };
 
diff --git a/core/jni/android_app_ActivityThread.cpp b/core/jni/android_app_ActivityThread.cpp
index 5aa684d51a013434cbb1535f7c77bef7d963e50c..564328d641d32ad10bbf1ff7039b5338ac29ec38 100644
--- a/core/jni/android_app_ActivityThread.cpp
+++ b/core/jni/android_app_ActivityThread.cpp
@@ -33,21 +33,21 @@ static void android_app_ActivityThread_purgePendingResources(JNIEnv* env, jobjec
 static void
 android_app_ActivityThread_dumpGraphics(JNIEnv* env, jobject clazz, jobject javaFileDescriptor) {
     int fd = jniGetFDFromFileDescriptor(env, javaFileDescriptor);
     ARenderThread_dumpGraphicsMemory(fd);
 }
 
 static void android_app_ActivityThread_initZygoteChildHeapProfiling(JNIEnv* env, jobject clazz) {
     android_mallopt(M_INIT_ZYGOTE_CHILD_PROFILING, nullptr, 0);
 }
 
-static JNINativeMethod gActivityThreadMethods[] = {
+static const JNINativeMethod gActivityThreadMethods[] = {
     // ------------ Regular JNI ------------------
     { "nPurgePendingResources",        "()V",
       (void*) android_app_ActivityThread_purgePendingResources },
     { "nDumpGraphicsInfo",        "(Ljava/io/FileDescriptor;)V",
       (void*) android_app_ActivityThread_dumpGraphics },
     { "nInitZygoteChildHeapProfiling",        "()V",
       (void*) android_app_ActivityThread_initZygoteChildHeapProfiling }
 };
 
 int register_android_app_ActivityThread(JNIEnv* env) {
diff --git a/core/jni/android_os_HidlMemory.cpp b/core/jni/android_os_HidlMemory.cpp
index 69e48184c0ad3a4fe144383d799d2d406ab3ea11..612fc95776a568bb65ba6b2170a05d8086ad2733 100644
--- a/core/jni/android_os_HidlMemory.cpp
+++ b/core/jni/android_os_HidlMemory.cpp
@@ -43,21 +43,21 @@ std::string stringFromJava(JNIEnv* env, jstring jstr) {
 jstring stringToJava(JNIEnv* env, const std::string& cstr) {
     return env->NewStringUTF(cstr.c_str());
 }
 
 static void nativeFinalize(JNIEnv* env, jobject jobj) {
     jlong jNativeContext = env->GetLongField(jobj, gFields.nativeContext);
     JHidlMemory* native = reinterpret_cast<JHidlMemory*>(jNativeContext);
     delete native;
 }
 
-static JNINativeMethod gMethods[] = {
+static const JNINativeMethod gMethods[] = {
         {"nativeFinalize", "()V", (void*) nativeFinalize},
 };
 
 }  // namespace
 
 JHidlMemory::~JHidlMemory() {
     if (mObj) {
         // Must manually delete the underlying handle - hidl_memory doesn't own
         // it.
         native_handle_delete(const_cast<native_handle_t*>(mObj->handle()));
diff --git a/core/jni/android_os_HwBinder.cpp b/core/jni/android_os_HwBinder.cpp
index b6427c9aa01c0a5ced38b077beffd54501821a94..7d1889fae82b4d55165526d6a5af5786c1e0e940 100644
--- a/core/jni/android_os_HwBinder.cpp
+++ b/core/jni/android_os_HwBinder.cpp
@@ -347,21 +347,21 @@ void JHwBinder_native_configureRpcThreadpool(JNIEnv *, jclass,
 
 void JHwBinder_native_joinRpcThreadpool() {
     IPCThreadState::self()->joinThreadPool();
 }
 
 static void JHwBinder_report_sysprop_change(JNIEnv * /*env*/, jclass /*clazz*/)
 {
     report_sysprop_change();
 }
 
-static JNINativeMethod gMethods[] = {
+static const JNINativeMethod gMethods[] = {
     { "native_init", "()J", (void *)JHwBinder_native_init },
     { "native_setup", "()V", (void *)JHwBinder_native_setup },
 
     { "transact",
         "(IL" PACKAGE_PATH "/HwParcel;L" PACKAGE_PATH "/HwParcel;I)V",
         (void *)JHwBinder_native_transact },
 
     { "registerService", "(Ljava/lang/String;)V",
         (void *)JHwBinder_native_registerService },
 
diff --git a/core/jni/android_os_HwBlob.cpp b/core/jni/android_os_HwBlob.cpp
index 0fb29111d0438c0a18eae05732165a2a7108bbeb..7fdc4c7526bfa2e53957087ec9e28020b94695e4 100644
--- a/core/jni/android_os_HwBlob.cpp
+++ b/core/jni/android_os_HwBlob.cpp
@@ -582,21 +582,21 @@ static jlong JHwBlob_native_handle(JNIEnv *env, jobject thiz) {
     status_t err = JHwBlob::GetNativeContext(env, thiz)->getHandle(&handle);
 
     if (err != OK) {
         signalExceptionForError(env, err);
         return 0;
     }
 
     return handle;
 }
 
-static JNINativeMethod gMethods[] = {
+static const JNINativeMethod gMethods[] = {
     { "native_init", "()J", (void *)JHwBlob_native_init },
     { "native_setup", "(I)V", (void *)JHwBlob_native_setup },
 
     { "getBool", "(J)Z", (void *)JHwBlob_native_getBool },
     { "getInt8", "(J)B", (void *)JHwBlob_native_getInt8 },
     { "getInt16", "(J)S", (void *)JHwBlob_native_getInt16 },
     { "getInt32", "(J)I", (void *)JHwBlob_native_getInt32 },
     { "getInt64", "(J)J", (void *)JHwBlob_native_getInt64 },
     { "getFloat", "(J)F", (void *)JHwBlob_native_getFloat },
     { "getDouble", "(J)D", (void *)JHwBlob_native_getDouble },
diff --git a/core/jni/android_os_HwParcel.cpp b/core/jni/android_os_HwParcel.cpp
index 151dbfce7af327d034afe6c5d97f253b75c8a93f..4869c2d68b95f78bfdc965e199e24e967337d950 100644
--- a/core/jni/android_os_HwParcel.cpp
+++ b/core/jni/android_os_HwParcel.cpp
@@ -1058,21 +1058,21 @@ static void JHwParcel_native_writeBuffer(
         JHwParcel::GetNativeContext(env, thiz)->getParcel();
 
     sp<JHwBlob> blob = JHwBlob::GetNativeContext(env, blobObj);
     status_t err = blob->writeToParcel(parcel);
 
     if (err != OK) {
         signalExceptionForError(env, err);
     }
 }
 
-static JNINativeMethod gMethods[] = {
+static const JNINativeMethod gMethods[] = {
     { "native_init", "()J", (void *)JHwParcel_native_init },
     { "native_setup", "(Z)V", (void *)JHwParcel_native_setup },
 
     { "writeInterfaceToken", "(Ljava/lang/String;)V",
         (void *)JHwParcel_native_writeInterfaceToken },
 
     { "writeBool", "(Z)V", (void *)JHwParcel_native_writeBool },
     { "writeInt8", "(B)V", (void *)JHwParcel_native_writeInt8 },
     { "writeInt16", "(S)V", (void *)JHwParcel_native_writeInt16 },
     { "writeInt32", "(I)V", (void *)JHwParcel_native_writeInt32 },
diff --git a/core/jni/android_os_HwRemoteBinder.cpp b/core/jni/android_os_HwRemoteBinder.cpp
index f8f841c6fd26daa382d8954e24505aa3ae1130bf..45c7dbf774048d55367b14041d3732069d69e57c 100644
--- a/core/jni/android_os_HwRemoteBinder.cpp
+++ b/core/jni/android_os_HwRemoteBinder.cpp
@@ -448,21 +448,21 @@ static jboolean JHwRemoteBinder_equals(JNIEnv* env, jobject thiz, jobject other)
 
     return hardware::interfacesEqual(toIBase(env, clazz.get(), thiz), toIBase(env, clazz.get(), other));
 }
 
 static jint JHwRemoteBinder_hashCode(JNIEnv* env, jobject thiz) {
     jlong longHash = reinterpret_cast<jlong>(
             JHwRemoteBinder::GetNativeContext(env, thiz)->getBinder().get());
     return static_cast<jint>(longHash ^ (longHash >> 32)); // See Long.hashCode()
 }
 
-static JNINativeMethod gMethods[] = {
+static const JNINativeMethod gMethods[] = {
     { "native_init", "()J", (void *)JHwRemoteBinder_native_init },
 
     { "native_setup_empty", "()V",
         (void *)JHwRemoteBinder_native_setup_empty },
 
     { "transact",
         "(IL" PACKAGE_PATH "/HwParcel;L" PACKAGE_PATH "/HwParcel;I)V",
         (void *)JHwRemoteBinder_native_transact },
 
     {"linkToDeath",
diff --git a/libs/hwui/jni/android_graphics_DisplayListCanvas.cpp b/libs/hwui/jni/android_graphics_DisplayListCanvas.cpp
index 54822f1f07e2777f87aab5e7de2d35c0821f30b5..8b3fc9861b508afad21da40475b531785e3b1437 100644
--- a/libs/hwui/jni/android_graphics_DisplayListCanvas.cpp
+++ b/libs/hwui/jni/android_graphics_DisplayListCanvas.cpp
@@ -175,21 +175,21 @@ static void android_view_DisplayListCanvas_drawWebViewFunctor(CRITICAL_JNI_PARAM
     Canvas* canvas = reinterpret_cast<Canvas*>(canvasPtr);
     canvas->drawWebViewFunctor(functor);
 }
 
 // ----------------------------------------------------------------------------
 // JNI Glue
 // ----------------------------------------------------------------------------
 
 const char* const kClassPathName = "android/graphics/RecordingCanvas";
 
-static JNINativeMethod gMethods[] = {
+static const JNINativeMethod gMethods[] = {
 
     // ------------ @FastNative ------------------
 
     { "nCallDrawGLFunction", "(JJLjava/lang/Runnable;)V",
             (void*) android_view_DisplayListCanvas_callDrawGLFunction },
 
     // ------------ @CriticalNative --------------
     { "nCreateDisplayListCanvas", "(JII)J",     (void*) android_view_DisplayListCanvas_createDisplayListCanvas },
     { "nResetDisplayListCanvas",  "(JJII)V",    (void*) android_view_DisplayListCanvas_resetDisplayListCanvas },
     { "nGetMaximumTextureWidth",  "()I",        (void*) android_view_DisplayListCanvas_getMaxTextureSize },
diff --git a/media/jni/android_media_ImageWriter.cpp b/media/jni/android_media_ImageWriter.cpp
index 936edb3fb005813b31d9bb529bc5dc3c618d5aef..347e34e773dd5c9557eb0de64b016381f67b3fba 100644
--- a/media/jni/android_media_ImageWriter.cpp
+++ b/media/jni/android_media_ImageWriter.cpp
@@ -998,32 +998,32 @@ static jobjectArray Image_createSurfacePlanes(JNIEnv* env, jobject thiz,
         env->SetObjectArrayElement(surfacePlanes, i, surfacePlane);
     }
 
     return surfacePlanes;
 }
 
 } // extern "C"
 
 // ----------------------------------------------------------------------------
 
-static JNINativeMethod gImageWriterMethods[] = {
+static const JNINativeMethod gImageWriterMethods[] = {
     {"nativeClassInit",         "()V",                        (void*)ImageWriter_classInit },
     {"nativeInit",              "(Ljava/lang/Object;Landroid/view/Surface;II)J",
                                                               (void*)ImageWriter_init },
     {"nativeClose",              "(J)V",                      (void*)ImageWriter_close },
     {"nativeAttachAndQueueImage", "(JJIJIIIIII)I",          (void*)ImageWriter_attachAndQueueImage },
     {"nativeDequeueInputImage", "(JLandroid/media/Image;)V",  (void*)ImageWriter_dequeueImage },
     {"nativeQueueInputImage",   "(JLandroid/media/Image;JIIIIII)V",  (void*)ImageWriter_queueImage },
     {"cancelImage",             "(JLandroid/media/Image;)V",   (void*)ImageWriter_cancelImage },
 };
 
-static JNINativeMethod gImageMethods[] = {
+static const JNINativeMethod gImageMethods[] = {
     {"nativeCreatePlanes",      "(II)[Landroid/media/ImageWriter$WriterSurfaceImage$SurfacePlane;",
                                                                (void*)Image_createSurfacePlanes },
     {"nativeGetWidth",          "()I",                         (void*)Image_getWidth },
     {"nativeGetHeight",         "()I",                         (void*)Image_getHeight },
     {"nativeGetFormat",         "()I",                         (void*)Image_getFormat },
     {"nativeGetHardwareBuffer", "()Landroid/hardware/HardwareBuffer;",
                                                                (void*)Image_getHardwareBuffer },
 };
 
 int register_android_media_ImageWriter(JNIEnv *env) {
diff --git a/media/jni/android_media_MediaSync.cpp b/media/jni/android_media_MediaSync.cpp
index f75200868a0dba20dee0bdefb2a0c653f60cd07f..994997f7c13217834b2dd3700cd375080e498a36 100644
--- a/media/jni/android_media_MediaSync.cpp
+++ b/media/jni/android_media_MediaSync.cpp
@@ -507,21 +507,21 @@ static void android_media_MediaSync_native_init(JNIEnv *env) {
 static void android_media_MediaSync_native_setup(JNIEnv *env, jobject thiz) {
     sp<JMediaSync> sync = new JMediaSync();
 
     setMediaSync(env, thiz, sync);
 }
 
 static void android_media_MediaSync_native_finalize(JNIEnv *env, jobject thiz) {
     android_media_MediaSync_release(env, thiz);
 }
 
-static JNINativeMethod gMethods[] = {
+static const JNINativeMethod gMethods[] = {
     { "native_setSurface",
       "(Landroid/view/Surface;)V",
       (void *)android_media_MediaSync_native_setSurface },
 
     { "native_setAudioTrack",
       "(Landroid/media/AudioTrack;)V",
       (void *)android_media_MediaSync_native_setAudioTrack },
 
     { "createInputSurface", "()Landroid/view/Surface;",
       (void *)android_media_MediaSync_createInputSurface },
diff --git a/media/jni/soundpool/android_media_SoundPool.cpp b/media/jni/soundpool/android_media_SoundPool.cpp
index de96737d40343afab54c870d4f31c4933107d47e..160f7128d896e6bbf4a91949934c35b0e7449af5 100644
--- a/media/jni/soundpool/android_media_SoundPool.cpp
+++ b/media/jni/soundpool/android_media_SoundPool.cpp
@@ -239,21 +239,21 @@ android_media_SoundPool_release(JNIEnv *env, jobject thiz)
 
         // clear native context
         env->SetLongField(thiz, fields.mNativeContext, 0);
         delete ap;
     }
 }
 
 // ----------------------------------------------------------------------------
 
 // Dalvik VM type signatures
-static JNINativeMethod gMethods[] = {
+static const JNINativeMethod gMethods[] = {
     {   "_load",
         "(Ljava/io/FileDescriptor;JJI)I",
         (void *)android_media_SoundPool_load_FD
     },
     {   "unload",
         "(I)Z",
         (void *)android_media_SoundPool_unload
     },
     {   "_play",
         "(IFFIIF)I",
diff --git a/services/core/jni/com_android_server_UsbMidiDevice.cpp b/services/core/jni/com_android_server_UsbMidiDevice.cpp
index 79d935fe610c61f52f9ba93df60a1ded39ea0133..86b43fcae705f03e58b9fc7f06ee435ffcde8bc6 100644
--- a/services/core/jni/com_android_server_UsbMidiDevice.cpp
+++ b/services/core/jni/com_android_server_UsbMidiDevice.cpp
@@ -128,21 +128,21 @@ android_server_UsbMidiDevice_close(JNIEnv *env, jobject thiz, jobjectArray fds)
     close(pipeFD);
     env->SetIntField(thiz, sPipeFDField, -1);
 
     int count = env->GetArrayLength(fds);
     for (int i = 0; i < count; i++) {
         jobject fd = env->GetObjectArrayElement(fds, i);
         close(jniGetFDFromFileDescriptor(env, fd));
     }
 }
 
-static JNINativeMethod method_table[] = {
+static const JNINativeMethod method_table[] = {
     { "nativeGetSubdeviceCount", "(II)I", (void*)android_server_UsbMidiDevice_get_subdevice_count },
     { "nativeOpen", "(III)[Ljava/io/FileDescriptor;", (void*)android_server_UsbMidiDevice_open },
     { "nativeClose", "([Ljava/io/FileDescriptor;)V", (void*)android_server_UsbMidiDevice_close },
 };
 
 int register_android_server_UsbMidiDevice(JNIEnv *env)
 {
     jclass clazz = env->FindClass("java/io/FileDescriptor");
     if (clazz == NULL) {
         ALOGE("Can't find java/io/FileDescriptor");
diff --git a/services/core/jni/com_android_server_tv_TvUinputBridge.cpp b/services/core/jni/com_android_server_tv_TvUinputBridge.cpp
index 99deab4fd652cf45e02889a096aa66b1cf3a3a46..2cb1aaef13fa141816f90d53dea985a79ec35a5f 100644
--- a/services/core/jni/com_android_server_tv_TvUinputBridge.cpp
+++ b/services/core/jni/com_android_server_tv_TvUinputBridge.cpp
@@ -527,21 +527,21 @@ static void nativeClear(JNIEnv* env, jclass clazz, jlong ptr) {
     }
 
     // Sync pointer events
     connection->sendEvent(EV_SYN, SYN_REPORT, 0);
 }
 
 /*
  * JNI registration
  */
 
-static JNINativeMethod gUinputBridgeMethods[] = {
+static const JNINativeMethod gUinputBridgeMethods[] = {
         {"nativeOpen", "(Ljava/lang/String;Ljava/lang/String;III)J", (void*)nativeOpen},
         {"nativeGamepadOpen", "(Ljava/lang/String;Ljava/lang/String;)J", (void*)nativeGamepadOpen},
         {"nativeClose", "(J)V", (void*)nativeClose},
         {"nativeSendKey", "(JIZ)V", (void*)nativeSendKey},
         {"nativeSendPointerDown", "(JIII)V", (void*)nativeSendPointerDown},
         {"nativeSendPointerUp", "(JI)V", (void*)nativeSendPointerUp},
         {"nativeClear", "(J)V", (void*)nativeClear},
         {"nativeSendPointerSync", "(J)V", (void*)nativeSendPointerSync},
         {"nativeSendGamepadKey", "(JIZ)V", (void*)nativeSendGamepadKey},
         {"nativeSendGamepadAxisValue", "(JIF)V", (void*)nativeSendGamepadAxisValue},

commit e11a32cfd5d4f55c1bb4421dd949e8bed5c90d2c
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Sat 2019-05-11 15:47:05-0400

    GrapheneOS logo mask
---
 core/res/assets/images/android-logo-mask.png | Bin 12104 -> 5937 bytes
 1 file changed, 0 insertions(+), 0 deletions(-)

diff --git a/core/res/assets/images/android-logo-mask.png b/core/res/assets/images/android-logo-mask.png
index 5512c0ad8a83b8df0b5d396fb2dac9487a240a4d..fae0c03f594e4bd23e843afb3bc8a1e09653dfb5 100644
Binary files a/core/res/assets/images/android-logo-mask.png and b/core/res/assets/images/android-logo-mask.png differ

commit e4956950b3a6d93e9b0a28ba3bf0833865bc5038
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Thu 2019-05-16 11:47:02-0400

    raise maximum users to 16
---
 core/res/res/values/config.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/core/res/res/values/config.xml b/core/res/res/values/config.xml
index 35a7dba6ae851cd5936cc4ee474c88ea2414bb47..a197c6a50e61cc0990a2aa2b1668ac96bf5069f5 100644
--- a/core/res/res/values/config.xml
+++ b/core/res/res/values/config.xml
@@ -2285,21 +2285,21 @@
     <integer-array translatable="false" name="config_oemUsbModeOverride">
     </integer-array>
 
     <!-- Set to true to add links to Cell Broadcast app from Settings and MMS app. -->
     <bool name="config_cellBroadcastAppLinks">true</bool>
 
     <!-- The default value if the SyncStorageEngine should sync automatically or not -->
     <bool name="config_syncstorageengine_masterSyncAutomatically">true</bool>
 
     <!--  Maximum number of supported users -->
-    <integer name="config_multiuserMaximumUsers">4</integer>
+    <integer name="config_multiuserMaximumUsers">16</integer>
 
     <!-- Maximum number of users we allow to be running at a time -->
     <integer name="config_multiuserMaxRunningUsers">3</integer>
 
     <!-- Whether to delay user data locking for background user.
          If false, user switched-out from user switching will still be in running state until
          config_multiuserMaxRunningUsers is reached. Once config_multiuserMaxRunningUsers is
          reached, user will be stopped and user data is locked.
          If true, user switched out from user switching will always be stopped but its user data
          is not locked. Total number of unlocked users will be limited by

commit dea643a5c1bd27f0ef70627569e04602e56cd85e
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Thu 2016-06-16 01:19:53-0400

    implement dynamic deny_new_usb toggle mode
---
 .../com/android/server/policy/keyguard/KeyguardStateMonitor.java     | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/services/core/java/com/android/server/policy/keyguard/KeyguardStateMonitor.java b/services/core/java/com/android/server/policy/keyguard/KeyguardStateMonitor.java
index add0b01f18799dc33079a30dd6eec9fe1ae4a752..1d68c37577e825f1c43a55dbbf64cd0ed1564ea0 100644
--- a/services/core/java/com/android/server/policy/keyguard/KeyguardStateMonitor.java
+++ b/services/core/java/com/android/server/policy/keyguard/KeyguardStateMonitor.java
@@ -12,20 +12,21 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 package com.android.server.policy.keyguard;
 
 import android.app.ActivityManager;
 import android.content.Context;
 import android.os.RemoteException;
+import android.os.SystemProperties;
 import android.util.Slog;
 
 import com.android.internal.policy.IKeyguardService;
 import com.android.internal.policy.IKeyguardStateCallback;
 import com.android.internal.widget.LockPatternUtils;
 
 import java.io.PrintWriter;
 
 /**
  * Maintains a cached copy of Keyguard's state.
@@ -81,20 +82,24 @@ public class KeyguardStateMonitor extends IKeyguardStateCallback.Stub {
 
     public boolean hasLockscreenWallpaper() {
         return mHasLockscreenWallpaper;
     }
 
     @Override // Binder interface
     public void onShowingStateChanged(boolean showing) {
         mIsShowing = showing;
 
         mCallback.onShowingChanged();
+
+        if ("dynamic".equals(SystemProperties.get("persist.security.deny_new_usb"))) {
+            SystemProperties.set("security.deny_new_usb", showing ? "1" : "0");
+        }
     }
 
     @Override // Binder interface
     public void onSimSecureStateChanged(boolean simSecure) {
         mSimSecure = simSecure;
     }
 
     public synchronized void setCurrentUser(int userId) {
         mCurrentUserId = userId;
     }

commit d3b02a331b6c12925e712d1b4a0cda5ab2c41cfb
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Sat 2015-03-14 18:10:20-0400

    add exec-based spawning support
---
 .../com/android/internal/os/ExecInit.java (new)    | 115 +++++++++++++++++++++
 core/java/com/android/internal/os/WrapperInit.java |   2 +-
 .../com/android/internal/os/ZygoteConnection.java  |   8 ++
 3 files changed, 124 insertions(+), 1 deletion(-)

diff --git a/core/java/com/android/internal/os/ExecInit.java b/core/java/com/android/internal/os/ExecInit.java
new file mode 100644
index 0000000000000000000000000000000000000000..2adcab7fdbe687f72143491b5e9a87c936431abb
--- /dev/null
+++ b/core/java/com/android/internal/os/ExecInit.java
@@ -0,0 +1,115 @@
+package com.android.internal.os;
+
+import android.os.Trace;
+import android.system.ErrnoException;
+import android.system.Os;
+import android.util.Slog;
+import android.util.TimingsTraceLog;
+import dalvik.system.VMRuntime;
+
+/**
+ * Startup class for the process.
+ * @hide
+ */
+public class ExecInit {
+    /**
+     * Class not instantiable.
+     */
+    private ExecInit() {
+    }
+
+    /**
+     * The main function called when starting a runtime application.
+     *
+     * The first argument is the target SDK version for the app.
+     *
+     * The remaining arguments are passed to the runtime.
+     *
+     * @param args The command-line arguments.
+     */
+    public static void main(String[] args) {
+        // Parse our mandatory argument.
+        int targetSdkVersion = Integer.parseInt(args[0], 10);
+
+        // Mimic system Zygote preloading.
+        ZygoteInit.preload(new TimingsTraceLog("ExecInitTiming",
+                Trace.TRACE_TAG_DALVIK));
+
+        // Launch the application.
+        String[] runtimeArgs = new String[args.length - 1];
+        System.arraycopy(args, 1, runtimeArgs, 0, runtimeArgs.length);
+        Runnable r = execInit(targetSdkVersion, runtimeArgs);
+
+        r.run();
+    }
+
+    /**
+     * Executes a runtime application with exec-based spawning.
+     * This method never returns.
+     *
+     * @param niceName The nice name for the application, or null if none.
+     * @param targetSdkVersion The target SDK version for the app.
+     * @param args Arguments for {@link RuntimeInit#main}.
+     */
+    public static void execApplication(String niceName, int targetSdkVersion,
+            String instructionSet, String[] args) {
+        int niceArgs = niceName == null ? 0 : 1;
+        int baseArgs = 5 + niceArgs;
+        String[] argv = new String[baseArgs + args.length];
+        if (VMRuntime.is64BitInstructionSet(instructionSet)) {
+            argv[0] = "/system/bin/app_process64";
+        } else {
+            argv[0] = "/system/bin/app_process32";
+        }
+        argv[1] = "/system/bin";
+        argv[2] = "--application";
+        if (niceName != null) {
+            argv[3] = "--nice-name=" + niceName;
+        }
+        argv[3 + niceArgs] = "com.android.internal.os.ExecInit";
+        argv[4 + niceArgs] = Integer.toString(targetSdkVersion);
+        System.arraycopy(args, 0, argv, baseArgs, args.length);
+
+        WrapperInit.preserveCapabilities();
+        try {
+            Os.execv(argv[0], argv);
+        } catch (ErrnoException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    /**
+     * The main function called when an application is started with exec-based spawning.
+     *
+     * When the app starts, the runtime starts {@link RuntimeInit#main}
+     * which calls {@link main} which then calls this method.
+     * So we don't need to call commonInit() here.
+     *
+     * @param targetSdkVersion target SDK version
+     * @param argv arg strings
+     */
+    private static Runnable execInit(int targetSdkVersion, String[] argv) {
+        if (RuntimeInit.DEBUG) {
+            Slog.d(RuntimeInit.TAG, "RuntimeInit: Starting application from exec");
+        }
+
+        // Check whether the first argument is a "-cp" in argv, and assume the next argument is the
+        // classpath. If found, create a PathClassLoader and use it for applicationInit.
+        ClassLoader classLoader = null;
+        if (argv != null && argv.length > 2 && argv[0].equals("-cp")) {
+            classLoader = ZygoteInit.createPathClassLoader(argv[1], targetSdkVersion);
+
+            // Install this classloader as the context classloader, too.
+            Thread.currentThread().setContextClassLoader(classLoader);
+
+            // Remove the classpath from the arguments.
+            String removedArgs[] = new String[argv.length - 2];
+            System.arraycopy(argv, 2, removedArgs, 0, argv.length - 2);
+            argv = removedArgs;
+        }
+
+        // Perform the same initialization that would happen after the Zygote forks.
+        Zygote.nativePreApplicationInit();
+        return RuntimeInit.applicationInit(targetSdkVersion, /*disabledCompatChanges*/ null, argv, classLoader);
+    }
+}
diff --git a/core/java/com/android/internal/os/WrapperInit.java b/core/java/com/android/internal/os/WrapperInit.java
index 790d7f7ab694609e5576e194ad5f57491997b663..4f7fd039ccd760d2da5c99fe8779dd95a1dc829b 100644
--- a/core/java/com/android/internal/os/WrapperInit.java
+++ b/core/java/com/android/internal/os/WrapperInit.java
@@ -178,21 +178,21 @@ public class WrapperInit {
      * Copy current capabilities to ambient capabilities. This is required for apps using
      * capabilities, as execv will re-evaluate the capability set, and the set of sh is
      * empty. Ambient capabilities have to be set to inherit them effectively.
      *
      * Note: This is BEST EFFORT ONLY. In case capabilities can't be raised, this function
      *       will silently return. In THIS CASE ONLY, as this is a development feature, it
      *       is better to return and try to run anyways, instead of blocking the wrapped app.
      *       This is acceptable here as failure will leave the wrapped app with strictly less
      *       capabilities, which may make it crash, but not exceed its allowances.
      */
-    private static void preserveCapabilities() {
+    public static void preserveCapabilities() {
         StructCapUserHeader header = new StructCapUserHeader(
                 OsConstants._LINUX_CAPABILITY_VERSION_3, 0);
         StructCapUserData[] data;
         try {
             data = Os.capget(header);
         } catch (ErrnoException e) {
             Slog.e(RuntimeInit.TAG, "RuntimeInit: Failed capget", e);
             return;
         }
 
diff --git a/core/java/com/android/internal/os/ZygoteConnection.java b/core/java/com/android/internal/os/ZygoteConnection.java
index e6a3029c5b2bf3a7d4abd597be94619d43d37c8d..a702e84813fa532408bbb61b8b74562421dfad8d 100644
--- a/core/java/com/android/internal/os/ZygoteConnection.java
+++ b/core/java/com/android/internal/os/ZygoteConnection.java
@@ -22,20 +22,21 @@ import static android.system.OsConstants.POLLIN;
 
 import static com.android.internal.os.ZygoteConnectionConstants.CONNECTION_TIMEOUT_MILLIS;
 import static com.android.internal.os.ZygoteConnectionConstants.WRAPPED_PID_TIMEOUT_MILLIS;
 
 import android.compat.annotation.UnsupportedAppUsage;
 import android.content.pm.ApplicationInfo;
 import android.net.Credentials;
 import android.net.LocalSocket;
 import android.os.Parcel;
 import android.os.Process;
+import android.os.SystemProperties;
 import android.os.Trace;
 import android.system.ErrnoException;
 import android.system.Os;
 import android.system.StructPollfd;
 import android.util.Log;
 
 import dalvik.system.VMRuntime;
 
 import libcore.io.IoUtils;
 
@@ -494,20 +495,27 @@ class ZygoteConnection {
         if (parsedArgs.mInvokeWith != null) {
             WrapperInit.execApplication(parsedArgs.mInvokeWith,
                     parsedArgs.mNiceName, parsedArgs.mTargetSdkVersion,
                     VMRuntime.getCurrentInstructionSet(),
                     pipeFd, parsedArgs.mRemainingArgs);
 
             // Should not get here.
             throw new IllegalStateException("WrapperInit.execApplication unexpectedly returned");
         } else {
             if (!isZygote) {
+                if (SystemProperties.getBoolean("sys.spawn.exec", true)) {
+                    ExecInit.execApplication(parsedArgs.mNiceName, parsedArgs.mTargetSdkVersion,
+                            VMRuntime.getCurrentInstructionSet(), parsedArgs.mRemainingArgs);
+
+                    // Should not get here.
+                    throw new IllegalStateException("ExecInit.execApplication unexpectedly returned");
+                }
                 return ZygoteInit.zygoteInit(parsedArgs.mTargetSdkVersion,
                         parsedArgs.mDisabledCompatChanges,
                         parsedArgs.mRemainingArgs, null /* classLoader */);
             } else {
                 return ZygoteInit.childZygoteInit(parsedArgs.mTargetSdkVersion,
                         parsedArgs.mRemainingArgs, null /* classLoader */);
             }
         }
     }
 

commit dc4e871688e3a95d0e21a4e77c317351ff72d160
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Tue 2019-05-21 23:54:20-0400

    disable exec spawning when using debugging options
    
    The debugging options are not yet supported probably, so disable exec
    spawning when doing debugging.
---
 core/java/com/android/internal/os/ZygoteConnection.java | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/core/java/com/android/internal/os/ZygoteConnection.java b/core/java/com/android/internal/os/ZygoteConnection.java
index a702e84813fa532408bbb61b8b74562421dfad8d..9b466417853081e568693c7c4c6693a2e337a0f7 100644
--- a/core/java/com/android/internal/os/ZygoteConnection.java
+++ b/core/java/com/android/internal/os/ZygoteConnection.java
@@ -495,21 +495,22 @@ class ZygoteConnection {
         if (parsedArgs.mInvokeWith != null) {
             WrapperInit.execApplication(parsedArgs.mInvokeWith,
                     parsedArgs.mNiceName, parsedArgs.mTargetSdkVersion,
                     VMRuntime.getCurrentInstructionSet(),
                     pipeFd, parsedArgs.mRemainingArgs);
 
             // Should not get here.
             throw new IllegalStateException("WrapperInit.execApplication unexpectedly returned");
         } else {
             if (!isZygote) {
-                if (SystemProperties.getBoolean("sys.spawn.exec", true)) {
+                if (SystemProperties.getBoolean("sys.spawn.exec", true) &&
+                        (parsedArgs.mRuntimeFlags & ApplicationInfo.FLAG_DEBUGGABLE) == 0) {
                     ExecInit.execApplication(parsedArgs.mNiceName, parsedArgs.mTargetSdkVersion,
                             VMRuntime.getCurrentInstructionSet(), parsedArgs.mRemainingArgs);
 
                     // Should not get here.
                     throw new IllegalStateException("ExecInit.execApplication unexpectedly returned");
                 }
                 return ZygoteInit.zygoteInit(parsedArgs.mTargetSdkVersion,
                         parsedArgs.mDisabledCompatChanges,
                         parsedArgs.mRemainingArgs, null /* classLoader */);
             } else {

commit 9ecf4a5c799514f949373af8a643aa6835174b47
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Tue 2019-05-14 14:24:21-0400

    add parameter for avoiding full preload with exec
---
 core/java/com/android/internal/os/ExecInit.java   | 2 +-
 core/java/com/android/internal/os/ZygoteInit.java | 6 +++++-
 2 files changed, 6 insertions(+), 2 deletions(-)

diff --git a/core/java/com/android/internal/os/ExecInit.java b/core/java/com/android/internal/os/ExecInit.java
index 2adcab7fdbe687f72143491b5e9a87c936431abb..830e5b562a919bf599784358f3e4a267168e7fb1 100644
--- a/core/java/com/android/internal/os/ExecInit.java
+++ b/core/java/com/android/internal/os/ExecInit.java
@@ -26,21 +26,21 @@ public class ExecInit {
      * The remaining arguments are passed to the runtime.
      *
      * @param args The command-line arguments.
      */
     public static void main(String[] args) {
         // Parse our mandatory argument.
         int targetSdkVersion = Integer.parseInt(args[0], 10);
 
         // Mimic system Zygote preloading.
         ZygoteInit.preload(new TimingsTraceLog("ExecInitTiming",
-                Trace.TRACE_TAG_DALVIK));
+                Trace.TRACE_TAG_DALVIK), false);
 
         // Launch the application.
         String[] runtimeArgs = new String[args.length - 1];
         System.arraycopy(args, 1, runtimeArgs, 0, runtimeArgs.length);
         Runnable r = execInit(targetSdkVersion, runtimeArgs);
 
         r.run();
     }
 
     /**
diff --git a/core/java/com/android/internal/os/ZygoteInit.java b/core/java/com/android/internal/os/ZygoteInit.java
index 2e32730a6ecb53b08650b29150c7493e80bfe02e..b9460f56d003a5b876f65c8b3d6af8d9d593e817 100644
--- a/core/java/com/android/internal/os/ZygoteInit.java
+++ b/core/java/com/android/internal/os/ZygoteInit.java
@@ -118,21 +118,21 @@ public class ZygoteInit {
     public static final boolean PRELOAD_RESOURCES = true;
 
     private static final int UNPRIVILEGED_UID = 9999;
     private static final int UNPRIVILEGED_GID = 9999;
 
     private static final int ROOT_UID = 0;
     private static final int ROOT_GID = 0;
 
     private static boolean sPreloadComplete;
 
-    static void preload(TimingsTraceLog bootTimingsTraceLog) {
+    static void preload(TimingsTraceLog bootTimingsTraceLog, boolean fullPreload) {
         Log.d(TAG, "begin preload");
         bootTimingsTraceLog.traceBegin("BeginPreload");
         beginPreload();
         bootTimingsTraceLog.traceEnd(); // BeginPreload
         bootTimingsTraceLog.traceBegin("PreloadClasses");
         preloadClasses();
         bootTimingsTraceLog.traceEnd(); // PreloadClasses
         bootTimingsTraceLog.traceBegin("CacheNonBootClasspathClassLoaders");
         cacheNonBootClasspathClassLoaders();
         bootTimingsTraceLog.traceEnd(); // CacheNonBootClasspathClassLoaders
@@ -150,20 +150,24 @@ public class ZygoteInit {
         // Ask the WebViewFactory to do any initialization that must run in the zygote process,
         // for memory sharing purposes.
         WebViewFactory.prepareWebViewInZygote();
         endPreload();
         warmUpJcaProviders();
         Log.d(TAG, "end preload");
 
         sPreloadComplete = true;
     }
 
+    static void preload(TimingsTraceLog bootTimingsTraceLog) {
+        preload(bootTimingsTraceLog, true);
+    }
+
     public static void lazyPreload() {
         Preconditions.checkState(!sPreloadComplete);
         Log.i(TAG, "Lazily preloading resources.");
 
         preload(new TimingsTraceLog("ZygoteInitTiming_lazy", Trace.TRACE_TAG_DALVIK));
     }
 
     private static void beginPreload() {
         Log.i(TAG, "Calling ZygoteHooks.beginPreload()");
 

commit e0cee6e43b581bc404ed857ad44034bccc3116b1
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Wed 2019-09-11 06:43:55-0400

    pass through fullPreload to libcore
---
 core/java/com/android/internal/os/ZygoteInit.java | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)

diff --git a/core/java/com/android/internal/os/ZygoteInit.java b/core/java/com/android/internal/os/ZygoteInit.java
index b9460f56d003a5b876f65c8b3d6af8d9d593e817..4671833555152446927fd76c16799629ce0f211c 100644
--- a/core/java/com/android/internal/os/ZygoteInit.java
+++ b/core/java/com/android/internal/os/ZygoteInit.java
@@ -121,21 +121,21 @@ public class ZygoteInit {
     private static final int UNPRIVILEGED_GID = 9999;
 
     private static final int ROOT_UID = 0;
     private static final int ROOT_GID = 0;
 
     private static boolean sPreloadComplete;
 
     static void preload(TimingsTraceLog bootTimingsTraceLog, boolean fullPreload) {
         Log.d(TAG, "begin preload");
         bootTimingsTraceLog.traceBegin("BeginPreload");
-        beginPreload();
+        beginPreload(fullPreload);
         bootTimingsTraceLog.traceEnd(); // BeginPreload
         bootTimingsTraceLog.traceBegin("PreloadClasses");
         preloadClasses();
         bootTimingsTraceLog.traceEnd(); // PreloadClasses
         bootTimingsTraceLog.traceBegin("CacheNonBootClasspathClassLoaders");
         cacheNonBootClasspathClassLoaders();
         bootTimingsTraceLog.traceEnd(); // CacheNonBootClasspathClassLoaders
         bootTimingsTraceLog.traceBegin("PreloadResources");
         preloadResources();
         bootTimingsTraceLog.traceEnd(); // PreloadResources
@@ -143,46 +143,46 @@ public class ZygoteInit {
         nativePreloadAppProcessHALs();
         Trace.traceEnd(Trace.TRACE_TAG_DALVIK);
         Trace.traceBegin(Trace.TRACE_TAG_DALVIK, "PreloadGraphicsDriver");
         maybePreloadGraphicsDriver();
         Trace.traceEnd(Trace.TRACE_TAG_DALVIK);
         preloadSharedLibraries();
         preloadTextResources();
         // Ask the WebViewFactory to do any initialization that must run in the zygote process,
         // for memory sharing purposes.
         WebViewFactory.prepareWebViewInZygote();
-        endPreload();
+        endPreload(fullPreload);
         warmUpJcaProviders();
         Log.d(TAG, "end preload");
 
         sPreloadComplete = true;
     }
 
     static void preload(TimingsTraceLog bootTimingsTraceLog) {
         preload(bootTimingsTraceLog, true);
     }
 
     public static void lazyPreload() {
         Preconditions.checkState(!sPreloadComplete);
         Log.i(TAG, "Lazily preloading resources.");
 
         preload(new TimingsTraceLog("ZygoteInitTiming_lazy", Trace.TRACE_TAG_DALVIK));
     }
 
-    private static void beginPreload() {
+    private static void beginPreload(boolean fullPreload) {
         Log.i(TAG, "Calling ZygoteHooks.beginPreload()");
 
-        ZygoteHooks.onBeginPreload();
+        ZygoteHooks.onBeginPreload(fullPreload);
     }
 
-    private static void endPreload() {
-        ZygoteHooks.onEndPreload();
+    private static void endPreload(boolean fullPreload) {
+        ZygoteHooks.onEndPreload(fullPreload);
 
         Log.i(TAG, "Called ZygoteHooks.endPreload()");
     }
 
     private static void preloadSharedLibraries() {
         Log.i(TAG, "Preloading shared libraries...");
         System.loadLibrary("android");
         System.loadLibrary("compiler_rt");
         System.loadLibrary("jnigraphics");
 

commit 0f3bbdba8d015cd855e2a606637eaa826148cb6d
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Tue 2019-05-14 14:28:27-0400

    disable OpenGL preloading for exec spawning
---
 core/java/com/android/internal/os/ZygoteInit.java | 8 +++++---
 1 file changed, 5 insertions(+), 3 deletions(-)

diff --git a/core/java/com/android/internal/os/ZygoteInit.java b/core/java/com/android/internal/os/ZygoteInit.java
index 4671833555152446927fd76c16799629ce0f211c..e93e70443ee638e0b7fdac2bf97ed2ab821a6213 100644
--- a/core/java/com/android/internal/os/ZygoteInit.java
+++ b/core/java/com/android/internal/os/ZygoteInit.java
@@ -135,23 +135,25 @@ public class ZygoteInit {
         bootTimingsTraceLog.traceEnd(); // PreloadClasses
         bootTimingsTraceLog.traceBegin("CacheNonBootClasspathClassLoaders");
         cacheNonBootClasspathClassLoaders();
         bootTimingsTraceLog.traceEnd(); // CacheNonBootClasspathClassLoaders
         bootTimingsTraceLog.traceBegin("PreloadResources");
         preloadResources();
         bootTimingsTraceLog.traceEnd(); // PreloadResources
         Trace.traceBegin(Trace.TRACE_TAG_DALVIK, "PreloadAppProcessHALs");
         nativePreloadAppProcessHALs();
         Trace.traceEnd(Trace.TRACE_TAG_DALVIK);
-        Trace.traceBegin(Trace.TRACE_TAG_DALVIK, "PreloadGraphicsDriver");
-        maybePreloadGraphicsDriver();
-        Trace.traceEnd(Trace.TRACE_TAG_DALVIK);
+        if (fullPreload) {
+            Trace.traceBegin(Trace.TRACE_TAG_DALVIK, "PreloadGraphicsDriver");
+            maybePreloadGraphicsDriver();
+            Trace.traceEnd(Trace.TRACE_TAG_DALVIK);
+        }
         preloadSharedLibraries();
         preloadTextResources();
         // Ask the WebViewFactory to do any initialization that must run in the zygote process,
         // for memory sharing purposes.
         WebViewFactory.prepareWebViewInZygote();
         endPreload(fullPreload);
         warmUpJcaProviders();
         Log.d(TAG, "end preload");
 
         sPreloadComplete = true;

commit 1e01136b78408953509542aeb152c0ca25c8456c
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Tue 2019-05-14 14:28:52-0400

    disable resource preloading for exec spawning
---
 core/java/com/android/internal/os/ZygoteInit.java | 8 +++++---
 1 file changed, 5 insertions(+), 3 deletions(-)

diff --git a/core/java/com/android/internal/os/ZygoteInit.java b/core/java/com/android/internal/os/ZygoteInit.java
index e93e70443ee638e0b7fdac2bf97ed2ab821a6213..2d1f301668a4e31c3aa54c94407d9e1a038ce029 100644
--- a/core/java/com/android/internal/os/ZygoteInit.java
+++ b/core/java/com/android/internal/os/ZygoteInit.java
@@ -129,23 +129,25 @@ public class ZygoteInit {
         Log.d(TAG, "begin preload");
         bootTimingsTraceLog.traceBegin("BeginPreload");
         beginPreload(fullPreload);
         bootTimingsTraceLog.traceEnd(); // BeginPreload
         bootTimingsTraceLog.traceBegin("PreloadClasses");
         preloadClasses();
         bootTimingsTraceLog.traceEnd(); // PreloadClasses
         bootTimingsTraceLog.traceBegin("CacheNonBootClasspathClassLoaders");
         cacheNonBootClasspathClassLoaders();
         bootTimingsTraceLog.traceEnd(); // CacheNonBootClasspathClassLoaders
-        bootTimingsTraceLog.traceBegin("PreloadResources");
-        preloadResources();
-        bootTimingsTraceLog.traceEnd(); // PreloadResources
+        if (fullPreload) {
+            bootTimingsTraceLog.traceBegin("PreloadResources");
+            preloadResources();
+            bootTimingsTraceLog.traceEnd(); // PreloadResources
+        }
         Trace.traceBegin(Trace.TRACE_TAG_DALVIK, "PreloadAppProcessHALs");
         nativePreloadAppProcessHALs();
         Trace.traceEnd(Trace.TRACE_TAG_DALVIK);
         if (fullPreload) {
             Trace.traceBegin(Trace.TRACE_TAG_DALVIK, "PreloadGraphicsDriver");
             maybePreloadGraphicsDriver();
             Trace.traceEnd(Trace.TRACE_TAG_DALVIK);
         }
         preloadSharedLibraries();
         preloadTextResources();

commit 574b31f97c6810a8150a8039b076b27c904b0362
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Tue 2019-05-14 14:30:59-0400

    disable class preloading for exec spawning
---
 core/java/com/android/internal/os/ZygoteInit.java | 8 +++++---
 1 file changed, 5 insertions(+), 3 deletions(-)

diff --git a/core/java/com/android/internal/os/ZygoteInit.java b/core/java/com/android/internal/os/ZygoteInit.java
index 2d1f301668a4e31c3aa54c94407d9e1a038ce029..b7246d0ac5cee1aeb9815ac79e61bd370cc8aa1c 100644
--- a/core/java/com/android/internal/os/ZygoteInit.java
+++ b/core/java/com/android/internal/os/ZygoteInit.java
@@ -123,23 +123,25 @@ public class ZygoteInit {
     private static final int ROOT_UID = 0;
     private static final int ROOT_GID = 0;
 
     private static boolean sPreloadComplete;
 
     static void preload(TimingsTraceLog bootTimingsTraceLog, boolean fullPreload) {
         Log.d(TAG, "begin preload");
         bootTimingsTraceLog.traceBegin("BeginPreload");
         beginPreload(fullPreload);
         bootTimingsTraceLog.traceEnd(); // BeginPreload
-        bootTimingsTraceLog.traceBegin("PreloadClasses");
-        preloadClasses();
-        bootTimingsTraceLog.traceEnd(); // PreloadClasses
+        if (fullPreload) {
+            bootTimingsTraceLog.traceBegin("PreloadClasses");
+            preloadClasses();
+            bootTimingsTraceLog.traceEnd(); // PreloadClasses
+        }
         bootTimingsTraceLog.traceBegin("CacheNonBootClasspathClassLoaders");
         cacheNonBootClasspathClassLoaders();
         bootTimingsTraceLog.traceEnd(); // CacheNonBootClasspathClassLoaders
         if (fullPreload) {
             bootTimingsTraceLog.traceBegin("PreloadResources");
             preloadResources();
             bootTimingsTraceLog.traceEnd(); // PreloadResources
         }
         Trace.traceBegin(Trace.TRACE_TAG_DALVIK, "PreloadAppProcessHALs");
         nativePreloadAppProcessHALs();

commit d1545abf15e47e1a937b9d9c061497dbfe88560c
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Tue 2019-05-14 14:31:29-0400

    disable WebView reservation for exec spawning
---
 core/java/com/android/internal/os/ZygoteInit.java | 8 +++++---
 1 file changed, 5 insertions(+), 3 deletions(-)

diff --git a/core/java/com/android/internal/os/ZygoteInit.java b/core/java/com/android/internal/os/ZygoteInit.java
index b7246d0ac5cee1aeb9815ac79e61bd370cc8aa1c..04a323254c726b0964043483c1496cc55ea9a220 100644
--- a/core/java/com/android/internal/os/ZygoteInit.java
+++ b/core/java/com/android/internal/os/ZygoteInit.java
@@ -146,23 +146,25 @@ public class ZygoteInit {
         Trace.traceBegin(Trace.TRACE_TAG_DALVIK, "PreloadAppProcessHALs");
         nativePreloadAppProcessHALs();
         Trace.traceEnd(Trace.TRACE_TAG_DALVIK);
         if (fullPreload) {
             Trace.traceBegin(Trace.TRACE_TAG_DALVIK, "PreloadGraphicsDriver");
             maybePreloadGraphicsDriver();
             Trace.traceEnd(Trace.TRACE_TAG_DALVIK);
         }
         preloadSharedLibraries();
         preloadTextResources();
-        // Ask the WebViewFactory to do any initialization that must run in the zygote process,
-        // for memory sharing purposes.
-        WebViewFactory.prepareWebViewInZygote();
+        if (fullPreload) {
+            // Ask the WebViewFactory to do any initialization that must run in the zygote process,
+            // for memory sharing purposes.
+            WebViewFactory.prepareWebViewInZygote();
+        }
         endPreload(fullPreload);
         warmUpJcaProviders();
         Log.d(TAG, "end preload");
 
         sPreloadComplete = true;
     }
 
     static void preload(TimingsTraceLog bootTimingsTraceLog) {
         preload(bootTimingsTraceLog, true);
     }

commit 055e69fd71e54a20140d57088763b836f17c7c25
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Tue 2019-05-14 14:34:32-0400

    disable JCA provider warm up for exec spawning
---
 core/java/com/android/internal/os/ZygoteInit.java | 22 ++++++++++++----------
 1 file changed, 12 insertions(+), 10 deletions(-)

diff --git a/core/java/com/android/internal/os/ZygoteInit.java b/core/java/com/android/internal/os/ZygoteInit.java
index 04a323254c726b0964043483c1496cc55ea9a220..ad3b95ec67fc57b7bb92d88ad106c43d9eb94725 100644
--- a/core/java/com/android/internal/os/ZygoteInit.java
+++ b/core/java/com/android/internal/os/ZygoteInit.java
@@ -152,21 +152,21 @@ public class ZygoteInit {
             Trace.traceEnd(Trace.TRACE_TAG_DALVIK);
         }
         preloadSharedLibraries();
         preloadTextResources();
         if (fullPreload) {
             // Ask the WebViewFactory to do any initialization that must run in the zygote process,
             // for memory sharing purposes.
             WebViewFactory.prepareWebViewInZygote();
         }
         endPreload(fullPreload);
-        warmUpJcaProviders();
+        warmUpJcaProviders(fullPreload);
         Log.d(TAG, "end preload");
 
         sPreloadComplete = true;
     }
 
     static void preload(TimingsTraceLog bootTimingsTraceLog) {
         preload(bootTimingsTraceLog, true);
     }
 
     public static void lazyPreload() {
@@ -222,41 +222,43 @@ public class ZygoteInit {
         Hyphenator.init();
         TextView.preloadFontCache();
     }
 
     /**
      * Register AndroidKeyStoreProvider and warm up the providers that are already registered.
      *
      * By doing it here we avoid that each app does it when requesting a service from the provider
      * for the first time.
      */
-    private static void warmUpJcaProviders() {
+    private static void warmUpJcaProviders(boolean fullPreload) {
         long startTime = SystemClock.uptimeMillis();
         Trace.traceBegin(
                 Trace.TRACE_TAG_DALVIK, "Starting installation of AndroidKeyStoreProvider");
         // AndroidKeyStoreProvider.install() manipulates the list of JCA providers to insert
         // preferred providers. Note this is not done via security.properties as the JCA providers
         // are not on the classpath in the case of, for example, raw dalvikvm runtimes.
         AndroidKeyStoreProvider.install();
         Log.i(TAG, "Installed AndroidKeyStoreProvider in "
                 + (SystemClock.uptimeMillis() - startTime) + "ms.");
         Trace.traceEnd(Trace.TRACE_TAG_DALVIK);
 
-        startTime = SystemClock.uptimeMillis();
-        Trace.traceBegin(
-                Trace.TRACE_TAG_DALVIK, "Starting warm up of JCA providers");
-        for (Provider p : Security.getProviders()) {
-            p.warmUpServiceProvision();
+        if (fullPreload) {
+            startTime = SystemClock.uptimeMillis();
+            Trace.traceBegin(
+                    Trace.TRACE_TAG_DALVIK, "Starting warm up of JCA providers");
+            for (Provider p : Security.getProviders()) {
+                p.warmUpServiceProvision();
+            }
+            Log.i(TAG, "Warmed up JCA providers in "
+                    + (SystemClock.uptimeMillis() - startTime) + "ms.");
+            Trace.traceEnd(Trace.TRACE_TAG_DALVIK);
         }
-        Log.i(TAG, "Warmed up JCA providers in "
-                + (SystemClock.uptimeMillis() - startTime) + "ms.");
-        Trace.traceEnd(Trace.TRACE_TAG_DALVIK);
     }
 
     /**
      * Performs Zygote process initialization. Loads and initializes commonly used classes.
      *
      * Most classes only cause a few hundred bytes to be allocated, but a few will allocate a dozen
      * Kbytes (in one case, 500+K).
      */
     private static void preloadClasses() {
         final VMRuntime runtime = VMRuntime.getRuntime();

commit e93a0770d72f82068fb2e250173223ce5d711ca8
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Wed 2019-09-11 06:57:24-0400

    disable preloading classloaders for exec spawning
---
 core/java/com/android/internal/os/ZygoteInit.java | 8 +++++---
 1 file changed, 5 insertions(+), 3 deletions(-)

diff --git a/core/java/com/android/internal/os/ZygoteInit.java b/core/java/com/android/internal/os/ZygoteInit.java
index ad3b95ec67fc57b7bb92d88ad106c43d9eb94725..0877a1668930533669ce723464b5bb7de05f86b0 100644
--- a/core/java/com/android/internal/os/ZygoteInit.java
+++ b/core/java/com/android/internal/os/ZygoteInit.java
@@ -128,23 +128,25 @@ public class ZygoteInit {
     static void preload(TimingsTraceLog bootTimingsTraceLog, boolean fullPreload) {
         Log.d(TAG, "begin preload");
         bootTimingsTraceLog.traceBegin("BeginPreload");
         beginPreload(fullPreload);
         bootTimingsTraceLog.traceEnd(); // BeginPreload
         if (fullPreload) {
             bootTimingsTraceLog.traceBegin("PreloadClasses");
             preloadClasses();
             bootTimingsTraceLog.traceEnd(); // PreloadClasses
         }
-        bootTimingsTraceLog.traceBegin("CacheNonBootClasspathClassLoaders");
-        cacheNonBootClasspathClassLoaders();
-        bootTimingsTraceLog.traceEnd(); // CacheNonBootClasspathClassLoaders
+        if (fullPreload) {
+            bootTimingsTraceLog.traceBegin("CacheNonBootClasspathClassLoaders");
+            cacheNonBootClasspathClassLoaders();
+            bootTimingsTraceLog.traceEnd(); // CacheNonBootClasspathClassLoaders
+        }
         if (fullPreload) {
             bootTimingsTraceLog.traceBegin("PreloadResources");
             preloadResources();
             bootTimingsTraceLog.traceEnd(); // PreloadResources
         }
         Trace.traceBegin(Trace.TRACE_TAG_DALVIK, "PreloadAppProcessHALs");
         nativePreloadAppProcessHALs();
         Trace.traceEnd(Trace.TRACE_TAG_DALVIK);
         if (fullPreload) {
             Trace.traceBegin(Trace.TRACE_TAG_DALVIK, "PreloadGraphicsDriver");

commit 1033cf4b5dd74025033ed288c088d8ed97d5250f
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Wed 2019-09-11 06:58:51-0400

    disable preloading HALs for exec spawning
---
 core/java/com/android/internal/os/ZygoteInit.java | 8 +++++---
 1 file changed, 5 insertions(+), 3 deletions(-)

diff --git a/core/java/com/android/internal/os/ZygoteInit.java b/core/java/com/android/internal/os/ZygoteInit.java
index 0877a1668930533669ce723464b5bb7de05f86b0..d19868ebd9cadaa0874ffcbc67f9d683bdf4baba 100644
--- a/core/java/com/android/internal/os/ZygoteInit.java
+++ b/core/java/com/android/internal/os/ZygoteInit.java
@@ -138,23 +138,25 @@ public class ZygoteInit {
         if (fullPreload) {
             bootTimingsTraceLog.traceBegin("CacheNonBootClasspathClassLoaders");
             cacheNonBootClasspathClassLoaders();
             bootTimingsTraceLog.traceEnd(); // CacheNonBootClasspathClassLoaders
         }
         if (fullPreload) {
             bootTimingsTraceLog.traceBegin("PreloadResources");
             preloadResources();
             bootTimingsTraceLog.traceEnd(); // PreloadResources
         }
-        Trace.traceBegin(Trace.TRACE_TAG_DALVIK, "PreloadAppProcessHALs");
-        nativePreloadAppProcessHALs();
-        Trace.traceEnd(Trace.TRACE_TAG_DALVIK);
+        if (fullPreload) {
+            Trace.traceBegin(Trace.TRACE_TAG_DALVIK, "PreloadAppProcessHALs");
+            nativePreloadAppProcessHALs();
+            Trace.traceEnd(Trace.TRACE_TAG_DALVIK);
+        }
         if (fullPreload) {
             Trace.traceBegin(Trace.TRACE_TAG_DALVIK, "PreloadGraphicsDriver");
             maybePreloadGraphicsDriver();
             Trace.traceEnd(Trace.TRACE_TAG_DALVIK);
         }
         preloadSharedLibraries();
         preloadTextResources();
         if (fullPreload) {
             // Ask the WebViewFactory to do any initialization that must run in the zygote process,
             // for memory sharing purposes.

commit 7e124c1baff8eda698afc59c0453ca9ab0278afe
Author: inthewaves <inthewaves@pm.me>
Date:   Thu 2020-09-10 16:47:59-0700

    require unlocking to use NFC quick tile
---
 .../src/com/android/systemui/qs/tiles/NfcTile.java | 35 ++++++++++++++++++++--
 1 file changed, 32 insertions(+), 3 deletions(-)

diff --git a/packages/SystemUI/src/com/android/systemui/qs/tiles/NfcTile.java b/packages/SystemUI/src/com/android/systemui/qs/tiles/NfcTile.java
index 4bee075ac63bd3d0c6475fd7a8c12b0ccd91771d..aec38d9abd50e85291414f76c8458272c14b4be3 100644
--- a/packages/SystemUI/src/com/android/systemui/qs/tiles/NfcTile.java
+++ b/packages/SystemUI/src/com/android/systemui/qs/tiles/NfcTile.java
@@ -23,38 +23,55 @@ import android.content.Intent;
 import android.content.IntentFilter;
 import android.content.pm.PackageManager;
 import android.nfc.NfcAdapter;
 import android.provider.Settings;
 import android.service.quicksettings.Tile;
 import android.widget.Switch;
 
 import com.android.internal.logging.nano.MetricsProto.MetricsEvent;
 import com.android.systemui.R;
 import com.android.systemui.broadcast.BroadcastDispatcher;
+import com.android.systemui.plugins.ActivityStarter;
 import com.android.systemui.plugins.qs.QSTile.BooleanState;
 import com.android.systemui.qs.QSHost;
 import com.android.systemui.qs.tileimpl.QSTileImpl;
+import com.android.systemui.statusbar.policy.KeyguardStateController;
 
 import javax.inject.Inject;
 
 /** Quick settings tile: Enable/Disable NFC **/
 public class NfcTile extends QSTileImpl<BooleanState> {
 
     private NfcAdapter mAdapter;
     private BroadcastDispatcher mBroadcastDispatcher;
 
+    private final ActivityStarter mActivityStarter;
+    private final KeyguardStateController mKeyguard;
+
     private boolean mListening;
 
+
     @Inject
-    public NfcTile(QSHost host, BroadcastDispatcher broadcastDispatcher) {
+    public NfcTile(QSHost host, BroadcastDispatcher broadcastDispatcher,
+            ActivityStarter activityStarter, KeyguardStateController keyguardStateController) {
         super(host);
         mBroadcastDispatcher = broadcastDispatcher;
+
+        mActivityStarter = activityStarter;
+        mKeyguard = keyguardStateController;
+        final KeyguardStateController.Callback callback = new KeyguardStateController.Callback() {
+            @Override
+            public void onKeyguardShowingChanged() {
+                refreshState();
+            }
+        };
+        mKeyguard.observe(this, callback);
     }
 
     @Override
     public BooleanState newTileState() {
         return new BooleanState();
     }
 
     @Override
     public void handleSetListening(boolean listening) {
         super.handleSetListening(listening);
@@ -74,32 +91,43 @@ public class NfcTile extends QSTileImpl<BooleanState> {
 
     @Override
     protected void handleUserSwitch(int newUserId) {
     }
 
     @Override
     public Intent getLongClickIntent() {
         return new Intent(Settings.ACTION_NFC_SETTINGS);
     }
 
-    @Override
-    protected void handleClick() {
+    private void handleClickInner() {
         if (getAdapter() == null) {
             return;
         }
         if (!getAdapter().isEnabled()) {
             getAdapter().enable();
         } else {
             getAdapter().disable();
         }
     }
 
+    @Override
+    protected void handleClick() {
+        if (mKeyguard.isMethodSecure() && mKeyguard.isShowing()) {
+            mActivityStarter.postQSRunnableDismissingKeyguard(() -> {
+                mHost.openPanels();
+                handleClickInner();
+            });
+            return;
+        }
+        handleClickInner();
+    }
+
     @Override
     protected void handleSecondaryClick() {
         handleClick();
     }
 
     @Override
     public CharSequence getTileLabel() {
         return mContext.getString(R.string.quick_settings_nfc_label);
     }
 
@@ -140,11 +168,12 @@ public class NfcTile extends QSTileImpl<BooleanState> {
         }
         return mAdapter;
     }
 
     private BroadcastReceiver mNfcReceiver = new BroadcastReceiver() {
         @Override
         public void onReceive(Context context, Intent intent) {
             refreshState();
         }
     };
+
 }

commit 835371b14b0023a5f4bbf67da4f3bb859c0c4422
Author: inthewaves <inthewaves@pm.me>
Date:   Thu 2020-09-10 17:02:20-0700

    require unlocking to use Bluetooth quick tile
---
 .../android/systemui/qs/tiles/BluetoothTile.java   | 37 ++++++++++++++++++++--
 1 file changed, 34 insertions(+), 3 deletions(-)

diff --git a/packages/SystemUI/src/com/android/systemui/qs/tiles/BluetoothTile.java b/packages/SystemUI/src/com/android/systemui/qs/tiles/BluetoothTile.java
index 888c7ab2c312d503f3af458388204c4e0df0c08d..fd0b10f43dd4dfae65b534b549f75b4b9487e859 100644
--- a/packages/SystemUI/src/com/android/systemui/qs/tiles/BluetoothTile.java
+++ b/packages/SystemUI/src/com/android/systemui/qs/tiles/BluetoothTile.java
@@ -38,77 +38,108 @@ import com.android.settingslib.bluetooth.CachedBluetoothDevice;
 import com.android.settingslib.graph.BluetoothDeviceLayerDrawable;
 import com.android.systemui.R;
 import com.android.systemui.plugins.ActivityStarter;
 import com.android.systemui.plugins.qs.DetailAdapter;
 import com.android.systemui.plugins.qs.QSTile.BooleanState;
 import com.android.systemui.qs.QSDetailItems;
 import com.android.systemui.qs.QSDetailItems.Item;
 import com.android.systemui.qs.QSHost;
 import com.android.systemui.qs.tileimpl.QSTileImpl;
 import com.android.systemui.statusbar.policy.BluetoothController;
+import com.android.systemui.statusbar.policy.KeyguardStateController;
 
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
 
 import javax.inject.Inject;
 
 /** Quick settings tile: Bluetooth **/
 public class BluetoothTile extends QSTileImpl<BooleanState> {
     private static final Intent BLUETOOTH_SETTINGS = new Intent(Settings.ACTION_BLUETOOTH_SETTINGS);
 
     private final BluetoothController mController;
     private final BluetoothDetailAdapter mDetailAdapter;
     private final ActivityStarter mActivityStarter;
 
+    private final KeyguardStateController mKeyguard;
+
     @Inject
     public BluetoothTile(QSHost host,
             BluetoothController bluetoothController,
-            ActivityStarter activityStarter) {
+            ActivityStarter activityStarter,
+            KeyguardStateController keyguardStateController) {
         super(host);
         mController = bluetoothController;
         mActivityStarter = activityStarter;
         mDetailAdapter = (BluetoothDetailAdapter) createDetailAdapter();
         mController.observe(getLifecycle(), mCallback);
+
+        mKeyguard = keyguardStateController;
+        final KeyguardStateController.Callback callback = new KeyguardStateController.Callback() {
+            @Override
+            public void onKeyguardShowingChanged() {
+                refreshState();
+            }
+        };
+        mKeyguard.observe(this, callback);
     }
 
     @Override
     public DetailAdapter getDetailAdapter() {
         return mDetailAdapter;
     }
 
     @Override
     public BooleanState newTileState() {
         return new BooleanState();
     }
 
-    @Override
-    protected void handleClick() {
+    private void handleClickInner() {
         // Secondary clicks are header clicks, just toggle.
         final boolean isEnabled = mState.value;
         // Immediately enter transient enabling state when turning bluetooth on.
         refreshState(isEnabled ? null : ARG_SHOW_TRANSIENT_ENABLING);
         mController.setBluetoothEnabled(!isEnabled);
     }
 
+    @Override
+    protected void handleClick() {
+        if (mKeyguard.isMethodSecure() && mKeyguard.isShowing()) {
+            mActivityStarter.postQSRunnableDismissingKeyguard(() -> {
+                mHost.openPanels();
+                handleClickInner();
+            });
+            return;
+        }
+        handleClickInner();
+    }
+
     @Override
     public Intent getLongClickIntent() {
         return new Intent(Settings.ACTION_BLUETOOTH_SETTINGS);
     }
 
     @Override
     protected void handleSecondaryClick() {
         if (!mController.canConfigBluetooth()) {
             mActivityStarter.postStartActivityDismissingKeyguard(
                     new Intent(Settings.ACTION_BLUETOOTH_SETTINGS), 0);
             return;
         }
+        if (mKeyguard.isMethodSecure() && mKeyguard.isShowing()) {
+            mActivityStarter.postQSRunnableDismissingKeyguard(() -> {
+                mHost.openPanels();
+                showDetail(true);
+            });
+            return;
+        }
         showDetail(true);
         if (!mState.value) {
             mController.setBluetoothEnabled(true);
         }
     }
 
     @Override
     public CharSequence getTileLabel() {
         return mContext.getString(R.string.quick_settings_bluetooth_label);
     }

commit 8e8e99d591a6b481513322b89119acc99ffca938
Author: inthewaves <inthewaves@pm.me>
Date:   Thu 2020-09-10 17:05:18-0700

    require unlocking to use airplane mode quick tile
---
 .../systemui/qs/tiles/AirplaneModeTile.java        | 30 +++++++++++++++++++---
 1 file changed, 27 insertions(+), 3 deletions(-)

diff --git a/packages/SystemUI/src/com/android/systemui/qs/tiles/AirplaneModeTile.java b/packages/SystemUI/src/com/android/systemui/qs/tiles/AirplaneModeTile.java
index b24fdbfc562f332e10d162b234a84dc240a8ea2c..2065800a4016352c06f4a9a80331633604fdccc8 100644
--- a/packages/SystemUI/src/com/android/systemui/qs/tiles/AirplaneModeTile.java
+++ b/packages/SystemUI/src/com/android/systemui/qs/tiles/AirplaneModeTile.java
@@ -31,64 +31,88 @@ import android.widget.Switch;
 
 import com.android.internal.logging.MetricsLogger;
 import com.android.internal.logging.nano.MetricsProto.MetricsEvent;
 import com.android.systemui.R;
 import com.android.systemui.broadcast.BroadcastDispatcher;
 import com.android.systemui.plugins.ActivityStarter;
 import com.android.systemui.plugins.qs.QSTile.BooleanState;
 import com.android.systemui.qs.GlobalSetting;
 import com.android.systemui.qs.QSHost;
 import com.android.systemui.qs.tileimpl.QSTileImpl;
+import com.android.systemui.statusbar.policy.KeyguardStateController;
 
 import javax.inject.Inject;
 
 /** Quick settings tile: Airplane mode **/
 public class AirplaneModeTile extends QSTileImpl<BooleanState> {
     private final Icon mIcon = ResourceIcon.get(com.android.internal.R.drawable.ic_qs_airplane);
     private final GlobalSetting mSetting;
     private final ActivityStarter mActivityStarter;
     private final BroadcastDispatcher mBroadcastDispatcher;
 
+    private final KeyguardStateController mKeyguard;
+
     private boolean mListening;
 
     @Inject
     public AirplaneModeTile(QSHost host, ActivityStarter activityStarter,
-            BroadcastDispatcher broadcastDispatcher) {
+            BroadcastDispatcher broadcastDispatcher,
+            KeyguardStateController keyguardStateController) {
         super(host);
         mActivityStarter = activityStarter;
         mBroadcastDispatcher = broadcastDispatcher;
 
         mSetting = new GlobalSetting(mContext, mHandler, Global.AIRPLANE_MODE_ON) {
             @Override
             protected void handleValueChanged(int value) {
                 handleRefreshState(value);
             }
         };
+
+        mKeyguard = keyguardStateController;
+        final KeyguardStateController.Callback callback = new KeyguardStateController.Callback() {
+            @Override
+            public void onKeyguardShowingChanged() {
+                refreshState();
+            }
+        };
+        mKeyguard.observe(this, callback);
     }
 
     @Override
     public BooleanState newTileState() {
         return new BooleanState();
     }
 
-    @Override
-    public void handleClick() {
+    private void handleClickInner() {
         boolean airplaneModeEnabled = mState.value;
         MetricsLogger.action(mContext, getMetricsCategory(), !airplaneModeEnabled);
         if (!airplaneModeEnabled && TelephonyProperties.in_ecm_mode().orElse(false)) {
             mActivityStarter.postStartActivityDismissingKeyguard(
                     new Intent(TelephonyManager.ACTION_SHOW_NOTICE_ECM_BLOCK_OTHERS), 0);
             return;
         }
         setEnabled(!airplaneModeEnabled);
     }
 
+    @Override
+    public void handleClick() {
+        if (mKeyguard.isMethodSecure() && mKeyguard.isShowing()) {
+            mActivityStarter.postQSRunnableDismissingKeyguard(() -> {
+                mHost.openPanels();
+                handleClickInner();
+            });
+            return;
+        }
+        handleClickInner();
+    }
+
     private void setEnabled(boolean enabled) {
         final ConnectivityManager mgr =
                 (ConnectivityManager) mContext.getSystemService(Context.CONNECTIVITY_SERVICE);
         mgr.setAirplaneMode(enabled);
     }
 
     @Override
     public Intent getLongClickIntent() {
         return new Intent(Settings.ACTION_AIRPLANE_MODE_SETTINGS);
     }

commit 35c97928e75b9955a15ce5380fd101c96d89b37f
Author: inthewaves <inthewaves@pm.me>
Date:   Thu 2020-09-10 17:08:33-0700

    require unlocking to use Wi-Fi quick tile
---
 .../com/android/systemui/qs/tiles/WifiTile.java    | 36 ++++++++++++++++++++--
 1 file changed, 33 insertions(+), 3 deletions(-)

diff --git a/packages/SystemUI/src/com/android/systemui/qs/tiles/WifiTile.java b/packages/SystemUI/src/com/android/systemui/qs/tiles/WifiTile.java
index 1279d42eb64d2d02316c65f32fb887f2c6c8d60a..9cede4ef92ef76d29716e8cb67abaea59654735b 100644
--- a/packages/SystemUI/src/com/android/systemui/qs/tiles/WifiTile.java
+++ b/packages/SystemUI/src/com/android/systemui/qs/tiles/WifiTile.java
@@ -36,20 +36,21 @@ import com.android.systemui.plugins.ActivityStarter;
 import com.android.systemui.plugins.qs.DetailAdapter;
 import com.android.systemui.plugins.qs.QSIconView;
 import com.android.systemui.plugins.qs.QSTile;
 import com.android.systemui.plugins.qs.QSTile.SignalState;
 import com.android.systemui.qs.AlphaControlledSignalTileView;
 import com.android.systemui.qs.QSDetailItems;
 import com.android.systemui.qs.QSDetailItems.Item;
 import com.android.systemui.qs.QSHost;
 import com.android.systemui.qs.tileimpl.QSIconViewImpl;
 import com.android.systemui.qs.tileimpl.QSTileImpl;
+import com.android.systemui.statusbar.policy.KeyguardStateController;
 import com.android.systemui.statusbar.policy.NetworkController;
 import com.android.systemui.statusbar.policy.NetworkController.AccessPointController;
 import com.android.systemui.statusbar.policy.NetworkController.IconState;
 import com.android.systemui.statusbar.policy.NetworkController.SignalCallback;
 import com.android.systemui.statusbar.policy.WifiIcons;
 
 import java.util.List;
 
 import javax.inject.Inject;
 
@@ -59,29 +60,40 @@ public class WifiTile extends QSTileImpl<SignalState> {
 
     protected final NetworkController mController;
     private final AccessPointController mWifiController;
     private final WifiDetailAdapter mDetailAdapter;
     private final QSTile.SignalState mStateBeforeClick = newTileState();
 
     protected final WifiSignalCallback mSignalCallback = new WifiSignalCallback();
     private final ActivityStarter mActivityStarter;
     private boolean mExpectDisabled;
 
+    private final KeyguardStateController mKeyguard;
+
     @Inject
     public WifiTile(QSHost host, NetworkController networkController,
-            ActivityStarter activityStarter) {
+            ActivityStarter activityStarter, KeyguardStateController keyguardStateController) {
         super(host);
         mController = networkController;
         mWifiController = mController.getAccessPointController();
         mDetailAdapter = (WifiDetailAdapter) createDetailAdapter();
         mActivityStarter = activityStarter;
         mController.observe(getLifecycle(), mSignalCallback);
+
+        mKeyguard = keyguardStateController;
+        final KeyguardStateController.Callback callback = new KeyguardStateController.Callback() {
+            @Override
+            public void onKeyguardShowingChanged() {
+                refreshState();
+            }
+        };
+        mKeyguard.observe(this, callback);
     }
 
     @Override
     public SignalState newTileState() {
         return new SignalState();
     }
 
     @Override
     public void setDetailListening(boolean listening) {
         if (listening) {
@@ -104,46 +116,64 @@ public class WifiTile extends QSTileImpl<SignalState> {
     @Override
     public QSIconView createTileView(Context context) {
         return new AlphaControlledSignalTileView(context);
     }
 
     @Override
     public Intent getLongClickIntent() {
         return WIFI_SETTINGS;
     }
 
-    @Override
-    protected void handleClick() {
+    private void handleClickInner() {
         // Secondary clicks are header clicks, just toggle.
         mState.copyTo(mStateBeforeClick);
         boolean wifiEnabled = mState.value;
         // Immediately enter transient state when turning on wifi.
         refreshState(wifiEnabled ? null : ARG_SHOW_TRANSIENT_ENABLING);
         mController.setWifiEnabled(!wifiEnabled);
         mExpectDisabled = wifiEnabled;
         if (mExpectDisabled) {
             mHandler.postDelayed(() -> {
                 if (mExpectDisabled) {
                     mExpectDisabled = false;
                     refreshState();
                 }
             }, QSIconViewImpl.QS_ANIM_LENGTH);
         }
     }
 
+    @Override
+    protected void handleClick() {
+        if (mKeyguard.isMethodSecure() && mKeyguard.isShowing()) {
+            mActivityStarter.postQSRunnableDismissingKeyguard(() -> {
+                mHost.openPanels();
+                handleClickInner();
+            });
+            return;
+        }
+        handleClickInner();
+    }
+
     @Override
     protected void handleSecondaryClick() {
         if (!mWifiController.canConfigWifi()) {
             mActivityStarter.postStartActivityDismissingKeyguard(
                     new Intent(Settings.ACTION_WIFI_SETTINGS), 0);
             return;
         }
+        if (mKeyguard.isMethodSecure() && mKeyguard.isShowing()) {
+            mActivityStarter.postQSRunnableDismissingKeyguard(() -> {
+                mHost.openPanels();
+                showDetail(true);
+            });
+            return;
+        }
         showDetail(true);
         if (!mState.value) {
             mController.setWifiEnabled(true);
         }
     }
 
     @Override
     public CharSequence getTileLabel() {
         return mContext.getString(R.string.quick_settings_wifi_label);
     }

commit e0a65dd3884719431c225b32688c6ba148620046
Author: inthewaves <inthewaves@pm.me>
Date:   Thu 2020-09-10 17:11:58-0700

    require unlocking to use rotation lock quick tile
---
 .../systemui/qs/tiles/RotationLockTile.java        | 33 ++++++++++++++++++++--
 1 file changed, 30 insertions(+), 3 deletions(-)

diff --git a/packages/SystemUI/src/com/android/systemui/qs/tiles/RotationLockTile.java b/packages/SystemUI/src/com/android/systemui/qs/tiles/RotationLockTile.java
index 5dcb4e3b1fb9960fabd6f5cd1036e1cd708e325d..6bd153da0db7f64f59b2f14505213a1ea38e98c7 100644
--- a/packages/SystemUI/src/com/android/systemui/qs/tiles/RotationLockTile.java
+++ b/packages/SystemUI/src/com/android/systemui/qs/tiles/RotationLockTile.java
@@ -18,58 +18,85 @@ package com.android.systemui.qs.tiles;
 
 import android.content.Intent;
 import android.content.res.Configuration;
 import android.content.res.Resources;
 import android.provider.Settings;
 import android.service.quicksettings.Tile;
 import android.widget.Switch;
 
 import com.android.internal.logging.nano.MetricsProto.MetricsEvent;
 import com.android.systemui.R;
+import com.android.systemui.plugins.ActivityStarter;
 import com.android.systemui.plugins.qs.QSTile.BooleanState;
 import com.android.systemui.qs.QSHost;
 import com.android.systemui.qs.tileimpl.QSTileImpl;
+import com.android.systemui.statusbar.policy.KeyguardStateController;
 import com.android.systemui.statusbar.policy.RotationLockController;
 import com.android.systemui.statusbar.policy.RotationLockController.RotationLockControllerCallback;
 
 import javax.inject.Inject;
 
 /** Quick settings tile: Rotation **/
 public class RotationLockTile extends QSTileImpl<BooleanState> {
 
     private final Icon mIcon = ResourceIcon.get(com.android.internal.R.drawable.ic_qs_auto_rotate);
     private final RotationLockController mController;
 
+    private final ActivityStarter mActivityStarter;
+    private final KeyguardStateController mKeyguard;
+
     @Inject
-    public RotationLockTile(QSHost host, RotationLockController rotationLockController) {
+    public RotationLockTile(QSHost host, RotationLockController rotationLockController,
+            ActivityStarter activityStarter, KeyguardStateController keyguardStateController) {
         super(host);
         mController = rotationLockController;
         mController.observe(this, mCallback);
+
+        mActivityStarter = activityStarter;
+        mKeyguard = keyguardStateController;
+        final KeyguardStateController.Callback callback = new KeyguardStateController.Callback() {
+            @Override
+            public void onKeyguardShowingChanged() {
+                refreshState();
+            }
+        };
+        mKeyguard.observe(this, callback);
     }
 
     @Override
     public BooleanState newTileState() {
         return new BooleanState();
     }
 
     @Override
     public Intent getLongClickIntent() {
         return new Intent(Settings.ACTION_DISPLAY_SETTINGS);
     }
 
-    @Override
-    protected void handleClick() {
+    private void handleClickInner() {
         final boolean newState = !mState.value;
         mController.setRotationLocked(!newState);
         refreshState(newState);
     }
 
+    @Override
+    protected void handleClick() {
+        if (mKeyguard.isMethodSecure() && mKeyguard.isShowing()) {
+            mActivityStarter.postQSRunnableDismissingKeyguard(() -> {
+                mHost.openPanels();
+                handleClickInner();
+            });
+            return;
+        }
+        handleClickInner();
+    }
+
     @Override
     public CharSequence getTileLabel() {
         return getState().label;
     }
 
     @Override
     protected void handleUpdateState(BooleanState state, Object arg) {
         final boolean rotationLocked = mController.isRotationLocked();
 
         state.value = !rotationLocked;

commit 52458a7d752575196ac69fa5efea94a8e9cb0456
Author: inthewaves <inthewaves@pm.me>
Date:   Thu 2020-09-10 17:13:58-0700

    require unlocking to use data saver quick tile
---
 .../android/systemui/qs/tiles/DataSaverTile.java   | 34 ++++++++++++++++++++--
 1 file changed, 31 insertions(+), 3 deletions(-)

diff --git a/packages/SystemUI/src/com/android/systemui/qs/tiles/DataSaverTile.java b/packages/SystemUI/src/com/android/systemui/qs/tiles/DataSaverTile.java
index 8ba60840a666c60799d65f2a1503f998d93d5fa5..94e4c05e1c0adf0936a369a790fe2b67a30480d1 100644
--- a/packages/SystemUI/src/com/android/systemui/qs/tiles/DataSaverTile.java
+++ b/packages/SystemUI/src/com/android/systemui/qs/tiles/DataSaverTile.java
@@ -16,70 +16,98 @@ package com.android.systemui.qs.tiles;
 
 import android.content.DialogInterface.OnClickListener;
 import android.content.Intent;
 import android.provider.Settings;
 import android.service.quicksettings.Tile;
 import android.widget.Switch;
 
 import com.android.internal.logging.nano.MetricsProto.MetricsEvent;
 import com.android.systemui.Prefs;
 import com.android.systemui.R;
+import com.android.systemui.plugins.ActivityStarter;
 import com.android.systemui.plugins.qs.QSTile.BooleanState;
 import com.android.systemui.qs.QSHost;
 import com.android.systemui.qs.tileimpl.QSTileImpl;
 import com.android.systemui.statusbar.phone.SystemUIDialog;
 import com.android.systemui.statusbar.policy.DataSaverController;
+import com.android.systemui.statusbar.policy.KeyguardStateController;
 import com.android.systemui.statusbar.policy.NetworkController;
 
 import javax.inject.Inject;
 
 public class DataSaverTile extends QSTileImpl<BooleanState> implements
         DataSaverController.Listener{
 
     private final DataSaverController mDataSaverController;
 
+    private final ActivityStarter mActivityStarter;
+    private final KeyguardStateController mKeyguard;
+
     @Inject
-    public DataSaverTile(QSHost host, NetworkController networkController) {
+    public DataSaverTile(QSHost host, NetworkController networkController,
+            ActivityStarter activityStarter, KeyguardStateController keyguardStateController) {
         super(host);
         mDataSaverController = networkController.getDataSaverController();
         mDataSaverController.observe(getLifecycle(), this);
+
+        mActivityStarter = activityStarter;
+        mKeyguard = keyguardStateController;
+        final KeyguardStateController.Callback callback = new KeyguardStateController.Callback() {
+            @Override
+            public void onKeyguardShowingChanged() {
+                refreshState();
+            }
+        };
+        mKeyguard.observe(this, callback);
     }
 
     @Override
     public BooleanState newTileState() {
         return new BooleanState();
     }
 
     @Override
     public Intent getLongClickIntent() {
         return new Intent(Settings.ACTION_DATA_SAVER_SETTINGS);
     }
-    @Override
-    protected void handleClick() {
+
+    private void handleClickInner() {
         if (mState.value
                 || Prefs.getBoolean(mContext, Prefs.Key.QS_DATA_SAVER_DIALOG_SHOWN, false)) {
             // Do it right away.
             toggleDataSaver();
             return;
         }
         // Shows dialog first
         SystemUIDialog dialog = new SystemUIDialog(mContext);
         dialog.setTitle(com.android.internal.R.string.data_saver_enable_title);
         dialog.setMessage(com.android.internal.R.string.data_saver_description);
         dialog.setPositiveButton(com.android.internal.R.string.data_saver_enable_button,
                 (OnClickListener) (dialogInterface, which) -> toggleDataSaver());
         dialog.setNegativeButton(com.android.internal.R.string.cancel, null);
         dialog.setShowForAllUsers(true);
         dialog.show();
         Prefs.putBoolean(mContext, Prefs.Key.QS_DATA_SAVER_DIALOG_SHOWN, true);
     }
 
+    @Override
+    protected void handleClick() {
+        if (mKeyguard.isMethodSecure() && mKeyguard.isShowing()) {
+            mActivityStarter.postQSRunnableDismissingKeyguard(() -> {
+                mHost.openPanels();
+                handleClickInner();
+            });
+            return;
+        }
+        handleClickInner();
+    }
+
     private void toggleDataSaver() {
         mState.value = !mDataSaverController.isDataSaverEnabled();
         mDataSaverController.setDataSaverEnabled(mState.value);
         refreshState(mState.value);
     }
 
     @Override
     public CharSequence getTileLabel() {
         return mContext.getString(R.string.data_saver);
     }

commit e883b6577455bcb86961a8026ad38a213df98694
Author: inthewaves <inthewaves@pm.me>
Date:   Thu 2020-09-10 17:15:46-0700

    require unlocking to use hotspot quick tile
---
 .../com/android/systemui/qs/tiles/HotspotTile.java | 33 ++++++++++++++++++++--
 1 file changed, 30 insertions(+), 3 deletions(-)

diff --git a/packages/SystemUI/src/com/android/systemui/qs/tiles/HotspotTile.java b/packages/SystemUI/src/com/android/systemui/qs/tiles/HotspotTile.java
index 1ab77f3f752447ae340b4dd481ec2213277a1681..330caa07764b41ef08ba4f456740760436605698 100644
--- a/packages/SystemUI/src/com/android/systemui/qs/tiles/HotspotTile.java
+++ b/packages/SystemUI/src/com/android/systemui/qs/tiles/HotspotTile.java
@@ -19,46 +19,62 @@ package com.android.systemui.qs.tiles;
 import android.annotation.Nullable;
 import android.content.Intent;
 import android.os.UserManager;
 import android.provider.Settings;
 import android.service.quicksettings.Tile;
 import android.util.Log;
 import android.widget.Switch;
 
 import com.android.internal.logging.nano.MetricsProto.MetricsEvent;
 import com.android.systemui.R;
+import com.android.systemui.plugins.ActivityStarter;
 import com.android.systemui.plugins.qs.QSTile.BooleanState;
 import com.android.systemui.qs.QSHost;
 import com.android.systemui.qs.tileimpl.QSTileImpl;
 import com.android.systemui.statusbar.policy.DataSaverController;
 import com.android.systemui.statusbar.policy.HotspotController;
+import com.android.systemui.statusbar.policy.KeyguardStateController;
 
 import javax.inject.Inject;
 
 /** Quick settings tile: Hotspot **/
 public class HotspotTile extends QSTileImpl<BooleanState> {
     private final Icon mEnabledStatic = ResourceIcon.get(R.drawable.ic_hotspot);
 
     private final HotspotController mHotspotController;
     private final DataSaverController mDataSaverController;
 
+    private final ActivityStarter mActivityStarter;
+    private final KeyguardStateController mKeyguard;
+
     private final HotspotAndDataSaverCallbacks mCallbacks = new HotspotAndDataSaverCallbacks();
     private boolean mListening;
 
     @Inject
     public HotspotTile(QSHost host, HotspotController hotspotController,
-            DataSaverController dataSaverController) {
+            DataSaverController dataSaverController, ActivityStarter activityStarter,
+            KeyguardStateController keyguardStateController) {
         super(host);
         mHotspotController = hotspotController;
         mDataSaverController = dataSaverController;
         mHotspotController.observe(this, mCallbacks);
         mDataSaverController.observe(this, mCallbacks);
+
+        mActivityStarter = activityStarter;
+        mKeyguard = keyguardStateController;
+        final KeyguardStateController.Callback callback = new KeyguardStateController.Callback() {
+            @Override
+            public void onKeyguardShowingChanged() {
+                refreshState();
+            }
+        };
+        mKeyguard.observe(this, callback);
     }
 
     @Override
     public boolean isAvailable() {
         return mHotspotController.isHotspotSupported();
     }
 
     @Override
     protected void handleDestroy() {
         super.handleDestroy();
@@ -77,31 +93,42 @@ public class HotspotTile extends QSTileImpl<BooleanState> {
     @Override
     public Intent getLongClickIntent() {
         return new Intent(Settings.ACTION_TETHER_SETTINGS);
     }
 
     @Override
     public BooleanState newTileState() {
         return new BooleanState();
     }
 
-    @Override
-    protected void handleClick() {
+    private void handleClickInner() {
         final boolean isEnabled = mState.value;
         if (!isEnabled && mDataSaverController.isDataSaverEnabled()) {
             return;
         }
         // Immediately enter transient enabling state when turning hotspot on.
         refreshState(isEnabled ? null : ARG_SHOW_TRANSIENT_ENABLING);
         mHotspotController.setHotspotEnabled(!isEnabled);
     }
 
+    @Override
+    protected void handleClick() {
+        if (mKeyguard.isMethodSecure() && mKeyguard.isShowing()) {
+            mActivityStarter.postQSRunnableDismissingKeyguard(() -> {
+                mHost.openPanels();
+                handleClickInner();
+            });
+            return;
+        }
+        handleClickInner();
+    }
+
     @Override
     public CharSequence getTileLabel() {
         return mContext.getString(R.string.quick_settings_hotspot_label);
     }
 
     @Override
     protected void handleUpdateState(BooleanState state, Object arg) {
         final boolean transientEnabling = arg == ARG_SHOW_TRANSIENT_ENABLING;
         if (state.slash == null) {
             state.slash = new SlashState();

commit 0cc6946f79956ec6bb4af609eb919581a4047060
Author: inthewaves <inthewaves@pm.me>
Date:   Thu 2020-09-10 17:19:36-0700

    require unlocking to use cellular quick tile
---
 .../android/systemui/qs/tiles/CellularTile.java    | 40 +++++++++++++++++++---
 1 file changed, 35 insertions(+), 5 deletions(-)

diff --git a/packages/SystemUI/src/com/android/systemui/qs/tiles/CellularTile.java b/packages/SystemUI/src/com/android/systemui/qs/tiles/CellularTile.java
index 59597ac29e09e71a82d541a3047905c7fb6c8aab..5d52754688db078340f38b0af5f817370e97d4a6 100644
--- a/packages/SystemUI/src/com/android/systemui/qs/tiles/CellularTile.java
+++ b/packages/SystemUI/src/com/android/systemui/qs/tiles/CellularTile.java
@@ -40,46 +40,58 @@ import com.android.settingslib.net.DataUsageController;
 import com.android.systemui.Prefs;
 import com.android.systemui.R;
 import com.android.systemui.plugins.ActivityStarter;
 import com.android.systemui.plugins.qs.DetailAdapter;
 import com.android.systemui.plugins.qs.QSIconView;
 import com.android.systemui.plugins.qs.QSTile.SignalState;
 import com.android.systemui.qs.QSHost;
 import com.android.systemui.qs.SignalTileView;
 import com.android.systemui.qs.tileimpl.QSTileImpl;
 import com.android.systemui.statusbar.phone.SystemUIDialog;
+import com.android.systemui.statusbar.policy.KeyguardStateController;
 import com.android.systemui.statusbar.policy.NetworkController;
 import com.android.systemui.statusbar.policy.NetworkController.IconState;
 import com.android.systemui.statusbar.policy.NetworkController.SignalCallback;
 
 import javax.inject.Inject;
 
 /** Quick settings tile: Cellular **/
 public class CellularTile extends QSTileImpl<SignalState> {
     private static final String ENABLE_SETTINGS_DATA_PLAN = "enable.settings.data.plan";
 
     private final NetworkController mController;
     private final DataUsageController mDataController;
     private final CellularDetailAdapter mDetailAdapter;
 
     private final CellSignalCallback mSignalCallback = new CellSignalCallback();
     private final ActivityStarter mActivityStarter;
 
+    private final KeyguardStateController mKeyguard;
+
     @Inject
     public CellularTile(QSHost host, NetworkController networkController,
-            ActivityStarter activityStarter) {
+            ActivityStarter activityStarter, KeyguardStateController keyguardStateController) {
         super(host);
         mController = networkController;
         mActivityStarter = activityStarter;
         mDataController = mController.getMobileDataController();
         mDetailAdapter = new CellularDetailAdapter();
         mController.observe(getLifecycle(), mSignalCallback);
+
+        mKeyguard = keyguardStateController;
+        final KeyguardStateController.Callback callback = new KeyguardStateController.Callback() {
+            @Override
+            public void onKeyguardShowingChanged() {
+                refreshState();
+            }
+        };
+        mKeyguard.observe(this, callback);
     }
 
     @Override
     public SignalState newTileState() {
         return new SignalState();
     }
 
     @Override
     public QSIconView createTileView(Context context) {
         return new SignalTileView(context);
@@ -91,30 +103,41 @@ public class CellularTile extends QSTileImpl<SignalState> {
     }
 
     @Override
     public Intent getLongClickIntent() {
         if (getState().state == Tile.STATE_UNAVAILABLE) {
             return new Intent(Settings.ACTION_WIRELESS_SETTINGS);
         }
         return getCellularSettingIntent();
     }
 
+    private void handleClickInner() {
+        if (mDataController.isMobileDataEnabled()) {
+            maybeShowDisableDialog();
+        } else {
+            mDataController.setMobileDataEnabled(true);
+        }
+    }
+
     @Override
     protected void handleClick() {
         if (getState().state == Tile.STATE_UNAVAILABLE) {
             return;
         }
-        if (mDataController.isMobileDataEnabled()) {
-            maybeShowDisableDialog();
-        } else {
-            mDataController.setMobileDataEnabled(true);
+        if (mKeyguard.isMethodSecure() && mKeyguard.isShowing()) {
+            mActivityStarter.postQSRunnableDismissingKeyguard(() -> {
+                mHost.openPanels();
+                handleClickInner();
+            });
+            return;
         }
+        handleClickInner();
     }
 
     private void maybeShowDisableDialog() {
         if (Prefs.getBoolean(mContext, QS_HAS_TURNED_OFF_MOBILE_DATA, false)) {
             // Directly turn off mobile data if the user has seen the dialog before.
             mDataController.setMobileDataEnabled(false);
             return;
         }
         String carrierName = mController.getMobileDataNetworkName();
         boolean isInService = mController.isMobileDataNetworkInService();
@@ -135,20 +158,27 @@ public class CellularTile extends QSTileImpl<SignalState> {
         dialog.getWindow().setType(LayoutParams.TYPE_KEYGUARD_DIALOG);
         SystemUIDialog.setShowForAllUsers(dialog, true);
         SystemUIDialog.registerDismissListener(dialog);
         SystemUIDialog.setWindowOnTop(dialog);
         dialog.show();
     }
 
     @Override
     protected void handleSecondaryClick() {
         if (mDataController.isMobileDataSupported()) {
+            if (mKeyguard.isMethodSecure() && mKeyguard.isShowing()) {
+                mActivityStarter.postQSRunnableDismissingKeyguard(() -> {
+                    mHost.openPanels();
+                    showDetail(true);
+                });
+                return;
+            }
             showDetail(true);
         } else {
             mActivityStarter
                     .postStartActivityDismissingKeyguard(getCellularSettingIntent(),0 /* delay */);
         }
     }
 
     @Override
     public CharSequence getTileLabel() {
         return mContext.getString(R.string.quick_settings_cellular_detail_title);

commit 2ddfb8fcfd7bdb3fb1a9f19cfecd6fd02b941ed5
Author: inthewaves <inthewaves@pm.me>
Date:   Thu 2020-09-10 17:21:16-0700

    require unlocking to use battery saver tile
---
 .../systemui/qs/tiles/BatterySaverTile.java        | 25 +++++++++++++++++++++-
 1 file changed, 24 insertions(+), 1 deletion(-)

diff --git a/packages/SystemUI/src/com/android/systemui/qs/tiles/BatterySaverTile.java b/packages/SystemUI/src/com/android/systemui/qs/tiles/BatterySaverTile.java
index 7150e435030495fffb197aa4f4e93cb32ed62469..2b11125360d308dba9150ea2208cf2da825e4efd 100644
--- a/packages/SystemUI/src/com/android/systemui/qs/tiles/BatterySaverTile.java
+++ b/packages/SystemUI/src/com/android/systemui/qs/tiles/BatterySaverTile.java
@@ -16,55 +16,71 @@
 package com.android.systemui.qs.tiles;
 
 import android.content.Intent;
 import android.provider.Settings.Secure;
 import android.service.quicksettings.Tile;
 import android.widget.Switch;
 
 import com.android.internal.annotations.VisibleForTesting;
 import com.android.internal.logging.nano.MetricsProto.MetricsEvent;
 import com.android.systemui.R;
+import com.android.systemui.plugins.ActivityStarter;
 import com.android.systemui.plugins.qs.QSTile.BooleanState;
 import com.android.systemui.qs.QSHost;
 import com.android.systemui.qs.SecureSetting;
 import com.android.systemui.qs.tileimpl.QSTileImpl;
 import com.android.systemui.statusbar.policy.BatteryController;
+import com.android.systemui.statusbar.policy.KeyguardStateController;
 
 import javax.inject.Inject;
 
 public class BatterySaverTile extends QSTileImpl<BooleanState> implements
         BatteryController.BatteryStateChangeCallback {
 
     private final BatteryController mBatteryController;
     @VisibleForTesting
     protected final SecureSetting mSetting;
 
+    private final ActivityStarter mActivityStarter;
+    private final KeyguardStateController mKeyguard;
+
     private int mLevel;
     private boolean mPowerSave;
     private boolean mCharging;
     private boolean mPluggedIn;
 
     private Icon mIcon = ResourceIcon.get(com.android.internal.R.drawable.ic_qs_battery_saver);
 
     @Inject
-    public BatterySaverTile(QSHost host, BatteryController batteryController) {
+    public BatterySaverTile(QSHost host, BatteryController batteryController,
+            ActivityStarter activityStarter, KeyguardStateController keyguardStateController) {
         super(host);
         mBatteryController = batteryController;
         mBatteryController.observe(getLifecycle(), this);
         int currentUser = host.getUserContext().getUserId();
         mSetting = new SecureSetting(mContext, mHandler, Secure.LOW_POWER_WARNING_ACKNOWLEDGED,
                 currentUser) {
             @Override
             protected void handleValueChanged(int value, boolean observedChange) {
                 handleRefreshState(null);
             }
         };
+
+        mActivityStarter = activityStarter;
+        mKeyguard = keyguardStateController;
+        final KeyguardStateController.Callback callback = new KeyguardStateController.Callback() {
+            @Override
+            public void onKeyguardShowingChanged() {
+                refreshState();
+            }
+        };
+        mKeyguard.observe(this, callback);
     }
 
     @Override
     public BooleanState newTileState() {
         return new BooleanState();
     }
 
     @Override
     protected void handleDestroy() {
         super.handleDestroy();
@@ -90,20 +106,27 @@ public class BatterySaverTile extends QSTileImpl<BooleanState> implements
     @Override
     public Intent getLongClickIntent() {
         return new Intent(Intent.ACTION_POWER_USAGE_SUMMARY);
     }
 
     @Override
     protected void handleClick() {
         if (getState().state == Tile.STATE_UNAVAILABLE) {
             return;
         }
+        if (mKeyguard.isMethodSecure() && mKeyguard.isShowing()) {
+            mActivityStarter.postQSRunnableDismissingKeyguard(() -> {
+                mHost.openPanels();
+                mBatteryController.setPowerSaveMode(!mPowerSave);
+            });
+            return;
+        }
         mBatteryController.setPowerSaveMode(!mPowerSave);
     }
 
     @Override
     public CharSequence getTileLabel() {
         return mContext.getString(R.string.battery_detail_switch_title);
     }
 
     @Override
     protected void handleUpdateState(BooleanState state, Object arg) {

commit 746962aec62144a0af0414a9fa1383e1f1ff8131
Author: inthewaves <inthewaves@pm.me>
Date:   Thu 2020-09-10 17:22:41-0700

    require unlocking to use work mode tile
---
 .../android/systemui/qs/tiles/WorkModeTile.java    | 25 +++++++++++++++++++++-
 1 file changed, 24 insertions(+), 1 deletion(-)

diff --git a/packages/SystemUI/src/com/android/systemui/qs/tiles/WorkModeTile.java b/packages/SystemUI/src/com/android/systemui/qs/tiles/WorkModeTile.java
index 318c0c4660cb925c44cd7bb98e8795101ae01caf..a8171878ecbd4c9b28f7c682ad4ebd52630252e5 100644
--- a/packages/SystemUI/src/com/android/systemui/qs/tiles/WorkModeTile.java
+++ b/packages/SystemUI/src/com/android/systemui/qs/tiles/WorkModeTile.java
@@ -16,53 +16,76 @@
 
 package com.android.systemui.qs.tiles;
 
 import android.content.Intent;
 import android.provider.Settings;
 import android.service.quicksettings.Tile;
 import android.widget.Switch;
 
 import com.android.internal.logging.nano.MetricsProto.MetricsEvent;
 import com.android.systemui.R;
+import com.android.systemui.plugins.ActivityStarter;
 import com.android.systemui.plugins.qs.QSTile.BooleanState;
 import com.android.systemui.qs.QSHost;
 import com.android.systemui.qs.tileimpl.QSTileImpl;
 import com.android.systemui.statusbar.phone.ManagedProfileController;
+import com.android.systemui.statusbar.policy.KeyguardStateController;
 
 import javax.inject.Inject;
 
 /** Quick settings tile: Work profile on/off */
 public class WorkModeTile extends QSTileImpl<BooleanState> implements
         ManagedProfileController.Callback {
     private final Icon mIcon = ResourceIcon.get(R.drawable.stat_sys_managed_profile_status);
 
     private final ManagedProfileController mProfileController;
 
+    private final ActivityStarter mActivityStarter;
+    private final KeyguardStateController mKeyguard;
+
     @Inject
-    public WorkModeTile(QSHost host, ManagedProfileController managedProfileController) {
+    public WorkModeTile(QSHost host, ManagedProfileController managedProfileController,
+            ActivityStarter activityStarter, KeyguardStateController keyguardStateController) {
         super(host);
         mProfileController = managedProfileController;
         mProfileController.observe(getLifecycle(), this);
+
+        mActivityStarter = activityStarter;
+        mKeyguard = keyguardStateController;
+        final KeyguardStateController.Callback callback = new KeyguardStateController.Callback() {
+            @Override
+            public void onKeyguardShowingChanged() {
+                refreshState();
+            }
+        };
+        mKeyguard.observe(this, callback);
     }
 
     @Override
     public BooleanState newTileState() {
         return new BooleanState();
     }
 
     @Override
     public Intent getLongClickIntent() {
         return new Intent(Settings.ACTION_MANAGED_PROFILE_SETTINGS);
     }
 
     @Override
     public void handleClick() {
+        if (mKeyguard.isMethodSecure() && mKeyguard.isShowing()) {
+            mActivityStarter.postQSRunnableDismissingKeyguard(() -> {
+                mHost.openPanels();
+                mProfileController.setWorkModeEnabled(!mState.value);
+            });
+            return;
+        }
         mProfileController.setWorkModeEnabled(!mState.value);
     }
 
     @Override
     public boolean isAvailable() {
         return mProfileController.hasActiveProfile();
     }
 
     @Override
     public void onManagedProfileChanged() {

commit d583b9cd5becb3879a25710d24a29c9a559d49fa
Author: inthewaves <inthewaves@pm.me>
Date:   Thu 2020-09-10 15:18:00-0700

    try to fix upstream status bar+keyguard bug
    
    It seems an upstream bug comes from `mLeaveOpenOnKeyguardHide` inside of
    StatusBarStateControllerImpl.java, The bug seems to be that
    `mLeaveOpenOnKeyguardHide` is left at `true` when the status bar is
    closed, resulting in some weird behavior after the keyguard is hidden
    (probably any code that reads that boolean field expects the status bar
    to still be open: "leaveOpen").
    
    Both `StatusBar.postQSRunnableDismissingKeyguard` and the lockscreen
    notification expansion gesture code can set `mLeaveOpenOnKeyguardHide`
    to true, leading to this bug. Able to reproduce the bug via the
    notification gesture on the stock OS (sargo-rp1a.200720.009). See
    https://github.com/GrapheneOS/platform_frameworks_base/pull/34#issuecomment-690777142
    for more details. Was not able to reproduce this via the notification
    gesture on an Android 10 (GrapheneOS QQ3A.200805.001.2020.08.07.01)
    release.
    
    How to reproduce for the tiles:
    1. tapping any sensitive tile on the lockscreen,
    2. pressing the back button to close the keyguard input,
    3. collapsing the notification panel completely, and waiting for a few
       seconds,
    4. unlocking the lock screen to hide keyguard.
    
    Then, the panel bar no longer becomes expandable until you keep
    trying.
    
    This attempts to fix/workaround the bug by setting mLeaveOpenOnKeyguardHide
    to be false when the status bar panel is closed.
---
 .../SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java    | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java
index f125b7d1003520f9a0d16c2c90b39c70146192ea..b41151f917520946e102953a49d3c78f6b8e15ec 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java
@@ -3623,20 +3623,22 @@ public class StatusBar extends SystemUI implements DemoMode,
         mShadeController.runPostCollapseRunnables();
     }
 
     public void onClosingFinished() {
         mShadeController.runPostCollapseRunnables();
         if (!mPresenter.isPresenterFullyCollapsed()) {
             // if we set it not to be focusable when collapsing, we have to undo it when we aborted
             // the closing
             mNotificationShadeWindowController.setNotificationShadeFocusable(true);
         }
+        // It's closed; no need to leave it open.
+        mStatusBarStateController.setLeaveOpenOnKeyguardHide(false);
     }
 
     public void onUnlockHintStarted() {
         mFalsingManager.onUnlockHintStarted();
         mKeyguardIndicationController.showTransientIndication(R.string.keyguard_unlock);
     }
 
     public void onHintFinished() {
         // Delay the reset a bit so the user can read the text.
         mKeyguardIndicationController.hideTransientIndicationDelayed(HINT_RESET_DELAY_MS);

commit 446dabdd2deb50d20af5e1bf546c27f352027bd9
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Wed 2017-09-06 21:40:48-0400

    always set deprecated Build.SERIAL to UNKNOWN
    
    Only support fetching the serial number via the new Build.getSerial()
    requiring the READ_PHONE_STATE permission.
---
 .../core/java/com/android/server/am/ActivityManagerService.java    | 7 +------
 1 file changed, 1 insertion(+), 6 deletions(-)

diff --git a/services/core/java/com/android/server/am/ActivityManagerService.java b/services/core/java/com/android/server/am/ActivityManagerService.java
index c9eb7e624a02fff2b6d25587213c871360691583..81a44b431a8e83a4874bb650d15a5f8ab08564ed 100644
--- a/services/core/java/com/android/server/am/ActivityManagerService.java
+++ b/services/core/java/com/android/server/am/ActivityManagerService.java
@@ -5230,26 +5230,21 @@ public class ActivityManagerService extends IActivityManager.Stub
             }
 
             if (profilerInfo != null && profilerInfo.profileFd != null) {
                 profilerInfo.profileFd = profilerInfo.profileFd.dup();
                 if (TextUtils.equals(mProfileData.getProfileApp(), processName)
                         && mProfileData.getProfilerInfo() != null) {
                     clearProfilerLocked();
                 }
             }
 
-            // We deprecated Build.SERIAL and it is not accessible to
-            // Instant Apps and target APIs higher than O MR1. Since access to the serial
-            // is now behind a permission we push down the value.
-            final String buildSerial = (!appInfo.isInstantApp()
-                    && appInfo.targetSdkVersion < Build.VERSION_CODES.P)
-                            ? sTheRealBuildSerial : Build.UNKNOWN;
+            final String buildSerial = Build.UNKNOWN;
 
             // Check if this is a secondary process that should be incorporated into some
             // currently active instrumentation.  (Note we do this AFTER all of the profiling
             // stuff above because profiling can currently happen only in the primary
             // instrumentation process.)
             if (mActiveInstrumentation.size() > 0 && instr == null) {
                 for (int i = mActiveInstrumentation.size() - 1;
                         i >= 0 && app.getActiveInstrumentation() == null; i--) {
                     ActiveInstrumentation aInstr = mActiveInstrumentation.get(i);
                     if (!aInstr.mFinished && aInstr.mTargetInfo.uid == app.uid) {

commit 3ea757ae3be18d3c31bbbe5e5c8947f368f5ce7a
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Sun 2019-03-17 19:54:30-0400

    stop auto-granting location to system browsers
---
 .../permission/DefaultPermissionGrantPolicy.java   | 28 +++++++++++-----------
 1 file changed, 14 insertions(+), 14 deletions(-)

diff --git a/services/core/java/com/android/server/pm/permission/DefaultPermissionGrantPolicy.java b/services/core/java/com/android/server/pm/permission/DefaultPermissionGrantPolicy.java
index cd53fb9ba52f44d6f5ac7abd9a51ac8bd8f807f3..a08cbb5ceecd7cee40e1f3e4f1bea73e769f5a4b 100644
--- a/services/core/java/com/android/server/pm/permission/DefaultPermissionGrantPolicy.java
+++ b/services/core/java/com/android/server/pm/permission/DefaultPermissionGrantPolicy.java
@@ -675,31 +675,31 @@ public final class DefaultPermissionGrantPolicy {
                         DevicePolicyManager.ACTION_PROVISION_MANAGED_DEVICE, userId),
                 userId, CONTACTS_PERMISSIONS);
 
         // Email
         grantPermissionsToSystemPackage(pm,
                 getDefaultSystemHandlerActivityPackageForCategory(pm,
                         Intent.CATEGORY_APP_EMAIL, userId),
                 userId, CONTACTS_PERMISSIONS, CALENDAR_PERMISSIONS);
 
         // Browser
-        String browserPackage = ArrayUtils.firstOrNull(getKnownPackages(
-                PackageManagerInternal.PACKAGE_BROWSER, userId));
-        if (browserPackage == null) {
-            browserPackage = getDefaultSystemHandlerActivityPackageForCategory(pm,
-                    Intent.CATEGORY_APP_BROWSER, userId);
-            if (!pm.isSystemPackage(browserPackage)) {
-                browserPackage = null;
-            }
-        }
-        grantPermissionsToPackage(pm, browserPackage, userId, false /* ignoreSystemPackage */,
-                true /*whitelistRestrictedPermissions*/, FOREGROUND_LOCATION_PERMISSIONS);
+        //String browserPackage = ArrayUtils.firstOrNull(getKnownPackages(
+                //PackageManagerInternal.PACKAGE_BROWSER, userId));
+        //if (browserPackage == null) {
+            //browserPackage = getDefaultSystemHandlerActivityPackageForCategory(pm,
+                    //Intent.CATEGORY_APP_BROWSER, userId);
+            //if (!pm.isSystemPackage(browserPackage)) {
+                //browserPackage = null;
+            //}
+        //}
+        //grantPermissionsToPackage(pm, browserPackage, userId, false [> ignoreSystemPackage <],
+                //true [>whitelistRestrictedPermissions<], FOREGROUND_LOCATION_PERMISSIONS);
 
         // Voice interaction
         if (voiceInteractPackageNames != null) {
             for (String voiceInteractPackageName : voiceInteractPackageNames) {
                 grantPermissionsToSystemPackage(pm, voiceInteractPackageName, userId,
                         CONTACTS_PERMISSIONS, CALENDAR_PERMISSIONS, MICROPHONE_PERMISSIONS,
                         PHONE_PERMISSIONS, SMS_PERMISSIONS, ALWAYS_LOCATION_PERMISSIONS);
             }
         }
 
@@ -985,23 +985,23 @@ public final class DefaultPermissionGrantPolicy {
         for (String packageName : packageNames) {
             PackageInfo pkg = NO_PM_CACHE.getSystemPackageInfo(packageName);
             if (NO_PM_CACHE.isSystemPackage(pkg) && doesPackageSupportRuntimePermissions(pkg)) {
                 revokeRuntimePermissions(NO_PM_CACHE, packageName, CAMERA_PERMISSIONS, true,
                         userId);
             }
         }
     }
 
     public void grantDefaultPermissionsToDefaultBrowser(String packageName, int userId) {
-        Log.i(TAG, "Granting permissions to default browser for user:" + userId);
-        grantPermissionsToSystemPackage(NO_PM_CACHE, packageName, userId,
-                FOREGROUND_LOCATION_PERMISSIONS);
+        //Log.i(TAG, "Granting permissions to default browser for user:" + userId);
+        //grantPermissionsToSystemPackage(NO_PM_CACHE, packageName, userId,
+                //FOREGROUND_LOCATION_PERMISSIONS);
     }
 
     private String getDefaultSystemHandlerActivityPackage(PackageManagerWrapper pm,
             String intentAction, int userId) {
         return getDefaultSystemHandlerActivityPackage(pm, new Intent(intentAction), userId);
     }
 
     private String getDefaultSystemHandlerActivityPackage(PackageManagerWrapper pm, Intent intent,
             int userId) {
         ResolveInfo handler = mContext.getPackageManager().resolveActivityAsUser(

commit 6a7a3559ca1f43f9d6f7dbe0ff235eda488462b8
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Sun 2017-01-15 18:18:09-0500

    add option to scramble PIN
    
    Adapted from work by Adnan <adnan@cyngn.com> for CyanogenMod.
    
    Change-Id: I416895210128cc0fc174201c29dc1e4dc9d14eb6
---
 core/java/android/provider/Settings.java           |  7 ++++++
 .../src/com/android/keyguard/KeyguardPINView.java  | 29 ++++++++++++++++++++++
 .../src/com/android/keyguard/NumPadKey.java        | 26 +++++++++++++------
 3 files changed, 55 insertions(+), 7 deletions(-)

diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index df14720093530ef7967ca91270cdfc37f2ce6bbc..c8c235eeb9c963e5db67ffaf9ad2035eaea5f0b6 100755
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -3882,20 +3882,27 @@ public final class Settings {
 
         /**
          * @deprecated Use
          * {@link android.provider.Settings.Secure#LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED}
          * instead
          */
         @Deprecated
         public static final String LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED =
             "lock_pattern_tactile_feedback_enabled";
 
+        /**
+         * Whether to scramble a pin unlock layout
+         * @hide
+         */
+        public static final String SCRAMBLE_PIN_LAYOUT =
+            "lockscreen_scramble_pin_layout";
+
         /**
          * A formatted string of the next alarm that is set, or the empty string
          * if there is no alarm set.
          *
          * @deprecated Use {@link android.app.AlarmManager#getNextAlarmClock()}.
          */
         @Deprecated
         public static final String NEXT_ALARM_FORMATTED = "next_alarm_formatted";
 
         /**
diff --git a/packages/SystemUI/src/com/android/keyguard/KeyguardPINView.java b/packages/SystemUI/src/com/android/keyguard/KeyguardPINView.java
index 12ea1d586e103336ab5e663b9544893497a88acf..b7ef91e7b2559adfe71afe716bd1061491081673 100644
--- a/packages/SystemUI/src/com/android/keyguard/KeyguardPINView.java
+++ b/packages/SystemUI/src/com/android/keyguard/KeyguardPINView.java
@@ -10,24 +10,31 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 package com.android.keyguard;
 
 import android.content.Context;
+import android.provider.Settings;
 import android.util.AttributeSet;
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.animation.AnimationUtils;
+import android.widget.LinearLayout;
+
+import java.security.SecureRandom;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
 
 import com.android.settingslib.animation.AppearAnimationUtils;
 import com.android.settingslib.animation.DisappearAnimationUtils;
 import com.android.systemui.Dependency;
 import com.android.systemui.R;
 
 /**
  * Displays a PIN pad for unlocking.
  */
 public class KeyguardPINView extends KeyguardPinBasedInputView {
@@ -113,20 +120,42 @@ public class KeyguardPINView extends KeyguardPinBasedInputView {
                         null, mEcaView, null
                 }};
 
         View cancelBtn = findViewById(R.id.cancel_button);
         if (cancelBtn != null) {
             cancelBtn.setOnClickListener(view -> {
                 mCallback.reset();
                 mCallback.onCancelClicked();
             });
         }
+        boolean scramblePin = Settings.System.getInt(getContext().getContentResolver(),
+                Settings.System.SCRAMBLE_PIN_LAYOUT, 0) == 1;
+
+        if (scramblePin) {
+            List<Integer> digits = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 0);
+            Collections.shuffle(digits, new SecureRandom());
+            LinearLayout container = (LinearLayout) findViewById(R.id.container);
+            int finished = 0;
+            for (int i = 0; i < container.getChildCount(); i++) {
+                if (container.getChildAt(i) instanceof LinearLayout) {
+                    LinearLayout nestedLayout = ((LinearLayout) container.getChildAt(i));
+                    for (int j = 0; j < nestedLayout.getChildCount(); j++){
+                        View view = nestedLayout.getChildAt(j);
+                        if (view.getClass() == NumPadKey.class) {
+                            NumPadKey key = (NumPadKey) view;
+                            key.setDigit(digits.get(finished));
+                            finished++;
+                        }
+                    }
+                }
+            }
+        }
     }
 
     @Override
     public void showUsabilityHint() {
     }
 
     @Override
     public int getWrongPasswordStringId() {
         return R.string.kg_wrong_pin;
     }
diff --git a/packages/SystemUI/src/com/android/keyguard/NumPadKey.java b/packages/SystemUI/src/com/android/keyguard/NumPadKey.java
index b0457fce6a1a0ae9b80a145566e0c82c2bb2776c..5ac6bc3b5b5c37c835db30829b691a252216c9fb 100644
--- a/packages/SystemUI/src/com/android/keyguard/NumPadKey.java
+++ b/packages/SystemUI/src/com/android/keyguard/NumPadKey.java
@@ -13,20 +13,21 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 package com.android.keyguard;
 
 import android.content.Context;
 import android.content.res.TypedArray;
 import android.os.PowerManager;
 import android.os.SystemClock;
+import android.provider.Settings;
 import android.util.AttributeSet;
 import android.view.HapticFeedbackConstants;
 import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.TextView;
 
 import com.android.internal.widget.LockPatternUtils;
 import com.android.systemui.R;
@@ -95,41 +96,52 @@ public class NumPadKey extends ViewGroup {
         mLockPatternUtils = new LockPatternUtils(context);
         mPM = (PowerManager) mContext.getSystemService(Context.POWER_SERVICE);
         LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(
                 Context.LAYOUT_INFLATER_SERVICE);
         inflater.inflate(contentResource, this, true);
 
         mDigitText = (TextView) findViewById(R.id.digit_text);
         mDigitText.setText(Integer.toString(mDigit));
         mKlondikeText = (TextView) findViewById(R.id.klondike_text);
 
+        updateText();
+        a = context.obtainStyledAttributes(attrs, android.R.styleable.View);
+        if (!a.hasValueOrEmpty(android.R.styleable.View_background)) {
+            setBackground(mContext.getDrawable(R.drawable.ripple_drawable_pin));
+        }
+        a.recycle();
+        setContentDescription(mDigitText.getText().toString());
+    }
+
+    private void updateText() {
+        boolean scramblePin = Settings.System.getInt(getContext().getContentResolver(),
+                Settings.System.SCRAMBLE_PIN_LAYOUT, 0) == 1;
         if (mDigit >= 0) {
+            mDigitText.setText(Integer.toString(mDigit));
             if (sKlondike == null) {
                 sKlondike = getResources().getStringArray(R.array.lockscreen_num_pad_klondike);
             }
             if (sKlondike != null && sKlondike.length > mDigit) {
                 String klondike = sKlondike[mDigit];
                 final int len = klondike.length();
-                if (len > 0) {
+                if (len > 0 || scramblePin) {
                     mKlondikeText.setText(klondike);
                 } else {
                     mKlondikeText.setVisibility(View.INVISIBLE);
                 }
             }
         }
+    }
 
-        a = context.obtainStyledAttributes(attrs, android.R.styleable.View);
-        if (!a.hasValueOrEmpty(android.R.styleable.View_background)) {
-            setBackground(mContext.getDrawable(R.drawable.ripple_drawable_pin));
-        }
-        a.recycle();
-        setContentDescription(mDigitText.getText().toString());
+    public void setDigit(int digit) {
+        mDigit = digit;
+        updateText();
     }
 
     @Override
     public boolean onTouchEvent(MotionEvent event) {
         if (event.getActionMasked() == MotionEvent.ACTION_DOWN) {
             doHapticKeyClick();
         }
         return super.onTouchEvent(event);
     }
 

commit be0ecc1b33417d935aab5a70f708efbaa674aedd
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Tue 2017-07-25 11:22:33-0400

    add system property for disabling keyguard camera
    
    Change-Id: I0b65cac3c3d2fc495b339c34add742bd698b107c
---
 .../android/systemui/statusbar/phone/KeyguardBottomAreaView.java  | 4 +++-
 services/core/java/com/android/server/GestureLauncherService.java | 8 ++++++++
 2 files changed, 11 insertions(+), 1 deletion(-)

diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/KeyguardBottomAreaView.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/KeyguardBottomAreaView.java
index b47c59acb82dbeabd42069b6ff3926398942bd90..9d9d30abd0be70b473f1a5e9fc446acc1cb8a584 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/KeyguardBottomAreaView.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/KeyguardBottomAreaView.java
@@ -39,20 +39,21 @@ import android.content.pm.ActivityInfo;
 import android.content.pm.PackageManager;
 import android.content.pm.ResolveInfo;
 import android.content.res.Configuration;
 import android.graphics.drawable.Drawable;
 import android.os.AsyncTask;
 import android.os.Bundle;
 import android.os.IBinder;
 import android.os.Message;
 import android.os.Messenger;
 import android.os.RemoteException;
+import android.os.SystemProperties;
 import android.os.UserHandle;
 import android.provider.MediaStore;
 import android.service.media.CameraPrewarmService;
 import android.telecom.TelecomManager;
 import android.text.TextUtils;
 import android.util.AttributeSet;
 import android.util.Log;
 import android.util.TypedValue;
 import android.view.View;
 import android.view.ViewGroup;
@@ -813,21 +814,22 @@ public class KeyguardBottomAreaView extends FrameLayout implements View.OnClickL
     private class DefaultRightButton implements IntentButton {
 
         private IconState mIconState = new IconState();
 
         @Override
         public IconState getIcon() {
             boolean isCameraDisabled = (mStatusBar != null) && !mStatusBar.isCameraAllowedByAdmin();
             mIconState.isVisible = !isCameraDisabled
                     && mShowCameraAffordance
                     && mUserSetupComplete
-                    && resolveCameraIntent() != null;
+                    && resolveCameraIntent() != null
+                    && SystemProperties.getBoolean("persist.keyguard.camera", true);
             mIconState.drawable = mContext.getDrawable(R.drawable.ic_camera_alt_24dp);
             mIconState.contentDescription =
                     mContext.getString(R.string.accessibility_camera_button);
             return mIconState;
         }
 
         @Override
         public Intent getIntent() {
             boolean canDismissLs = mKeyguardStateController.canDismissLockScreen();
             boolean secure = mKeyguardStateController.isMethodSecure();
diff --git a/services/core/java/com/android/server/GestureLauncherService.java b/services/core/java/com/android/server/GestureLauncherService.java
index 9d71489c8abe45d9b6a3b077e29b4d2f03da6aea..5b6c59f031bbbf14a72e4aeff5740a63bc817157 100644
--- a/services/core/java/com/android/server/GestureLauncherService.java
+++ b/services/core/java/com/android/server/GestureLauncherService.java
@@ -10,20 +10,21 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 package com.android.server;
 
 import android.app.ActivityManager;
+import android.app.KeyguardManager;
 import android.app.StatusBarManager;
 import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
 import android.content.res.Resources;
 import android.database.ContentObserver;
 import android.hardware.Sensor;
 import android.hardware.SensorEvent;
 import android.hardware.SensorEventListener;
@@ -429,20 +430,27 @@ public class GestureLauncherService extends SystemService {
         return intercept && launched;
     }
 
     /**
      * @return true if camera was launched, false otherwise.
      */
     @VisibleForTesting
     boolean handleCameraGesture(boolean useWakelock, int source) {
         Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, "GestureLauncher:handleCameraGesture");
         try {
+            if (!SystemProperties.getBoolean("persist.keyguard.camera", true)) {
+                final KeyguardManager manager = (KeyguardManager) getContext().getSystemService(
+                        Context.KEYGUARD_SERVICE);
+                if (manager.inKeyguardRestrictedInputMode()) {
+                    return false;
+                }
+            }
             boolean userSetupComplete = Settings.Secure.getIntForUser(mContext.getContentResolver(),
                     Settings.Secure.USER_SETUP_COMPLETE, 0, UserHandle.USER_CURRENT) != 0;
             if (!userSetupComplete) {
                 if (DBG) {
                     Slog.d(TAG, String.format(
                             "userSetupComplete = %s, ignoring camera gesture.",
                             userSetupComplete));
                 }
                 return false;
             }

commit 076b8a2535c45541b226b80500f22d859145e5e3
Author: Chirayu Desai <chirayudesai1@gmail.com>
Date:   Fri 2019-12-27 22:44:06+1100

    add seedvault as default backup provider and enable backup functionality
    
    SettingsProvider: Set Seedvault as the default backup provider
    
    Co-authored-by: Renlord Yang <me@renlord.com>
---
 packages/SettingsProvider/res/values/defaults.xml  |  4 ++--
 .../providers/settings/SettingsProvider.java       | 27 ++++++++++++++++++++++
 2 files changed, 29 insertions(+), 2 deletions(-)

diff --git a/packages/SettingsProvider/res/values/defaults.xml b/packages/SettingsProvider/res/values/defaults.xml
index 658be01e64ac5b9eca4ae06b0f3844ecbe5aa2fb..b765c915450fd29bfb89e4345b014115c28ef29e 100644
--- a/packages/SettingsProvider/res/values/defaults.xml
+++ b/packages/SettingsProvider/res/values/defaults.xml
@@ -43,22 +43,22 @@
     <integer name="def_location_mode">3</integer>
     <bool name="assisted_gps_enabled">true</bool>
     <bool name="def_netstats_enabled">true</bool>
     <bool name="def_usb_mass_storage_enabled">true</bool>
     <bool name="def_wifi_on">false</bool>
     <!-- 0 == never, 1 == only when plugged in, 2 == always -->
     <integer name="def_wifi_sleep_policy">2</integer>
     <bool name="def_wifi_wakeup_enabled">true</bool>
     <bool name="def_networks_available_notification_on">true</bool>
 
-    <bool name="def_backup_enabled">false</bool>
-    <string name="def_backup_transport" translatable="false">com.android.localtransport/.LocalTransport</string>
+    <bool name="def_backup_enabled">true</bool>
+    <string name="def_backup_transport" translatable="false">com.stevesoltys.seedvault.transport.ConfigurableBackupTransport</string>
 
     <!-- Default value for whether or not to pulse the notification LED when there is a
          pending notification -->
     <bool name="def_notification_pulse">true</bool>
 
     <bool name="def_mount_play_notification_snd">true</bool>
     <bool name="def_mount_ums_autostart">false</bool>
     <bool name="def_mount_ums_prompt">true</bool>
     <bool name="def_mount_ums_notify_enabled">true</bool>
 
diff --git a/packages/SettingsProvider/src/com/android/providers/settings/SettingsProvider.java b/packages/SettingsProvider/src/com/android/providers/settings/SettingsProvider.java
index b95d34f2966ba4665a0c196179e0948fa299755f..e6ac9976cd7578ec426f9536fcabb0ee7594c211 100644
--- a/packages/SettingsProvider/src/com/android/providers/settings/SettingsProvider.java
+++ b/packages/SettingsProvider/src/com/android/providers/settings/SettingsProvider.java
@@ -4875,20 +4875,47 @@ public class SettingsProvider extends ContentProvider {
                     if (currentSetting.isNull()) {
                         globalSettings.insertSettingLocked(
                                 Global.HDMI_CONTROL_AUTO_DEVICE_OFF_ENABLED,
                                 getContext().getResources().getBoolean(
                                         R.bool.def_hdmiControlAutoDeviceOff) ? "1" : "0",
                                 null, true, SettingsState.SYSTEM_PACKAGE_NAME);
                     }
                     currentVersion = 191;
                 }
 
+                if (currentVersion == 183) {
+                    // Version 184: Update default Backup app to Seedvault
+                    final SettingsState secureSettings = getSecureSettingsLocked(userId);
+                    Setting currentBackupTransportSetting = secureSettings.getSettingLocked(
+                            Secure.BACKUP_TRANSPORT);
+                    if (currentBackupTransportSetting.isDefaultFromSystem()) {
+                        secureSettings.insertSettingLocked(
+                                Settings.Secure.BACKUP_TRANSPORT,
+                                getContext().getResources().getString(
+                                        R.string.def_backup_transport),
+                                null, true,
+                                SettingsState.SYSTEM_PACKAGE_NAME);
+                    }
+
+                    Setting currentBackupEnabledSetting = secureSettings.getSettingLocked(
+                            Secure.BACKUP_ENABLED);
+                    if (currentBackupEnabledSetting.isDefaultFromSystem()) {
+                        secureSettings.insertSettingLocked(
+                                Settings.Secure.BACKUP_ENABLED,
+                                getContext().getResources().getBoolean(
+                                        R.bool.def_backup_enabled)? "1" : "0",
+                                null, true,
+                                SettingsState.SYSTEM_PACKAGE_NAME);
+                    }
+                    currentVersion = 184;
+                }
+
                 // vXXX: Add new settings above this point.
 
                 if (currentVersion != newVersion) {
                     Slog.wtf("SettingsProvider", "warning: upgrading settings database to version "
                             + newVersion + " left it at "
                             + currentVersion +
                             " instead; this is probably a bug. Did you update SETTINGS_VERSION?",
                             new Throwable());
                     if (DEBUG) {
                         throw new RuntimeException("db upgrade error");

commit f724486a347b1d66e7ee680312e1e4e1976c2cba
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Sun 2021-02-21 08:39:04-0500

    drop Seedvault backup provider migration code
---
 .../providers/settings/SettingsProvider.java       | 27 ----------------------
 1 file changed, 27 deletions(-)

diff --git a/packages/SettingsProvider/src/com/android/providers/settings/SettingsProvider.java b/packages/SettingsProvider/src/com/android/providers/settings/SettingsProvider.java
index e6ac9976cd7578ec426f9536fcabb0ee7594c211..b95d34f2966ba4665a0c196179e0948fa299755f 100644
--- a/packages/SettingsProvider/src/com/android/providers/settings/SettingsProvider.java
+++ b/packages/SettingsProvider/src/com/android/providers/settings/SettingsProvider.java
@@ -4875,47 +4875,20 @@ public class SettingsProvider extends ContentProvider {
                     if (currentSetting.isNull()) {
                         globalSettings.insertSettingLocked(
                                 Global.HDMI_CONTROL_AUTO_DEVICE_OFF_ENABLED,
                                 getContext().getResources().getBoolean(
                                         R.bool.def_hdmiControlAutoDeviceOff) ? "1" : "0",
                                 null, true, SettingsState.SYSTEM_PACKAGE_NAME);
                     }
                     currentVersion = 191;
                 }
 
-                if (currentVersion == 183) {
-                    // Version 184: Update default Backup app to Seedvault
-                    final SettingsState secureSettings = getSecureSettingsLocked(userId);
-                    Setting currentBackupTransportSetting = secureSettings.getSettingLocked(
-                            Secure.BACKUP_TRANSPORT);
-                    if (currentBackupTransportSetting.isDefaultFromSystem()) {
-                        secureSettings.insertSettingLocked(
-                                Settings.Secure.BACKUP_TRANSPORT,
-                                getContext().getResources().getString(
-                                        R.string.def_backup_transport),
-                                null, true,
-                                SettingsState.SYSTEM_PACKAGE_NAME);
-                    }
-
-                    Setting currentBackupEnabledSetting = secureSettings.getSettingLocked(
-                            Secure.BACKUP_ENABLED);
-                    if (currentBackupEnabledSetting.isDefaultFromSystem()) {
-                        secureSettings.insertSettingLocked(
-                                Settings.Secure.BACKUP_ENABLED,
-                                getContext().getResources().getBoolean(
-                                        R.bool.def_backup_enabled)? "1" : "0",
-                                null, true,
-                                SettingsState.SYSTEM_PACKAGE_NAME);
-                    }
-                    currentVersion = 184;
-                }
-
                 // vXXX: Add new settings above this point.
 
                 if (currentVersion != newVersion) {
                     Slog.wtf("SettingsProvider", "warning: upgrading settings database to version "
                             + newVersion + " left it at "
                             + currentVersion +
                             " instead; this is probably a bug. Did you update SETTINGS_VERSION?",
                             new Throwable());
                     if (DEBUG) {
                         throw new RuntimeException("db upgrade error");

commit fa1bc758d846accfe8882c5123ea77fc9b2e9cb4
Author: Pratyush <39559233+empratyush@users.noreply.github.com>
Date:   Sun 2021-05-02 00:36:30+0000

    enable backup service for non-owner users
---
 .../server/backup/BackupManagerService.java        | 48 ++++++++++++++++++++++
 1 file changed, 48 insertions(+)

diff --git a/services/backup/java/com/android/server/backup/BackupManagerService.java b/services/backup/java/com/android/server/backup/BackupManagerService.java
index 89a6eca8fdaad10952869a3c6ad2e46e1818ea42..176cf79bbd049ac46256a39901dc2340d9fda79c 100644
--- a/services/backup/java/com/android/server/backup/BackupManagerService.java
+++ b/services/backup/java/com/android/server/backup/BackupManagerService.java
@@ -33,32 +33,35 @@ import android.app.backup.ISelectBackupTransportCallback;
 import android.app.compat.CompatChanges;
 import android.app.job.JobParameters;
 import android.app.job.JobScheduler;
 import android.app.job.JobService;
 import android.content.BroadcastReceiver;
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
 import android.content.pm.PackageManager;
+import android.content.pm.UserInfo;
 import android.os.Binder;
 import android.os.FileUtils;
 import android.os.Handler;
 import android.os.HandlerThread;
 import android.os.IBinder;
 import android.os.ParcelFileDescriptor;
 import android.os.Process;
 import android.os.RemoteException;
 import android.os.SystemProperties;
 import android.os.Trace;
 import android.os.UserHandle;
 import android.os.UserManager;
+import android.provider.Settings;
+import android.util.Log;
 import android.util.Slog;
 import android.util.SparseArray;
 
 import com.android.internal.annotations.GuardedBy;
 import com.android.internal.annotations.VisibleForTesting;
 import com.android.internal.util.DumpUtils;
 import com.android.server.SystemConfig;
 import com.android.server.SystemService;
 import com.android.server.backup.utils.RandomAccessFileUtils;
 
@@ -146,41 +149,86 @@ public class BackupManagerService extends IBackupManager.Stub {
         public void onReceive(Context context, Intent intent) {
             if (Intent.ACTION_USER_REMOVED.equals(intent.getAction())) {
                 int userId = intent.getIntExtra(Intent.EXTRA_USER_HANDLE, UserHandle.USER_NULL);
                 if (userId > 0) { // for only non system users
                     mHandler.post(() -> onRemovedNonSystemUser(userId));
                 }
             }
         }
     };
 
+    
+    private final BroadcastReceiver mUserAddedReceiver = new BroadcastReceiver() {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            if (Intent.ACTION_USER_ADDED.equals(intent.getAction())) {
+                int userId = intent.getIntExtra(Intent.EXTRA_USER_HANDLE, UserHandle.USER_NULL);
+                Log.d(TAG, "new user added User ID : " + userId);
+                if (userId > 0) {
+                mHandler.post(() -> setBackupServiceActive(userId, true));
+                }
+            }
+        }
+    };
+    
     public BackupManagerService(Context context) {
         this(context, new SparseArray<>());
     }
 
     @VisibleForTesting
     BackupManagerService(Context context, SparseArray<UserBackupManagerService> userServices) {
         mContext = context;
         mGlobalDisable = isBackupDisabled();
         HandlerThread handlerThread =
                 new HandlerThread(BACKUP_THREAD, Process.THREAD_PRIORITY_BACKGROUND);
         handlerThread.start();
         mHandler = new Handler(handlerThread.getLooper());
         mUserManager = UserManager.get(context);
         mUserServices = userServices;
         Set<ComponentName> transportWhitelist =
                 SystemConfig.getInstance().getBackupTransportWhitelist();
         mTransportWhitelist = (transportWhitelist == null) ? emptySet() : transportWhitelist;
         mContext.registerReceiver(
                 mUserRemovedReceiver, new IntentFilter(Intent.ACTION_USER_REMOVED));
+        
+        
+        mContext.registerReceiver(
+                mUserAddedReceiver, new IntentFilter(Intent.ACTION_USER_ADDED));
+        
+        if (shouldMigrateExistingUser(context)) {
+            List<UserInfo> managerUsers = mUserManager.getUsers();
+                for (UserInfo userInfo : managerUsers) {
+                    setBackupServiceActive(
+                        userInfo.getUserHandle().getIdentifier(),
+                        true
+                    );
+            }
+
+            markExistingUserMigrated(context);
+        }
+        
     }
 
+    private static final String PROFILE_MIGRATION_COMPLETED = "graphene_existing_users_migration";
+    
+    private boolean markExistingUserMigrated(Context context) {
+        return Settings.Global.putInt(context.getContentResolver(), PROFILE_MIGRATION_COMPLETED, 1);
+    }
+    
+    private boolean shouldMigrateExistingUser(Context context) {
+        return Settings.Global.getInt(
+                context.getContentResolver(),
+                PROFILE_MIGRATION_COMPLETED,
+                0
+            ) != 1;
+    }
+    
     // TODO: Remove this when we implement DI by injecting in the construtor.
     @VisibleForTesting
     Handler getBackupHandler() {
         return mHandler;
     }
 
     protected boolean isBackupDisabled() {
         return SystemProperties.getBoolean(BACKUP_DISABLE_PROPERTY, false);
     }
 

commit c0a635e1c847bea6277b5a25573e4939ef4fba91
Author: Renlord <me@renlord.com>
Date:   Tue 2020-03-03 22:55:39+1100

    use per-user settings secure table for lockscreen pin scrambling layout option
---
 core/java/android/provider/Settings.java                   | 14 +++++++-------
 .../SystemUI/src/com/android/keyguard/KeyguardPINView.java |  6 ++++--
 packages/SystemUI/src/com/android/keyguard/NumPadKey.java  |  5 +++--
 3 files changed, 14 insertions(+), 11 deletions(-)

diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index c8c235eeb9c963e5db67ffaf9ad2035eaea5f0b6..ca2a8222c56d7bf9ca21807760613e7f207cc902 100755
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -3882,27 +3882,20 @@ public final class Settings {
 
         /**
          * @deprecated Use
          * {@link android.provider.Settings.Secure#LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED}
          * instead
          */
         @Deprecated
         public static final String LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED =
             "lock_pattern_tactile_feedback_enabled";
 
-        /**
-         * Whether to scramble a pin unlock layout
-         * @hide
-         */
-        public static final String SCRAMBLE_PIN_LAYOUT =
-            "lockscreen_scramble_pin_layout";
-
         /**
          * A formatted string of the next alarm that is set, or the empty string
          * if there is no alarm set.
          *
          * @deprecated Use {@link android.app.AlarmManager#getNextAlarmClock()}.
          */
         @Deprecated
         public static final String NEXT_ALARM_FORMATTED = "next_alarm_formatted";
 
         /**
@@ -8925,20 +8918,27 @@ public final class Settings {
          * @hide
          */
         public static final String TAP_GESTURE = "tap_gesture";
 
         /**
          * Controls whether the people strip is enabled.
          * @hide
          */
         public static final String PEOPLE_STRIP = "people_strip";
 
+        /**
+         * Whether to scramble a pin unlock layout
+         * @hide
+         */
+        public static final String SCRAMBLE_PIN_LAYOUT =
+            "lockscreen_scramble_pin_layout";
+
         /**
          * Whether or not to enable media resumption
          * When enabled, media controls in quick settings will populate on boot and persist if
          * resumable via a MediaBrowserService.
          * @see Settings.Global#SHOW_MEDIA_ON_QUICK_SETTINGS
          * @hide
          */
         public static final String MEDIA_CONTROLS_RESUME = "qs_media_resumption";
 
         /**
diff --git a/packages/SystemUI/src/com/android/keyguard/KeyguardPINView.java b/packages/SystemUI/src/com/android/keyguard/KeyguardPINView.java
index b7ef91e7b2559adfe71afe716bd1061491081673..fe3893018c19885423289fb3b8033da55e3067f1 100644
--- a/packages/SystemUI/src/com/android/keyguard/KeyguardPINView.java
+++ b/packages/SystemUI/src/com/android/keyguard/KeyguardPINView.java
@@ -27,20 +27,22 @@ import android.widget.LinearLayout;
 import java.security.SecureRandom;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 
 import com.android.settingslib.animation.AppearAnimationUtils;
 import com.android.settingslib.animation.DisappearAnimationUtils;
 import com.android.systemui.Dependency;
 import com.android.systemui.R;
 
+import android.app.ActivityManager;
+
 /**
  * Displays a PIN pad for unlocking.
  */
 public class KeyguardPINView extends KeyguardPinBasedInputView {
 
     private final AppearAnimationUtils mAppearAnimationUtils;
     private final DisappearAnimationUtils mDisappearAnimationUtils;
     private final DisappearAnimationUtils mDisappearAnimationUtilsLocked;
     private ViewGroup mContainer;
     private ViewGroup mRow0;
@@ -120,22 +122,22 @@ public class KeyguardPINView extends KeyguardPinBasedInputView {
                         null, mEcaView, null
                 }};
 
         View cancelBtn = findViewById(R.id.cancel_button);
         if (cancelBtn != null) {
             cancelBtn.setOnClickListener(view -> {
                 mCallback.reset();
                 mCallback.onCancelClicked();
             });
         }
-        boolean scramblePin = Settings.System.getInt(getContext().getContentResolver(),
-                Settings.System.SCRAMBLE_PIN_LAYOUT, 0) == 1;
+        boolean scramblePin = Settings.Secure.getIntForUser(mContext.getContentResolver(),
+                Settings.Secure.SCRAMBLE_PIN_LAYOUT, 0, ActivityManager.getCurrentUser()) == 1;
 
         if (scramblePin) {
             List<Integer> digits = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 0);
             Collections.shuffle(digits, new SecureRandom());
             LinearLayout container = (LinearLayout) findViewById(R.id.container);
             int finished = 0;
             for (int i = 0; i < container.getChildCount(); i++) {
                 if (container.getChildAt(i) instanceof LinearLayout) {
                     LinearLayout nestedLayout = ((LinearLayout) container.getChildAt(i));
                     for (int j = 0; j < nestedLayout.getChildCount(); j++){
diff --git a/packages/SystemUI/src/com/android/keyguard/NumPadKey.java b/packages/SystemUI/src/com/android/keyguard/NumPadKey.java
index 5ac6bc3b5b5c37c835db30829b691a252216c9fb..f25e9bfcbf0c7b01d637afaa715197fdcd69dcde 100644
--- a/packages/SystemUI/src/com/android/keyguard/NumPadKey.java
+++ b/packages/SystemUI/src/com/android/keyguard/NumPadKey.java
@@ -9,20 +9,21 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 package com.android.keyguard;
 
+import android.app.ActivityManager;
 import android.content.Context;
 import android.content.res.TypedArray;
 import android.os.PowerManager;
 import android.os.SystemClock;
 import android.provider.Settings;
 import android.util.AttributeSet;
 import android.view.HapticFeedbackConstants;
 import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
@@ -106,22 +107,22 @@ public class NumPadKey extends ViewGroup {
         updateText();
         a = context.obtainStyledAttributes(attrs, android.R.styleable.View);
         if (!a.hasValueOrEmpty(android.R.styleable.View_background)) {
             setBackground(mContext.getDrawable(R.drawable.ripple_drawable_pin));
         }
         a.recycle();
         setContentDescription(mDigitText.getText().toString());
     }
 
     private void updateText() {
-        boolean scramblePin = Settings.System.getInt(getContext().getContentResolver(),
-                Settings.System.SCRAMBLE_PIN_LAYOUT, 0) == 1;
+        boolean scramblePin = Settings.Secure. getIntForUser(mContext.getContentResolver(),
+                Settings.Secure.SCRAMBLE_PIN_LAYOUT, 0, ActivityManager.getCurrentUser()) == 1;
         if (mDigit >= 0) {
             mDigitText.setText(Integer.toString(mDigit));
             if (sKlondike == null) {
                 sKlondike = getResources().getStringArray(R.array.lockscreen_num_pad_klondike);
             }
             if (sKlondike != null && sKlondike.length > mDigit) {
                 String klondike = sKlondike[mDigit];
                 final int len = klondike.length();
                 if (len > 0 || scramblePin) {
                     mKlondikeText.setText(klondike);

commit 2b832e08ec1b11e26d204cf4371f1162f6fa8306
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Sun 2020-04-05 09:14:42-0400

    remove use of "Hey Google" as an example feature
---
 core/res/res/values-en-rAU/strings.xml | 4 ++--
 core/res/res/values-en-rCA/strings.xml | 4 ++--
 core/res/res/values-en-rGB/strings.xml | 4 ++--
 core/res/res/values-en-rIN/strings.xml | 4 ++--
 core/res/res/values-en-rXC/strings.xml | 4 ++--
 core/res/res/values/strings.xml        | 4 ++--
 6 files changed, 12 insertions(+), 12 deletions(-)

diff --git a/core/res/res/values-en-rAU/strings.xml b/core/res/res/values-en-rAU/strings.xml
index c748cc80cb23bf494c9f29c0a69068cae3ee7294..6a7354ffd67da0dd4fbeaa065c1e35c52874d1ec 100644
--- a/core/res/res/values-en-rAU/strings.xml
+++ b/core/res/res/values-en-rAU/strings.xml
@@ -1785,22 +1785,22 @@
     <string name="managed_profile_label_badge" msgid="6762559569999499495">"Work <xliff:g id="LABEL">%1$s</xliff:g>"</string>
     <string name="managed_profile_label_badge_2" msgid="5673187309555352550">"2nd Work <xliff:g id="LABEL">%1$s</xliff:g>"</string>
     <string name="managed_profile_label_badge_3" msgid="6882151970556391957">"3rd Work <xliff:g id="LABEL">%1$s</xliff:g>"</string>
     <string name="lock_to_app_unlock_pin" msgid="3890940811866290782">"Ask for PIN before unpinning"</string>
     <string name="lock_to_app_unlock_pattern" msgid="2694204070499712503">"Ask for unlock pattern before unpinning"</string>
     <string name="lock_to_app_unlock_password" msgid="9126722403506560473">"Ask for password before unpinning"</string>
     <string name="package_installed_device_owner" msgid="7035926868974878525">"Installed by your admin"</string>
     <string name="package_updated_device_owner" msgid="7560272363805506941">"Updated by your admin"</string>
     <string name="package_deleted_device_owner" msgid="2292335928930293023">"Deleted by your admin"</string>
     <string name="confirm_battery_saver" msgid="5247976246208245754">"OK"</string>
-    <string name="battery_saver_description_with_learn_more" msgid="4424488535318105801">"To extend battery life, Battery Saver:\n\n• Turns on Dark theme\n• Turns off or restricts background activity, some visual effects and other features like “Hey Google”\n\n"<annotation id="url">"Learn more"</annotation></string>
-    <string name="battery_saver_description" msgid="6794188153647295212">"To extend battery life, Battery Saver:\n\n• Turns on Dark theme\n• Turns off or restricts background activity, some visual effects and other features like “Hey Google”"</string>
+    <string name="battery_saver_description_with_learn_more" msgid="4424488535318105801">"To extend battery life, Battery Saver:\n\n• Turns on Dark theme\n• Turns off or restricts background activity, some visual effects and other features\n\n"<annotation id="url">"Learn more"</annotation></string>
+    <string name="battery_saver_description" msgid="6794188153647295212">"To extend battery life, Battery Saver:\n\n• Turns on Dark theme\n• Turns off or restricts background activity, some visual effects and other features"</string>
     <string name="data_saver_description" msgid="4995164271550590517">"To help reduce data usage, Data Saver prevents some apps from sending or receiving data in the background. An app you\'re currently using can access data, but may do so less frequently. This may mean, for example, that images don’t display until you tap them."</string>
     <string name="data_saver_enable_title" msgid="7080620065745260137">"Turn on Data Saver?"</string>
     <string name="data_saver_enable_button" msgid="4399405762586419726">"Turn on"</string>
     <plurals name="zen_mode_duration_minutes_summary" formatted="false" msgid="2877101784123058273">
       <item quantity="other">For %1$d minutes (until <xliff:g id="FORMATTEDTIME_1">%2$s</xliff:g>)</item>
       <item quantity="one">For one minute (until <xliff:g id="FORMATTEDTIME_0">%2$s</xliff:g>)</item>
     </plurals>
     <plurals name="zen_mode_duration_minutes_summary_short" formatted="false" msgid="4230730310318858312">
       <item quantity="other">For %1$d min (until <xliff:g id="FORMATTEDTIME_1">%2$s</xliff:g>)</item>
       <item quantity="one">For 1 min (until <xliff:g id="FORMATTEDTIME_0">%2$s</xliff:g>)</item>
diff --git a/core/res/res/values-en-rCA/strings.xml b/core/res/res/values-en-rCA/strings.xml
index d6faf46ee74a71ee69a7ac6a31c1d0dd611cc994..fce5b0683744046adbcf6f938ae760e58dc67d15 100644
--- a/core/res/res/values-en-rCA/strings.xml
+++ b/core/res/res/values-en-rCA/strings.xml
@@ -1785,22 +1785,22 @@
     <string name="managed_profile_label_badge" msgid="6762559569999499495">"Work <xliff:g id="LABEL">%1$s</xliff:g>"</string>
     <string name="managed_profile_label_badge_2" msgid="5673187309555352550">"2nd Work <xliff:g id="LABEL">%1$s</xliff:g>"</string>
     <string name="managed_profile_label_badge_3" msgid="6882151970556391957">"3rd Work <xliff:g id="LABEL">%1$s</xliff:g>"</string>
     <string name="lock_to_app_unlock_pin" msgid="3890940811866290782">"Ask for PIN before unpinning"</string>
     <string name="lock_to_app_unlock_pattern" msgid="2694204070499712503">"Ask for unlock pattern before unpinning"</string>
     <string name="lock_to_app_unlock_password" msgid="9126722403506560473">"Ask for password before unpinning"</string>
     <string name="package_installed_device_owner" msgid="7035926868974878525">"Installed by your admin"</string>
     <string name="package_updated_device_owner" msgid="7560272363805506941">"Updated by your admin"</string>
     <string name="package_deleted_device_owner" msgid="2292335928930293023">"Deleted by your admin"</string>
     <string name="confirm_battery_saver" msgid="5247976246208245754">"OK"</string>
-    <string name="battery_saver_description_with_learn_more" msgid="4424488535318105801">"To extend battery life, Battery Saver:\n\n• Turns on Dark theme\n• Turns off or restricts background activity, some visual effects and other features like “Hey Google”\n\n"<annotation id="url">"Learn more"</annotation></string>
-    <string name="battery_saver_description" msgid="6794188153647295212">"To extend battery life, Battery Saver:\n\n• Turns on Dark theme\n• Turns off or restricts background activity, some visual effects and other features like “Hey Google”"</string>
+    <string name="battery_saver_description_with_learn_more" msgid="4424488535318105801">"To extend battery life, Battery Saver:\n\n• Turns on Dark theme\n• Turns off or restricts background activity, some visual effects and other features\n\n"<annotation id="url">"Learn more"</annotation></string>
+    <string name="battery_saver_description" msgid="6794188153647295212">"To extend battery life, Battery Saver:\n\n• Turns on Dark theme\n• Turns off or restricts background activity, some visual effects and other features"</string>
     <string name="data_saver_description" msgid="4995164271550590517">"To help reduce data usage, Data Saver prevents some apps from sending or receiving data in the background. An app you\'re currently using can access data, but may do so less frequently. This may mean, for example, that images don\'t display until you tap them."</string>
     <string name="data_saver_enable_title" msgid="7080620065745260137">"Turn on Data Saver?"</string>
     <string name="data_saver_enable_button" msgid="4399405762586419726">"Turn on"</string>
     <plurals name="zen_mode_duration_minutes_summary" formatted="false" msgid="2877101784123058273">
       <item quantity="other">For %1$d minutes (until <xliff:g id="FORMATTEDTIME_1">%2$s</xliff:g>)</item>
       <item quantity="one">For one minute (until <xliff:g id="FORMATTEDTIME_0">%2$s</xliff:g>)</item>
     </plurals>
     <plurals name="zen_mode_duration_minutes_summary_short" formatted="false" msgid="4230730310318858312">
       <item quantity="other">For %1$d min (until <xliff:g id="FORMATTEDTIME_1">%2$s</xliff:g>)</item>
       <item quantity="one">For 1 min (until <xliff:g id="FORMATTEDTIME_0">%2$s</xliff:g>)</item>
diff --git a/core/res/res/values-en-rGB/strings.xml b/core/res/res/values-en-rGB/strings.xml
index 695ddb0e4e4eb2c1fc40c9d4257d52550e9a7af6..5306f545d620e2a1b192074ccb9f2875db7c2305 100644
--- a/core/res/res/values-en-rGB/strings.xml
+++ b/core/res/res/values-en-rGB/strings.xml
@@ -1785,22 +1785,22 @@
     <string name="managed_profile_label_badge" msgid="6762559569999499495">"Work <xliff:g id="LABEL">%1$s</xliff:g>"</string>
     <string name="managed_profile_label_badge_2" msgid="5673187309555352550">"2nd Work <xliff:g id="LABEL">%1$s</xliff:g>"</string>
     <string name="managed_profile_label_badge_3" msgid="6882151970556391957">"3rd Work <xliff:g id="LABEL">%1$s</xliff:g>"</string>
     <string name="lock_to_app_unlock_pin" msgid="3890940811866290782">"Ask for PIN before unpinning"</string>
     <string name="lock_to_app_unlock_pattern" msgid="2694204070499712503">"Ask for unlock pattern before unpinning"</string>
     <string name="lock_to_app_unlock_password" msgid="9126722403506560473">"Ask for password before unpinning"</string>
     <string name="package_installed_device_owner" msgid="7035926868974878525">"Installed by your admin"</string>
     <string name="package_updated_device_owner" msgid="7560272363805506941">"Updated by your admin"</string>
     <string name="package_deleted_device_owner" msgid="2292335928930293023">"Deleted by your admin"</string>
     <string name="confirm_battery_saver" msgid="5247976246208245754">"OK"</string>
-    <string name="battery_saver_description_with_learn_more" msgid="4424488535318105801">"To extend battery life, Battery Saver:\n\n• Turns on Dark theme\n• Turns off or restricts background activity, some visual effects and other features like “Hey Google”\n\n"<annotation id="url">"Learn more"</annotation></string>
-    <string name="battery_saver_description" msgid="6794188153647295212">"To extend battery life, Battery Saver:\n\n• Turns on Dark theme\n• Turns off or restricts background activity, some visual effects and other features like “Hey Google”"</string>
+    <string name="battery_saver_description_with_learn_more" msgid="4424488535318105801">"To extend battery life, Battery Saver:\n\n• Turns on Dark theme\n• Turns off or restricts background activity, some visual effects and other features\n\n"<annotation id="url">"Learn more"</annotation></string>
+    <string name="battery_saver_description" msgid="6794188153647295212">"To extend battery life, Battery Saver:\n\n• Turns on Dark theme\n• Turns off or restricts background activity, some visual effects and other features"</string>
     <string name="data_saver_description" msgid="4995164271550590517">"To help reduce data usage, Data Saver prevents some apps from sending or receiving data in the background. An app that you’re currently using can access data, but may do so less frequently. This may mean, for example, that images don’t display until you tap them."</string>
     <string name="data_saver_enable_title" msgid="7080620065745260137">"Turn on Data Saver?"</string>
     <string name="data_saver_enable_button" msgid="4399405762586419726">"Turn on"</string>
     <plurals name="zen_mode_duration_minutes_summary" formatted="false" msgid="2877101784123058273">
       <item quantity="other">For %1$d minutes (until <xliff:g id="FORMATTEDTIME_1">%2$s</xliff:g>)</item>
       <item quantity="one">For one minute (until <xliff:g id="FORMATTEDTIME_0">%2$s</xliff:g>)</item>
     </plurals>
     <plurals name="zen_mode_duration_minutes_summary_short" formatted="false" msgid="4230730310318858312">
       <item quantity="other">For %1$d min (until <xliff:g id="FORMATTEDTIME_1">%2$s</xliff:g>)</item>
       <item quantity="one">For 1 min (until <xliff:g id="FORMATTEDTIME_0">%2$s</xliff:g>)</item>
diff --git a/core/res/res/values-en-rIN/strings.xml b/core/res/res/values-en-rIN/strings.xml
index 596d4b658769d6a193831a9f2cb8e50f2f1493ca..e55e20bd7b260f8b2125cb3774abe62b6c297746 100644
--- a/core/res/res/values-en-rIN/strings.xml
+++ b/core/res/res/values-en-rIN/strings.xml
@@ -1785,22 +1785,22 @@
     <string name="managed_profile_label_badge" msgid="6762559569999499495">"Work <xliff:g id="LABEL">%1$s</xliff:g>"</string>
     <string name="managed_profile_label_badge_2" msgid="5673187309555352550">"2nd Work <xliff:g id="LABEL">%1$s</xliff:g>"</string>
     <string name="managed_profile_label_badge_3" msgid="6882151970556391957">"3rd Work <xliff:g id="LABEL">%1$s</xliff:g>"</string>
     <string name="lock_to_app_unlock_pin" msgid="3890940811866290782">"Ask for PIN before unpinning"</string>
     <string name="lock_to_app_unlock_pattern" msgid="2694204070499712503">"Ask for unlock pattern before unpinning"</string>
     <string name="lock_to_app_unlock_password" msgid="9126722403506560473">"Ask for password before unpinning"</string>
     <string name="package_installed_device_owner" msgid="7035926868974878525">"Installed by your admin"</string>
     <string name="package_updated_device_owner" msgid="7560272363805506941">"Updated by your admin"</string>
     <string name="package_deleted_device_owner" msgid="2292335928930293023">"Deleted by your admin"</string>
     <string name="confirm_battery_saver" msgid="5247976246208245754">"OK"</string>
-    <string name="battery_saver_description_with_learn_more" msgid="4424488535318105801">"To extend battery life, Battery Saver:\n\n• Turns on Dark theme\n• Turns off or restricts background activity, some visual effects and other features like “Hey Google”\n\n"<annotation id="url">"Learn more"</annotation></string>
-    <string name="battery_saver_description" msgid="6794188153647295212">"To extend battery life, Battery Saver:\n\n• Turns on Dark theme\n• Turns off or restricts background activity, some visual effects and other features like “Hey Google”"</string>
+    <string name="battery_saver_description_with_learn_more" msgid="4424488535318105801">"To extend battery life, Battery Saver:\n\n• Turns on Dark theme\n• Turns off or restricts background activity, some visual effects and other features\n\n"<annotation id="url">"Learn more"</annotation></string>
+    <string name="battery_saver_description" msgid="6794188153647295212">"To extend battery life, Battery Saver:\n\n• Turns on Dark theme\n• Turns off or restricts background activity, some visual effects and other features"</string>
     <string name="data_saver_description" msgid="4995164271550590517">"To help reduce data usage, Data Saver prevents some apps from sending or receiving data in the background. An app that you’re currently using can access data, but may do so less frequently. This may mean, for example, that images don’t display until you tap them."</string>
     <string name="data_saver_enable_title" msgid="7080620065745260137">"Turn on Data Saver?"</string>
     <string name="data_saver_enable_button" msgid="4399405762586419726">"Turn on"</string>
     <plurals name="zen_mode_duration_minutes_summary" formatted="false" msgid="2877101784123058273">
       <item quantity="other">For %1$d minutes (until <xliff:g id="FORMATTEDTIME_1">%2$s</xliff:g>)</item>
       <item quantity="one">For one minute (until <xliff:g id="FORMATTEDTIME_0">%2$s</xliff:g>)</item>
     </plurals>
     <plurals name="zen_mode_duration_minutes_summary_short" formatted="false" msgid="4230730310318858312">
       <item quantity="other">For %1$d min (until <xliff:g id="FORMATTEDTIME_1">%2$s</xliff:g>)</item>
       <item quantity="one">For 1 min (until <xliff:g id="FORMATTEDTIME_0">%2$s</xliff:g>)</item>
diff --git a/core/res/res/values-en-rXC/strings.xml b/core/res/res/values-en-rXC/strings.xml
index 2cd891f5728175755ce094c2daa2b7dfc3448817..f0a50687795e46aaac03ebd87ca802683fb0c304 100644
--- a/core/res/res/values-en-rXC/strings.xml
+++ b/core/res/res/values-en-rXC/strings.xml
@@ -1785,22 +1785,22 @@
     <string name="managed_profile_label_badge" msgid="6762559569999499495">"‎‏‎‎‎‎‎‏‎‏‏‏‎‎‎‎‎‎‏‎‎‏‎‎‎‎‏‏‏‏‏‏‏‏‎‏‏‏‎‏‏‏‎‏‏‎‎‏‎‏‏‏‎‎‎‎‎‎‎‏‏‎‎‏‎‏‏‎‏‏‏‎‎‎‏‏‏‏‎‏‎‎‎‏‎‎‎‎‏‏‏‎‎‏‏‏‎Work ‎‏‎‎‏‏‎<xliff:g id="LABEL">%1$s</xliff:g>‎‏‎‎‏‏‏‎‎‏‎‎‏‎"</string>
     <string name="managed_profile_label_badge_2" msgid="5673187309555352550">"‎‏‎‎‎‎‎‏‎‏‏‏‎‎‎‎‎‎‏‎‎‏‎‎‎‎‏‏‏‏‏‏‏‏‎‎‏‏‏‎‏‎‏‏‏‎‏‏‎‎‏‏‎‏‎‏‏‏‎‎‏‏‎‎‏‏‎‏‏‎‏‎‎‏‎‎‏‏‎‏‎‎‎‎‎‎‏‏‏‏‏‎‎‏‏‎‎2nd Work ‎‏‎‎‏‏‎<xliff:g id="LABEL">%1$s</xliff:g>‎‏‎‎‏‏‏‎‎‏‎‎‏‎"</string>
     <string name="managed_profile_label_badge_3" msgid="6882151970556391957">"‎‏‎‎‎‎‎‏‎‏‏‏‎‎‎‎‎‎‏‎‎‏‎‎‎‎‏‏‏‏‏‏‏‏‎‏‏‏‏‏‏‎‎‎‎‎‏‎‎‏‎‏‎‎‎‎‏‏‎‎‎‎‎‏‎‎‎‎‎‏‏‏‎‏‎‎‎‏‎‎‏‎‏‏‎‎‏‎‎‎‎‏‎‏‎‏‎3rd Work ‎‏‎‎‏‏‎<xliff:g id="LABEL">%1$s</xliff:g>‎‏‎‎‏‏‏‎‎‏‎‎‏‎"</string>
     <string name="lock_to_app_unlock_pin" msgid="3890940811866290782">"‎‏‎‎‎‎‎‏‎‏‏‏‎‎‎‎‎‎‏‎‎‏‎‎‎‎‏‏‏‏‏‏‎‏‏‎‏‎‏‏‏‏‏‏‏‏‏‎‏‏‎‎‏‏‎‎‎‎‎‏‏‎‏‏‎‏‎‎‏‎‏‎‏‎‏‏‏‎‎‎‎‏‏‏‎‏‎‎‏‎‏‏‏‏‎‎Ask for PIN before unpinning‎‏‎‎‏‎"</string>
     <string name="lock_to_app_unlock_pattern" msgid="2694204070499712503">"‎‏‎‎‎‎‎‏‎‏‏‏‎‎‎‎‎‎‏‎‎‏‎‎‎‎‏‏‏‏‏‏‎‏‎‎‏‎‏‎‏‏‎‎‎‏‏‏‎‏‏‏‏‎‎‎‏‎‏‎‎‏‏‏‏‎‏‏‏‏‎‏‎‎‎‏‎‏‏‏‏‏‏‏‏‎‏‏‏‏‏‎‏‏‏‎Ask for unlock pattern before unpinning‎‏‎‎‏‎"</string>
     <string name="lock_to_app_unlock_password" msgid="9126722403506560473">"‎‏‎‎‎‎‎‏‎‏‏‏‎‎‎‎‎‎‏‎‎‏‎‎‎‎‏‏‏‏‏‏‏‏‏‏‏‏‏‎‏‎‏‎‏‎‎‎‏‎‏‎‎‎‎‏‏‎‏‎‏‎‏‏‏‎‏‎‏‎‎‎‏‎‎‏‏‎‏‏‏‎‎‏‏‏‎‏‏‏‎‏‏‎‎‏‎Ask for password before unpinning‎‏‎‎‏‎"</string>
     <string name="package_installed_device_owner" msgid="7035926868974878525">"‎‏‎‎‎‎‎‏‎‏‏‏‎‎‎‎‎‎‏‎‎‏‎‎‎‎‏‏‏‏‏‏‏‏‏‎‎‎‎‏‏‎‏‎‎‏‎‎‏‎‏‎‎‎‏‎‎‎‏‏‎‏‎‏‏‎‎‏‏‎‏‎‏‏‎‏‏‏‏‏‏‎‏‏‏‏‏‏‎‎‏‏‏‏‎‏‎Installed by your admin‎‏‎‎‏‎"</string>
     <string name="package_updated_device_owner" msgid="7560272363805506941">"‎‏‎‎‎‎‎‏‎‏‏‏‎‎‎‎‎‎‏‎‎‏‎‎‎‎‏‏‏‏‏‏‏‏‏‎‏‎‎‎‏‏‏‎‏‎‏‏‎‏‏‏‏‎‏‏‏‎‏‎‏‎‎‎‏‎‏‎‏‎‎‏‏‏‎‏‎‏‎‎‎‏‏‏‏‏‎‏‎‏‏‏‏‏‎‏‎Updated by your admin‎‏‎‎‏‎"</string>
     <string name="package_deleted_device_owner" msgid="2292335928930293023">"‎‏‎‎‎‎‎‏‎‏‏‏‎‎‎‎‎‎‏‎‎‏‎‎‎‎‏‏‏‏‏‎‏‏‏‏‏‏‏‏‎‏‎‎‎‎‎‎‎‎‎‎‏‏‎‏‏‎‎‎‎‏‏‏‎‎‏‏‎‏‏‏‎‎‎‎‎‏‎‏‎‏‎‏‎‏‎‎‎‏‏‏‏‏‎Deleted by your admin‎‏‎‎‏‎"</string>
     <string name="confirm_battery_saver" msgid="5247976246208245754">"‎‏‎‎‎‎‎‏‎‏‏‏‎‎‎‎‎‎‏‎‎‏‎‎‎‎‏‏‏‏‏‏‏‏‎‎‏‎‎‎‏‏‎‏‎‏‎‎‏‎‎‎‏‏‏‎‏‎‎‏‎‏‏‏‎‏‎‎‏‎‎‎‏‏‏‎‏‏‏‎‎‎‏‎‏‏‏‏‏‏‏‏‏‎‏‎‎OK‎‏‎‎‏‎"</string>
-    <string name="battery_saver_description_with_learn_more" msgid="4424488535318105801">"‎‏‎‎‎‎‎‏‎‏‏‏‎‎‎‎‎‎‏‎‎‏‎‎‎‎‏‏‏‏‏‏‎‏‏‏‏‎‏‎‏‏‎‎‏‏‎‏‏‏‏‎‎‎‎‏‏‏‎‎‎‎‏‏‎‎‎‎‏‎‎‎‏‏‎‏‏‎‎‏‎‎‎‏‏‏‎‏‏‎‎‏‎‎‏‎To extend battery life, Battery Saver:‎‏‎‎‏‏‎\n‎‏‎‎‏‏‏‎‎‏‎‎‏‏‎\n‎‏‎‎‏‏‏‎• Turns on Dark theme‎‏‎‎‏‏‎\n‎‏‎‎‏‏‏‎• Turns off or restricts background activity, some visual effects, and other features like “Hey Google”‎‏‎‎‏‏‎\n‎‏‎‎‏‏‏‎‎‏‎‎‏‏‎\n‎‏‎‎‏‏‏‎‎‏‎‎‏‏‎"<annotation id="url">"‎‏‎‎‏‏‏‎Learn more‎‏‎‎‏‏‎"</annotation>"‎‏‎‎‏‏‏‎‎‏‎‎‏‎"</string>
-    <string name="battery_saver_description" msgid="6794188153647295212">"‎‏‎‎‎‎‎‏‎‏‏‏‎‎‎‎‎‎‏‎‎‏‎‎‎‎‏‏‏‏‏‏‏‏‎‏‏‏‏‎‎‏‎‎‏‎‎‏‏‏‎‎‏‏‏‎‎‎‏‎‎‎‎‎‏‏‏‎‏‎‏‏‎‏‎‏‎‎‎‎‎‏‏‎‏‎‏‎‏‏‏‎‏‏‎‎‎To extend battery life, Battery Saver:‎‏‎‎‏‏‎\n‎‏‎‎‏‏‏‎‎‏‎‎‏‏‎\n‎‏‎‎‏‏‏‎• Turns on Dark theme‎‏‎‎‏‏‎\n‎‏‎‎‏‏‏‎• Turns off or restricts background activity, some visual effects, and other features like “Hey Google”‎‏‎‎‏‎"</string>
+    <string name="battery_saver_description_with_learn_more" msgid="4424488535318105801">"‎‏‎‎‎‎‎‏‎‏‏‏‎‎‎‎‎‎‏‎‎‏‎‎‎‎‏‏‏‏‏‏‎‏‏‏‏‎‏‎‏‏‎‎‏‏‎‏‏‏‏‎‎‎‎‏‏‏‎‎‎‎‏‏‎‎‎‎‏‎‎‎‏‏‎‏‏‎‎‏‎‎‎‏‏‏‎‏‏‎‎‏‎‎‏‎To extend battery life, Battery Saver:‎‏‎‎‏‏‎\n‎‏‎‎‏‏‏‎‎‏‎‎‏‏‎\n‎‏‎‎‏‏‏‎• Turns on Dark theme‎‏‎‎‏‏‎\n‎‏‎‎‏‏‏‎• Turns off or restricts background activity, some visual effects, and other features‎‏‎‎‏‏‎\n‎‏‎‎‏‏‏‎‎‏‎‎‏‏‎\n‎‏‎‎‏‏‏‎‎‏‎‎‏‏‎"<annotation id="url">"‎‏‎‎‏‏‏‎Learn more‎‏‎‎‏‏‎"</annotation>"‎‏‎‎‏‏‏‎‎‏‎‎‏‎"</string>
+    <string name="battery_saver_description" msgid="6794188153647295212">"‎‏‎‎‎‎‎‏‎‏‏‏‎‎‎‎‎‎‏‎‎‏‎‎‎‎‏‏‏‏‏‏‏‏‎‏‏‏‏‎‎‏‎‎‏‎‎‏‏‏‎‎‏‏‏‎‎‎‏‎‎‎‎‎‏‏‏‎‏‎‏‏‎‏‎‏‎‎‎‎‎‏‏‎‏‎‏‎‏‏‏‎‏‏‎‎‎To extend battery life, Battery Saver:‎‏‎‎‏‏‎\n‎‏‎‎‏‏‏‎‎‏‎‎‏‏‎\n‎‏‎‎‏‏‏‎• Turns on Dark theme‎‏‎‎‏‏‎\n‎‏‎‎‏‏‏‎• Turns off or restricts background activity, some visual effects, and other features‎‏‎‎‏‎"</string>
     <string name="data_saver_description" msgid="4995164271550590517">"‎‏‎‎‎‎‎‏‎‏‏‏‎‎‎‎‎‎‏‎‎‏‎‎‎‎‏‏‏‏‏‏‏‏‎‎‎‏‎‏‎‏‎‏‎‎‏‎‎‏‏‎‎‎‏‏‎‏‏‏‎‎‎‎‏‎‎‎‎‎‎‎‎‏‏‏‏‏‏‎‏‏‏‎‏‏‏‎‎‎‏‏‎‏‎‏‎To help reduce data usage, Data Saver prevents some apps from sending or receiving data in the background. An app you’re currently using can access data, but may do so less frequently. This may mean, for example, that images don’t display until you tap them.‎‏‎‎‏‎"</string>
     <string name="data_saver_enable_title" msgid="7080620065745260137">"‎‏‎‎‎‎‎‏‎‏‏‏‎‎‎‎‎‎‏‎‎‏‎‎‎‎‏‏‏‏‏‏‏‏‏‎‎‎‏‎‎‏‎‎‎‎‏‏‎‏‏‎‏‎‏‎‎‏‏‎‏‏‏‏‎‏‏‎‎‎‎‎‎‎‏‏‏‏‏‏‏‏‎‎‏‏‏‎‎‏‏‎‏‎‎‏‎Turn on Data Saver?‎‏‎‎‏‎"</string>
     <string name="data_saver_enable_button" msgid="4399405762586419726">"‎‏‎‎‎‎‎‏‎‏‏‏‎‎‎‎‎‎‏‎‎‏‎‎‎‎‏‏‏‏‏‏‎‏‏‏‏‎‏‎‎‎‎‏‏‎‏‏‏‎‏‎‏‎‎‎‎‏‏‏‎‏‏‎‏‏‎‎‏‎‏‏‏‎‎‎‏‎‏‎‎‏‎‎‎‏‎‎‎‎‎‏‏‏‎‎Turn on‎‏‎‎‏‎"</string>
     <plurals name="zen_mode_duration_minutes_summary" formatted="false" msgid="2877101784123058273">
       <item quantity="other">‎‏‎‎‎‎‎‏‎‏‏‏‎‎‎‎‎‎‏‎‎‏‎‎‎‎‏‏‏‏‏‏‎‏‎‎‏‏‏‏‏‏‎‏‏‎‏‏‎‎‎‎‏‎‎‏‏‎‏‎‏‎‎‎‏‎‎‎‎‎‏‎‏‎‎‏‏‎‎‎‎‏‎‏‎‎‎‎‏‏‎‎‎‎‏‎For %1$d minutes (until ‎‏‎‎‏‏‎<xliff:g id="FORMATTEDTIME_1">%2$s</xliff:g>‎‏‎‎‏‏‏‎)‎‏‎‎‏‎</item>
       <item quantity="one">‎‏‎‎‎‎‎‏‎‏‏‏‎‎‎‎‎‎‏‎‎‏‎‎‎‎‏‏‏‏‏‏‎‏‎‎‏‏‏‏‏‏‎‏‏‎‏‏‎‎‎‎‏‎‎‏‏‎‏‎‏‎‎‎‏‎‎‎‎‎‏‎‏‎‎‏‏‎‎‎‎‏‎‏‎‎‎‎‏‏‎‎‎‎‏‎For one minute (until ‎‏‎‎‏‏‎<xliff:g id="FORMATTEDTIME_0">%2$s</xliff:g>‎‏‎‎‏‏‏‎)‎‏‎‎‏‎</item>
     </plurals>
     <plurals name="zen_mode_duration_minutes_summary_short" formatted="false" msgid="4230730310318858312">
       <item quantity="other">‎‏‎‎‎‎‎‏‎‏‏‏‎‎‎‎‎‎‏‎‎‏‎‎‎‎‏‏‏‏‏‏‎‏‏‏‎‏‎‏‎‏‏‎‏‏‎‏‎‎‏‎‎‏‎‏‏‎‎‏‏‎‏‎‏‎‎‎‏‏‏‎‎‎‎‏‎‎‎‏‎‏‎‎‎‎‎‎‏‎‎‏‎‎‎‎For %1$d min (until ‎‏‎‎‏‏‎<xliff:g id="FORMATTEDTIME_1">%2$s</xliff:g>‎‏‎‎‏‏‏‎)‎‏‎‎‏‎</item>
       <item quantity="one">‎‏‎‎‎‎‎‏‎‏‏‏‎‎‎‎‎‎‏‎‎‏‎‎‎‎‏‏‏‏‏‏‎‏‏‏‎‏‎‏‎‏‏‎‏‏‎‏‎‎‏‎‎‏‎‏‏‎‎‏‏‎‏‎‏‎‎‎‏‏‏‎‎‎‎‏‎‎‎‏‎‏‎‎‎‎‎‎‏‎‎‏‎‎‎‎For 1 min (until ‎‏‎‎‏‏‎<xliff:g id="FORMATTEDTIME_0">%2$s</xliff:g>‎‏‎‎‏‏‏‎)‎‏‎‎‏‎</item>
diff --git a/core/res/res/values/strings.xml b/core/res/res/values/strings.xml
index d6ee28b93f92edca59ac493d63d1f70f031bd35a..6d79ff7186a64c52f28221dc404f0ca67a6b6ab8 100644
--- a/core/res/res/values/strings.xml
+++ b/core/res/res/values/strings.xml
@@ -4828,24 +4828,24 @@
     <string name="package_installed_device_owner">Installed by your admin</string>
     <!-- Notification shown when device owner silently updates a package [CHAR LIMIT=NONE] -->
     <string name="package_updated_device_owner">Updated by your admin</string>
     <!-- Notification shown when device owner silently deletes a package [CHAR LIMIT=NONE] -->
     <string name="package_deleted_device_owner">Deleted by your admin</string>
 
     <!-- [CHAR LIMIT=25] String for confirmation button to enable a feature gated by the battery saver warning-->
     <string name="confirm_battery_saver">OK</string>
 
     <!-- [CHAR_LIMIT=NONE] Battery saver: Feature description, with a "learn more" link. -->
-    <string name="battery_saver_description_with_learn_more">To extend battery life, Battery Saver:\n\n\u2022 Turns on Dark theme\n\u2022 Turns off or restricts background activity, some visual effects, and other features like \u201cHey Google\u201d\n\n<annotation id="url">Learn more</annotation></string>
+    <string name="battery_saver_description_with_learn_more">To extend battery life, Battery Saver:\n\n\u2022 Turns on Dark theme\n\u2022 Turns off or restricts background activity, some visual effects, and other features\n\n<annotation id="url">Learn more</annotation></string>
 
     <!-- [CHAR_LIMIT=NONE] Battery saver: Feature description, without a "learn more" link. -->
-    <string name="battery_saver_description">To extend battery life, Battery Saver:\n\n\u2022 Turns on Dark theme\n\u2022 Turns off or restricts background activity, some visual effects, and other features like \u201cHey Google\u201d</string>
+    <string name="battery_saver_description">To extend battery life, Battery Saver:\n\n\u2022 Turns on Dark theme\n\u2022 Turns off or restricts background activity, some visual effects, and other features</string>
 
     <!-- [CHAR_LIMIT=NONE] Data saver: Feature description -->
     <string name="data_saver_description">To help reduce data usage, Data Saver prevents some apps from sending or receiving data in the background. An app you’re currently using can access data, but may do so less frequently. This may mean, for example, that images don’t display until you tap them.</string>
     <!-- [CHAR_LIMIT=35] Data saver: Title on first-time dialog -->
     <string name="data_saver_enable_title">Turn on Data Saver?</string>
     <!-- [CHAR_LIMIT=16] Data saver: Button to turn it on on first-time dialog -->
     <string name="data_saver_enable_button">Turn on</string>
 
     <!-- Zen mode condition - summary: time duration in minutes. [CHAR LIMIT=NONE] -->
     <plurals name="zen_mode_duration_minutes_summary">

commit f956f1ce502e5c613c9758d97b940ec8f30081de
Author: Rusty Bird <rustybird@net-c.com>
Date:   Wed 2020-04-22 18:28:33+0000

    disable safe volume everywhere, not just the US
    
    Safe Volume has many false alarms. And if overridden by the user, at
    every 20 hours of accumulated(!) audio playback it will intentionally
    reset - even while the audio is playing. This can ruin the listening
    experience, and ironically pose a safety hazard when e.g. the user is
    operating a vehicle...
    
    AOSP already opted out of Safe Volume in the overlays for Mobile Country
    Code 310-316 (= US). Make this universal.
    
    Signed-off-by: Rusty Bird <rustybird@net-c.com>
---
 core/res/res/values/config.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/core/res/res/values/config.xml b/core/res/res/values/config.xml
index a197c6a50e61cc0990a2aa2b1668ac96bf5069f5..5887064591378cd972570ef6f24cc9f2683288ce 100644
--- a/core/res/res/values/config.xml
+++ b/core/res/res/values/config.xml
@@ -2413,21 +2413,21 @@
              0 - COLOR_MODE_DEFAULT
              7 - COLOR_MODE_SRGB
     -->
     <integer name="config_defaultDisplayDefaultColorMode">0</integer>
 
     <!-- When true use the linux /dev/input/event subsystem to detect the switch changes
          on the headphone/microphone jack. When false use the older uevent framework. -->
     <bool name="config_useDevInputEventForAudioJack">false</bool>
 
     <!-- Whether safe headphone volume is enabled or not (country specific). -->
-    <bool name="config_safe_media_volume_enabled">true</bool>
+    <bool name="config_safe_media_volume_enabled">false</bool>
 
     <!-- Whether safe headphone volume warning dialog is disabled on Vol+ (operator specific). -->
     <bool name="config_safe_media_disable_on_volume_up">true</bool>
 
     <!-- Set to true if the wifi display supports compositing content stored
          in gralloc protected buffers.  For this to be true, there must exist
          a protected hardware path for surface flinger to composite and send
          protected buffers to the wifi display video encoder.
 
          If this flag is false, we advise applications not to use protected

commit 76b43a57d24dd685e61c8e5325755e97af1b5b94
Author: Renlord <me@renlord.com>
Date:   Thu 2019-11-14 23:13:15+1100

    imprecise authenticated timestamps using https
    
    added custom trust manager to bypass certificate time validation
    
    implemented a custom eternalcertificate class that ignores certification
    time checks.
    
    Signed-off-by: Renlord <me@renlord.com>
---
 core/java/android/net/SntpClient.java      | 312 ++++++++++++++++++++++++++++-
 core/java/android/provider/Settings.java   |   5 +
 core/java/android/util/NtpTrustedTime.java |  49 ++++-
 core/res/res/values/config.xml             |   5 +
 core/res/res/values/symbols.xml            |   2 +
 5 files changed, 360 insertions(+), 13 deletions(-)

diff --git a/core/java/android/net/SntpClient.java b/core/java/android/net/SntpClient.java
index 8c6faf6d99703c598ddb2d376aa13eefbf8fae84..4260e123ade5d1248391ea4922fc868ac916865c 100644
--- a/core/java/android/net/SntpClient.java
+++ b/core/java/android/net/SntpClient.java
@@ -15,40 +15,67 @@
  */
 
 package android.net;
 
 import android.compat.annotation.UnsupportedAppUsage;
 import android.os.SystemClock;
 import android.util.Log;
 
 import com.android.internal.util.TrafficStatsConstants;
 
+import java.net.URL;
+import java.net.URLConnection;
 import java.net.DatagramPacket;
 import java.net.DatagramSocket;
 import java.net.InetAddress;
 import java.util.Arrays;
 
+import javax.net.ssl.TrustManagerFactory;
+import javax.net.ssl.TrustManager;
+import javax.net.ssl.X509TrustManager;
+import javax.net.ssl.SSLContext;
+import javax.net.ssl.HttpsURLConnection;
+
+import java.security.cert.X509Certificate;
+
+import java.util.Date;
+import java.util.Set;
+import java.math.BigInteger;
+import java.security.KeyStore;
+import java.security.Principal;
+import java.security.NoSuchAlgorithmException;
+import java.security.PublicKey;
+import java.security.SignatureException;
+import java.security.NoSuchProviderException;
+import java.security.InvalidKeyException;
+import java.security.cert.CertificateEncodingException;
+import java.security.cert.CertificateException;
+import java.security.cert.CertificateExpiredException;
+import java.security.cert.CertificateNotYetValidException;
+
+import static android.os.Build.TIME;
+
 /**
  * {@hide}
  *
  * Simple SNTP client class for retrieving network time.
  *
  * Sample usage:
  * <pre>SntpClient client = new SntpClient();
  * if (client.requestTime("time.foo.com")) {
  *     long now = client.getNtpTime() + SystemClock.elapsedRealtime() - client.getNtpTimeReference();
  * }
  * </pre>
  */
 public class SntpClient {
     private static final String TAG = "SntpClient";
-    private static final boolean DBG = true;
+    private static final boolean DBG = false;
 
     private static final int REFERENCE_TIME_OFFSET = 16;
     private static final int ORIGINATE_TIME_OFFSET = 24;
     private static final int RECEIVE_TIME_OFFSET = 32;
     private static final int TRANSMIT_TIME_OFFSET = 40;
     private static final int NTP_PACKET_SIZE = 48;
 
     private static final int NTP_PORT = 123;
     private static final int NTP_MODE_CLIENT = 3;
     private static final int NTP_MODE_SERVER = 4;
@@ -65,20 +92,23 @@ public class SntpClient {
 
     // system time computed from NTP server response
     private long mNtpTime;
 
     // value of SystemClock.elapsedRealtime() corresponding to mNtpTime
     private long mNtpTimeReference;
 
     // round trip time in milliseconds
     private long mRoundTripTime;
 
+    // SntpClient mode (http/ntp)
+    private String mNtpMode = "ntp";
+
     private static class InvalidServerReplyException extends Exception {
         public InvalidServerReplyException(String message) {
             super(message);
         }
     }
 
     @UnsupportedAppUsage
     public SntpClient() {
     }
 
@@ -87,27 +117,37 @@ public class SntpClient {
      *
      * @param host host name of the server.
      * @param timeout network timeout in milliseconds.
      * @param network network over which to send the request.
      * @return true if the transaction was successful.
      */
     public boolean requestTime(String host, int timeout, Network network) {
         final Network networkForResolv = network.getPrivateDnsBypassingCopy();
         InetAddress address = null;
         try {
-            address = networkForResolv.getByName(host);
+            switch(mNtpMode) {
+                case "https":
+                    URL url = new URL(host);
+                    return requestHttpTime(url, timeout, network);
+                case "ntp":
+                    address = networkForResolv.getByName(host);
+                    return requestTime(address, NTP_PORT, timeout, networkForResolv);
+                default:
+                    EventLogTags.writeNtpFailure(host, "unknown protocol " + mNtpMode + " provided");
+                    if (DBG) Log.d(TAG, "request time failed, wrong protocol");
+                    return false;
+            }
         } catch (Exception e) {
             EventLogTags.writeNtpFailure(host, e.toString());
             if (DBG) Log.d(TAG, "request time failed: " + e);
             return false;
         }
-        return requestTime(address, NTP_PORT, timeout, networkForResolv);
     }
 
     public boolean requestTime(InetAddress address, int port, int timeout, Network network) {
         DatagramSocket socket = null;
         final int oldTag = TrafficStats.getAndSetThreadStatsTag(
                 TrafficStatsConstants.TAG_SYSTEM_NTP);
         try {
             socket = new DatagramSocket();
             network.bindSocket(socket);
             socket.setSoTimeout(timeout);
@@ -149,21 +189,21 @@ public class SntpClient {
             // responseTime = transmitTime + transit - skew
             // clockOffset = ((receiveTime - originateTime) + (transmitTime - responseTime))/2
             //             = ((originateTime + transit + skew - originateTime) +
             //                (transmitTime - (transmitTime + transit - skew)))/2
             //             = ((transit + skew) + (transmitTime - transmitTime - transit + skew))/2
             //             = (transit + skew - transit + skew)/2
             //             = (2 * skew)/2 = skew
             long clockOffset = ((receiveTime - originateTime) + (transmitTime - responseTime))/2;
             EventLogTags.writeNtpSuccess(address.toString(), roundTripTime, clockOffset);
             if (DBG) {
-                Log.d(TAG, "round trip: " + roundTripTime + "ms, " +
+                Log.d(TAG, "default method -- round trip: " + roundTripTime + "ms, " +
                         "clock offset: " + clockOffset + "ms");
             }
 
             // save our results - use the times on this side of the network latency
             // (response rather than request time)
             mNtpTime = responseTime + clockOffset;
             mNtpTimeReference = responseTicks;
             mRoundTripTime = roundTripTime;
         } catch (Exception e) {
             EventLogTags.writeNtpFailure(address.toString(), e.toString());
@@ -172,20 +212,276 @@ public class SntpClient {
         } finally {
             if (socket != null) {
                 socket.close();
             }
             TrafficStats.setThreadStatsTag(oldTag);
         }
 
         return true;
     }
 
+    private boolean requestHttpTime(URL url, int timeout, Network network) {
+        final int oldTag = TrafficStats.getAndSetThreadStatsTag(
+                TrafficStatsConstants.TAG_SYSTEM_NTP);
+        final Network networkForResolv = network.getPrivateDnsBypassingCopy();
+        if (DBG) Log.d(TAG, "requestHttpTime() getting time using https");
+        try {
+            TrustManagerFactory tmf = TrustManagerFactory
+                .getInstance(TrustManagerFactory.getDefaultAlgorithm());
+            tmf.init((KeyStore) null);
+
+            X509TrustManager x509Tm = null;
+            for (TrustManager tm : tmf.getTrustManagers()) {
+                if (tm instanceof X509TrustManager) {
+                    x509Tm = (X509TrustManager) tm;
+                    break;
+                }
+            }
+
+            final X509TrustManager finalTm = x509Tm;
+            X509TrustManager customTm = new X509TrustManager() {
+
+                // custom eternal certificate class that ignores expired SSL certificates
+                // adapted from https://gist.github.com/divergentdave/9a68d820e3610513bd4fcdc4ae5f91a1
+                class TimeLeewayCertificate extends X509Certificate {
+                    private final X509Certificate originalCertificate;
+
+                    public TimeLeewayCertificate(X509Certificate originalCertificate) {
+                        this.originalCertificate = originalCertificate;
+                    }
+
+                    @Override
+                    public void checkValidity() throws CertificateExpiredException, CertificateNotYetValidException {
+                        // Ignore notBefore/notAfter
+                        checkValidity(new Date());
+                    }
+
+                    @Override
+                    public void checkValidity(Date date) throws CertificateExpiredException, CertificateNotYetValidException {
+                        // expiration must be set after OS build date
+                        if (getNotAfter().compareTo(new Date(TIME)) < 0) {
+                            throw new CertificateExpiredException("Certificate expired at "
+                                    + getNotAfter().toString() + " (compared to " + date.toString() + ")");
+                        }
+                    }
+
+                    @Override
+                    public int getVersion() {
+                        return originalCertificate.getVersion();
+                    }
+
+                    @Override
+                    public BigInteger getSerialNumber() {
+                        return originalCertificate.getSerialNumber();
+                    }
+
+                    @Override
+                    public Principal getIssuerDN() {
+                        return originalCertificate.getIssuerDN();
+                    }
+
+                    @Override
+                    public Principal getSubjectDN() {
+                        return originalCertificate.getSubjectDN();
+                    }
+
+                    @Override
+                    public Date getNotBefore() {
+                        return originalCertificate.getNotBefore();
+                    }
+
+                    @Override
+                    public Date getNotAfter() {
+                        return originalCertificate.getNotAfter();
+                    }
+
+                    @Override
+                    public byte[] getTBSCertificate() throws CertificateEncodingException {
+                        return originalCertificate.getTBSCertificate();
+                    }
+
+                    @Override
+                    public byte[] getSignature() {
+                        return originalCertificate.getSignature();
+                    }
+
+                    @Override
+                    public String getSigAlgName() {
+                        return originalCertificate.getSigAlgName();
+                    }
+
+                    @Override
+                    public String getSigAlgOID() {
+                        return originalCertificate.getSigAlgOID();
+                    }
+
+                    @Override
+                    public byte[] getSigAlgParams() {
+                        return originalCertificate.getSigAlgParams();
+                    }
+
+                    @Override
+                    public boolean[] getIssuerUniqueID() {
+                        return originalCertificate.getIssuerUniqueID();
+                    }
+
+                    @Override
+                    public boolean[] getSubjectUniqueID() {
+                        return originalCertificate.getSubjectUniqueID();
+                    }
+
+                    @Override
+                    public boolean[] getKeyUsage() {
+                        return originalCertificate.getKeyUsage();
+                    }
+
+                    @Override
+                    public int getBasicConstraints() {
+                        return originalCertificate.getBasicConstraints();
+                    }
+
+                    @Override
+                    public byte[] getEncoded() throws CertificateEncodingException {
+                        return originalCertificate.getEncoded();
+                    }
+
+                    @Override
+                    public void verify(PublicKey key) throws CertificateException,
+                           NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, SignatureException
+                    {
+                        originalCertificate.verify(key);
+                    }
+
+                    @Override
+                    public void verify(PublicKey key, String sigProvider) throws CertificateException,
+                           NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, SignatureException
+                    {
+                        originalCertificate.verify(key, sigProvider);
+                    }
+
+                    @Override
+                    public String toString() {
+                        return originalCertificate.toString();
+                    }
+
+                    @Override
+                    public PublicKey getPublicKey() {
+                        return originalCertificate.getPublicKey();
+                    }
+
+                    @Override
+                    public Set<String> getCriticalExtensionOIDs() {
+                        return originalCertificate.getCriticalExtensionOIDs();
+                    }
+
+                    @Override
+                    public byte[] getExtensionValue(String oid) {
+                        return originalCertificate.getExtensionValue(oid);
+                    }
+
+                    @Override
+                    public Set<String> getNonCriticalExtensionOIDs() {
+                        return originalCertificate.getNonCriticalExtensionOIDs();
+                    }
+
+                    @Override
+                    public boolean hasUnsupportedCriticalExtension() {
+                        return originalCertificate.hasUnsupportedCriticalExtension();
+                    }
+                }
+
+                @Override
+                public X509Certificate[] getAcceptedIssuers() {
+                    return finalTm.getAcceptedIssuers();
+                }
+
+                @Override
+                public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
+                        // replace the top-level certificate with a certificate validation routine that
+                        // ignores expired certificates due to clock drift.
+                        X509Certificate[] timeLeewayChain = new X509Certificate[chain.length];
+                        for (int i = 0; i < chain.length; i++) {
+                            timeLeewayChain[i] = new TimeLeewayCertificate(chain[i]);
+                        }
+                        finalTm.checkServerTrusted(timeLeewayChain, authType);
+                }
+
+                @Override
+                public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {
+                    // never gets used, so default to stock.
+                    finalTm.checkClientTrusted(chain, authType);
+                }
+            };
+
+            if (DBG) Log.d(TAG, "requestHttpTime() setting up URL connection");
+            URLConnection urlConnection = networkForResolv.openConnection(url);
+            SSLContext sslContext = SSLContext.getInstance("SSL");
+            sslContext.init(null, new TrustManager[] { customTm }, null);
+
+            if (urlConnection instanceof HttpsURLConnection) {
+                HttpsURLConnection httpsUrlConnection = (HttpsURLConnection) urlConnection;
+                try {
+                    // change the SSLSocketFactory to use custom trust manager
+                    httpsUrlConnection.setSSLSocketFactory(sslContext.getSocketFactory());
+                    httpsUrlConnection.setConnectTimeout(timeout);
+                    httpsUrlConnection.setReadTimeout(timeout);
+                    httpsUrlConnection.setRequestProperty("Connection", "close");
+                    final long requestTime = System.currentTimeMillis();
+                    final long requestTicks = SystemClock.elapsedRealtime();
+                    // implicitly fires GET request.
+                    httpsUrlConnection.getInputStream();
+                    long transmitTime = urlConnection.getDate();
+                    // http servers dont log originate/receive time (imprecise offset).
+                    long receiveTime = urlConnection.getDate();
+                    final long responseTicks = SystemClock.elapsedRealtime();
+                    final long responseTime = requestTime + (responseTicks - requestTicks);
+                    long roundTripTime = responseTicks - requestTicks - (transmitTime - receiveTime);
+                    long clockOffset = ((receiveTime - requestTime) + (transmitTime - responseTime))/2;
+                    if (DBG) {
+                        Log.d(TAG, "https method -- round trip: " + roundTripTime + "ms, " +
+                                "clock offset: " + clockOffset + "ms");
+                    }
+                    if (receiveTime < TIME) {
+                        Log.w(TAG, "https method received timestamp before BUILD unix time, rejecting");
+                        return false;
+                    }
+                    EventLogTags.writeNtpSuccess(url.toString(), roundTripTime, clockOffset);
+                    // save our results - use the times on this side of the network latency
+                    // (response rather than request time)
+                    mNtpTime = responseTime + clockOffset;
+                    mNtpTimeReference = responseTicks;
+                    mRoundTripTime = roundTripTime;
+                } catch (Exception e) {
+                    Log.e(TAG, "request https time failed: " + e.toString());
+                    if (DBG) e.printStackTrace();
+                    return false;
+                } finally {
+                    httpsUrlConnection.disconnect();
+                }
+            } else {
+                EventLogTags.writeNtpFailure(url.toString(), "did not receive HttpsURLConnection from Android Network");
+                if (DBG) Log.d(TAG, "request time failed: did not receive HttpsURLConnection from Android Network");
+                return false;
+            }
+        } catch (Exception e) {
+            EventLogTags.writeNtpFailure(url.toString(), e.toString());
+            Log.e(TAG, "request time failed: " + e.toString());
+            if (DBG) {
+                e.printStackTrace();
+            }
+            return false;
+        } finally {
+            TrafficStats.setThreadStatsTag(oldTag);
+        }
+        return true;
+    }
+
     @Deprecated
     @UnsupportedAppUsage
     public boolean requestTime(String host, int timeout) {
         Log.w(TAG, "Shame on you for calling the hidden API requestTime()!");
         return false;
     }
 
     /**
      * Returns the time computed from the NTP transaction.
      *
@@ -210,20 +506,28 @@ public class SntpClient {
     /**
      * Returns the round trip time of the NTP transaction
      *
      * @return round trip time in milliseconds.
      */
     @UnsupportedAppUsage
     public long getRoundTripTime() {
         return mRoundTripTime;
     }
 
+    /**
+     * Sets the ntp mode
+     */
+    @UnsupportedAppUsage
+    public void setNtpMode(String mode) {
+        mNtpMode = mode;
+    }
+
     private static void checkValidServerReply(
             byte leap, byte mode, int stratum, long transmitTime)
             throws InvalidServerReplyException {
         if (leap == NTP_LEAP_NOSYNC) {
             throw new InvalidServerReplyException("unsynchronized server");
         }
         if ((mode != NTP_MODE_SERVER) && (mode != NTP_MODE_BROADCAST)) {
             throw new InvalidServerReplyException("untrusted mode: " + mode);
         }
         if ((stratum == NTP_STRATUM_DEATH) || (stratum > NTP_STRATUM_MAX)) {
diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index ca2a8222c56d7bf9ca21807760613e7f207cc902..e831c408eb31f66391a06a57b9b58aeb2d47a1db 100755
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -9940,20 +9940,25 @@ public final class Settings {
 
        /**
         * The length of time in milli-seconds that automatic small adjustments to
         * SystemClock are ignored if NITZ_UPDATE_DIFF is not exceeded.
         * @hide
         */
        public static final String NITZ_UPDATE_SPACING = "nitz_update_spacing";
 
        /** Preferred NTP server. {@hide} */
        public static final String NTP_SERVER = "ntp_server";
+       /** Preferred HTTPS time server. {@hide} */
+       public static final String HTTPS_TIME_SERVER = "https_time_server";
+       /** Prefered method to get NTP. {@hide} */
+       public static final String NTP_MODE = "ntp_mode";
+
        /** Timeout in milliseconds to wait for NTP server. {@hide} */
        public static final String NTP_TIMEOUT = "ntp_timeout";
 
        /** {@hide} */
        public static final String STORAGE_BENCHMARK_INTERVAL = "storage_benchmark_interval";
 
         /**
          * Whether or not Settings should enable psd API.
          * {@hide}
          */
diff --git a/core/java/android/util/NtpTrustedTime.java b/core/java/android/util/NtpTrustedTime.java
index 0892c94d5becde6706b11d9ece23a91a264d7ff5..c1173b6cf9725de63aee2ccbbb3c82fb256a9f4e 100644
--- a/core/java/android/util/NtpTrustedTime.java
+++ b/core/java/android/util/NtpTrustedTime.java
@@ -101,21 +101,20 @@ public class NtpTrustedTime implements TrustedTime {
     @NonNull
     private final Context mContext;
 
     /**
      * A supplier that returns the ConnectivityManager. The Supplier can return null if
      * ConnectivityService isn't running yet.
      */
     private final Supplier<ConnectivityManager> mConnectivityManagerSupplier =
             new Supplier<ConnectivityManager>() {
         private ConnectivityManager mConnectivityManager;
-
         @Nullable
         @Override
         public synchronized ConnectivityManager get() {
             // We can't do this at initialization time: ConnectivityService might not be running
             // yet.
             if (mConnectivityManager == null) {
                 mConnectivityManager = mContext.getSystemService(ConnectivityManager.class);
             }
             return mConnectivityManager;
         }
@@ -152,23 +151,23 @@ public class NtpTrustedTime implements TrustedTime {
             if (connectivityManager == null) {
                 if (LOGD) Log.d(TAG, "forceRefresh: no ConnectivityManager");
                 return false;
             }
             final Network network = connectivityManager.getActiveNetwork();
             final NetworkInfo ni = connectivityManager.getNetworkInfo(network);
             if (ni == null || !ni.isConnected()) {
                 if (LOGD) Log.d(TAG, "forceRefresh: no connectivity");
                 return false;
             }
-
             if (LOGD) Log.d(TAG, "forceRefresh() from cache miss");
             final SntpClient client = new SntpClient();
+            client.setNtpMode(connectionInfo.getNtpMode());
             final String serverName = connectionInfo.getServer();
             final int timeoutMillis = connectionInfo.getTimeoutMillis();
             if (client.requestTime(serverName, timeoutMillis, network)) {
                 long ntpCertainty = client.getRoundTripTime() / 2;
                 mTimeResult = new TimeResult(
                         client.getNtpTime(), client.getNtpTimeReference(), ntpCertainty);
                 return true;
             } else {
                 return false;
             }
@@ -252,45 +251,77 @@ public class NtpTrustedTime implements TrustedTime {
      */
     @Nullable
     public TimeResult getCachedTimeResult() {
         return mTimeResult;
     }
 
     private static class NtpConnectionInfo {
 
         @NonNull private final String mServer;
         private final int mTimeoutMillis;
+        private final String mNtpMode;
 
         NtpConnectionInfo(@NonNull String server, int timeoutMillis) {
             mServer = Objects.requireNonNull(server);
             mTimeoutMillis = timeoutMillis;
+            mNtpMode = "ntp";
+        }
+
+        NtpConnectionInfo(@NonNull String server, int timeoutMillis, @NonNull String ntpMode) {
+            mServer = Objects.requireNonNull(server);
+            mTimeoutMillis = timeoutMillis;
+            mNtpMode = ntpMode;
         }
 
         @NonNull
         public String getServer() {
             return mServer;
         }
 
+        @NonNull
+        public String getNtpMode() {
+            return mNtpMode;
+        }
+
         int getTimeoutMillis() {
             return mTimeoutMillis;
         }
     }
 
     @GuardedBy("this")
     private NtpConnectionInfo getNtpConnectionInfo() {
         final ContentResolver resolver = mContext.getContentResolver();
 
         final Resources res = mContext.getResources();
-        final String defaultServer = res.getString(
-                com.android.internal.R.string.config_ntpServer);
-        final int defaultTimeoutMillis = res.getInteger(
-                com.android.internal.R.integer.config_ntpTimeout);
+        final String defaultNtpMode = res.getString(
+                com.android.internal.R.string.config_ntpMode);
+        final String ntpMode =
+                Settings.Global.getString(resolver, Settings.Global.NTP_MODE) != null ?
+                Settings.Global.getString(resolver, Settings.Global.NTP_MODE) :
+                defaultNtpMode;
 
-        final String secureServer = Settings.Global.getString(
-                resolver, Settings.Global.NTP_SERVER);
+        String defaultServer;
+        String secureServer;
+
+        int defaultTimeoutMillis = res.getInteger(
+                com.android.internal.R.integer.config_ntpTimeout);
         final int timeoutMillis = Settings.Global.getInt(
                 resolver, Settings.Global.NTP_TIMEOUT, defaultTimeoutMillis);
 
+        switch(ntpMode) {
+            case "https":
+                defaultServer = res.getString(
+                        com.android.internal.R.string.config_httpsTimeServer);
+                secureServer = Settings.Global.getString(
+                        resolver, Settings.Global.HTTPS_TIME_SERVER);
+                break;
+            default:
+                defaultServer = res.getString(
+                        com.android.internal.R.string.config_ntpServer);
+                secureServer = Settings.Global.getString(
+                        resolver, Settings.Global.NTP_SERVER);
+                break;
+        }
         final String server = secureServer != null ? secureServer : defaultServer;
-        return TextUtils.isEmpty(server) ? null : new NtpConnectionInfo(server, timeoutMillis);
+        return TextUtils.isEmpty(server) ? null : new NtpConnectionInfo(server, timeoutMillis, ntpMode);
     }
 }
diff --git a/core/res/res/values/config.xml b/core/res/res/values/config.xml
index 5887064591378cd972570ef6f24cc9f2683288ce..4a73febba2c1c1c7695c83469cc5ef2e16107390 100644
--- a/core/res/res/values/config.xml
+++ b/core/res/res/values/config.xml
@@ -2029,22 +2029,27 @@
 
     <!-- Whether a software navigation bar should be shown. NOTE: in the future this may be
          autodetected from the Configuration. -->
     <bool name="config_showNavigationBar">false</bool>
 
     <!-- Whether action menu items should be displayed in ALLCAPS or not.
          Defaults to true. If this is not appropriate for specific locales
          it should be disabled in that locale's resources. -->
     <bool name="config_actionMenuItemAllCaps">true</bool>
 
+    <!-- Network derived time preferred protocol
+         Supports "ntp" or "https" only now -->
+    <string translatable="false" name="config_ntpMode">https</string>
     <!-- Remote server that can provide NTP responses. -->
     <string translatable="false" name="config_ntpServer">time.android.com</string>
+    <!-- Remote server that can provide HTTPS time responses -->
+    <string translatable="false" name="config_httpsTimeServer">https://time.grapheneos.org</string>
     <!-- Normal polling frequency in milliseconds -->
     <integer name="config_ntpPollingInterval">86400000</integer>
     <!-- Try-again polling interval in milliseconds, in case the network request failed -->
     <integer name="config_ntpPollingIntervalShorter">60000</integer>
     <!-- Number of times to try again with the shorter interval, before backing
          off until the normal polling interval. A value < 0 indicates infinite. -->
     <integer name="config_ntpRetry">3</integer>
     <!-- Timeout to wait for NTP server response in milliseconds. -->
     <integer name="config_ntpTimeout">5000</integer>
 
diff --git a/core/res/res/values/symbols.xml b/core/res/res/values/symbols.xml
index 3ef0a8dc9daa71b890387a8e5069ab8a42ac634d..a69ff4af391757fcb7116cf0374f16ace3d78f3f 100644
--- a/core/res/res/values/symbols.xml
+++ b/core/res/res/values/symbols.xml
@@ -679,20 +679,22 @@
   <java-symbol type="string" name="chooseActivity" />
   <java-symbol type="string" name="checked" />
   <java-symbol type="string" name="config_default_dns_server" />
   <java-symbol type="string" name="config_ethernet_iface_regex" />
   <java-symbol type="string" name="not_checked" />
   <java-symbol type="array" name="config_ethernet_interfaces" />
   <java-symbol type="array" name="config_wakeonlan_supported_interfaces" />
   <java-symbol type="string" name="config_forceVoiceInteractionServicePackage" />
   <java-symbol type="string" name="config_mms_user_agent" />
   <java-symbol type="string" name="config_mms_user_agent_profile_url" />
+  <java-symbol type="string" name="config_ntpMode" />
+  <java-symbol type="string" name="config_httpsTimeServer" />
   <java-symbol type="string" name="config_ntpServer" />
   <java-symbol type="string" name="config_useragentprofile_url" />
   <java-symbol type="string" name="config_appsNotReportingCrashes" />
   <java-symbol type="string" name="contentServiceSync" />
   <java-symbol type="string" name="contentServiceSyncNotificationTitle" />
   <java-symbol type="string" name="contentServiceTooManyDeletesNotificationDesc" />
   <java-symbol type="string" name="date_and_time" />
   <java-symbol type="string" name="date_picker_decrement_day_button" />
   <java-symbol type="string" name="date_picker_decrement_month_button" />
   <java-symbol type="string" name="date_picker_decrement_year_button" />

commit 704b883f1c35c2a8383dfe8a3c304bbf55e76fd6
Author: Renlord <me@renlord.com>
Date:   Tue 2020-09-29 10:58:40+1000

    reinstate toggle for disabling NITZ time updates to prefer network time updates instead
---
 core/res/res/values/config.xml                     |  2 ++
 core/res/res/values/symbols.xml                    |  1 +
 .../server/timedetector/TimeDetectorStrategy.java  |  3 +++
 .../TimeDetectorStrategyCallbackImpl.java          |  9 +++++++
 .../timedetector/TimeDetectorStrategyImpl.java     | 28 +++++++++++++---------
 5 files changed, 32 insertions(+), 11 deletions(-)

diff --git a/core/res/res/values/config.xml b/core/res/res/values/config.xml
index 4a73febba2c1c1c7695c83469cc5ef2e16107390..348e9c8830e7f11132b2275bf255989313e10f75 100644
--- a/core/res/res/values/config.xml
+++ b/core/res/res/values/config.xml
@@ -2040,20 +2040,22 @@
          Supports "ntp" or "https" only now -->
     <string translatable="false" name="config_ntpMode">https</string>
     <!-- Remote server that can provide NTP responses. -->
     <string translatable="false" name="config_ntpServer">time.android.com</string>
     <!-- Remote server that can provide HTTPS time responses -->
     <string translatable="false" name="config_httpsTimeServer">https://time.grapheneos.org</string>
     <!-- Normal polling frequency in milliseconds -->
     <integer name="config_ntpPollingInterval">86400000</integer>
     <!-- Try-again polling interval in milliseconds, in case the network request failed -->
     <integer name="config_ntpPollingIntervalShorter">60000</integer>
+    <!-- Toggle to update timestamp using NITZ -->
+    <bool name="config_nitzTimeUpdate">false</bool>
     <!-- Number of times to try again with the shorter interval, before backing
          off until the normal polling interval. A value < 0 indicates infinite. -->
     <integer name="config_ntpRetry">3</integer>
     <!-- Timeout to wait for NTP server response in milliseconds. -->
     <integer name="config_ntpTimeout">5000</integer>
 
     <!-- Default network policy warning threshold, in megabytes. -->
     <integer name="config_networkPolicyDefaultWarning">2048</integer>
 
     <!-- Set and Unsets WiMAX -->
diff --git a/core/res/res/values/symbols.xml b/core/res/res/values/symbols.xml
index a69ff4af391757fcb7116cf0374f16ace3d78f3f..9167f66304296813230b7264ad4f597b48f7b8f5 100644
--- a/core/res/res/values/symbols.xml
+++ b/core/res/res/values/symbols.xml
@@ -436,20 +436,21 @@
   <java-symbol type="integer" name="config_veryLongPressTimeout" />
   <java-symbol type="integer" name="config_longPressOnBackBehavior" />
   <java-symbol type="bool" name="config_allowStartActivityForLongPressOnPowerInSetup" />
   <java-symbol type="integer" name="config_lowMemoryKillerMinFreeKbytesAdjust" />
   <java-symbol type="integer" name="config_lowMemoryKillerMinFreeKbytesAbsolute" />
   <java-symbol type="integer" name="config_max_pan_devices" />
   <java-symbol type="integer" name="config_ntpPollingInterval" />
   <java-symbol type="integer" name="config_ntpPollingIntervalShorter" />
   <java-symbol type="integer" name="config_ntpRetry" />
   <java-symbol type="integer" name="config_ntpTimeout" />
+  <java-symbol type="bool" name="config_nitzTimeUpdate" />
   <java-symbol type="integer" name="config_shortPressOnPowerBehavior" />
   <java-symbol type="integer" name="config_toastDefaultGravity" />
   <java-symbol type="integer" name="config_triplePressOnPowerBehavior" />
   <java-symbol type="integer" name="config_shortPressOnSleepBehavior" />
   <java-symbol type="integer" name="config_windowOutsetBottom" />
   <java-symbol type="integer" name="db_connection_pool_size" />
   <java-symbol type="integer" name="db_journal_size_limit" />
   <java-symbol type="integer" name="db_wal_autocheckpoint" />
   <java-symbol type="integer" name="db_default_idle_connection_timeout" />
   <java-symbol type="integer" name="config_soundEffectVolumeDb" />
diff --git a/services/core/java/com/android/server/timedetector/TimeDetectorStrategy.java b/services/core/java/com/android/server/timedetector/TimeDetectorStrategy.java
index a5fba4e6ba49772695feb10065e85c585eecca37..0d44d20729732732403549453b848817db44566c 100644
--- a/services/core/java/com/android/server/timedetector/TimeDetectorStrategy.java
+++ b/services/core/java/com/android/server/timedetector/TimeDetectorStrategy.java
@@ -51,20 +51,23 @@ public interface TimeDetectorStrategy {
         /**
          * The absolute threshold below which the system clock need not be updated. i.e. if setting
          * the system clock would adjust it by less than this (either backwards or forwards) then it
          * need not be set.
          */
         int systemClockUpdateThresholdMillis();
 
         /** Returns true if automatic time detection is enabled. */
         boolean isAutoTimeDetectionEnabled();
 
+        /** Returns true if NITZ time updates is enabled. */
+        boolean isNITZTimeDetectionEnabled();
+
         /** Acquire a suitable wake lock. Must be followed by {@link #releaseWakeLock()} */
         void acquireWakeLock();
 
         /** Returns the elapsedRealtimeMillis clock value. */
         long elapsedRealtimeMillis();
 
         /** Returns the system clock value. */
         long systemClockMillis();
 
         /** Sets the device system clock. The WakeLock must be held. */
diff --git a/services/core/java/com/android/server/timedetector/TimeDetectorStrategyCallbackImpl.java b/services/core/java/com/android/server/timedetector/TimeDetectorStrategyCallbackImpl.java
index 19484db149b1697609c989ce93edada2e184482b..e9e4071810b35e778b04fac129cd7863e93f3aba 100644
--- a/services/core/java/com/android/server/timedetector/TimeDetectorStrategyCallbackImpl.java
+++ b/services/core/java/com/android/server/timedetector/TimeDetectorStrategyCallbackImpl.java
@@ -41,50 +41,59 @@ public final class TimeDetectorStrategyCallbackImpl implements TimeDetectorStrat
      * If a newly calculated system clock time and the current system clock time differs by this or
      * more the system clock will actually be updated. Used to prevent the system clock being set
      * for only minor differences.
      */
     private final int mSystemClockUpdateThresholdMillis;
 
     @NonNull private final Context mContext;
     @NonNull private final ContentResolver mContentResolver;
     @NonNull private final PowerManager.WakeLock mWakeLock;
     @NonNull private final AlarmManager mAlarmManager;
+    @NonNull private final boolean mNitzTimeDetectionToggle;
 
     public TimeDetectorStrategyCallbackImpl(@NonNull Context context) {
         mContext = Objects.requireNonNull(context);
         mContentResolver = Objects.requireNonNull(context.getContentResolver());
 
         PowerManager powerManager = context.getSystemService(PowerManager.class);
         mWakeLock = Objects.requireNonNull(
                 powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, TAG));
 
         mAlarmManager = Objects.requireNonNull(context.getSystemService(AlarmManager.class));
 
         mSystemClockUpdateThresholdMillis =
                 SystemProperties.getInt("ro.sys.time_detector_update_diff",
                         SYSTEM_CLOCK_UPDATE_THRESHOLD_MILLIS_DEFAULT);
+        mNitzTimeDetectionToggle =
+            mContext.getResources().getBoolean(
+                    com.android.internal.R.bool.config_nitzTimeUpdate);
     }
 
     @Override
     public int systemClockUpdateThresholdMillis() {
         return mSystemClockUpdateThresholdMillis;
     }
 
     @Override
     public boolean isAutoTimeDetectionEnabled() {
         try {
             return Settings.Global.getInt(mContentResolver, Settings.Global.AUTO_TIME) != 0;
         } catch (Settings.SettingNotFoundException snfe) {
             return true;
         }
     }
 
+    @Override
+    public boolean isNITZTimeDetectionEnabled() {
+        return mNitzTimeDetectionToggle;
+    }
+
     @Override
     public void acquireWakeLock() {
         if (mWakeLock.isHeld()) {
             Slog.wtf(TAG, "WakeLock " + mWakeLock + " already held");
         }
         mWakeLock.acquire();
     }
 
     @Override
     public long elapsedRealtimeMillis() {
diff --git a/services/core/java/com/android/server/timedetector/TimeDetectorStrategyImpl.java b/services/core/java/com/android/server/timedetector/TimeDetectorStrategyImpl.java
index 88de34027bb96884e25b0e8f210c65e067b39040..4d483f40c6925b78bad678892a4d9325f6d404d6 100644
--- a/services/core/java/com/android/server/timedetector/TimeDetectorStrategyImpl.java
+++ b/services/core/java/com/android/server/timedetector/TimeDetectorStrategyImpl.java
@@ -39,21 +39,21 @@ import java.lang.annotation.RetentionPolicy;
 
 /**
  * An implementation of {@link TimeDetectorStrategy} that passes telephony and manual suggestions to
  * {@link AlarmManager}. When there are multiple telephony sources, the one with the lowest ID is
  * used unless the data becomes too stale.
  *
  * <p>Most public methods are marked synchronized to ensure thread safety around internal state.
  */
 public final class TimeDetectorStrategyImpl implements TimeDetectorStrategy {
 
-    private static final boolean DBG = false;
+    private static final boolean DBG = true;
     private static final String LOG_TAG = "SimpleTimeDetectorStrategy";
 
     /** A score value used to indicate "no score", either due to validation failure or age. */
     private static final int TELEPHONY_INVALID_SCORE = -1;
     /** The number of buckets telephony suggestions can be put in by age. */
     private static final int TELEPHONY_BUCKET_COUNT = 24;
     /** Each bucket is this size. All buckets are equally sized. */
     @VisibleForTesting
     static final int TELEPHONY_BUCKET_SIZE_MILLIS = 60 * 60 * 1000;
     /**
@@ -134,21 +134,21 @@ public final class TimeDetectorStrategyImpl implements TimeDetectorStrategy {
         if (!validateSuggestionTime(newUtcTime, suggestion)) {
             return;
         }
 
         String cause = "Manual time suggestion received: suggestion=" + suggestion;
         setSystemClockIfRequired(ORIGIN_MANUAL, newUtcTime, cause);
     }
 
     @Override
     public synchronized void suggestNetworkTime(@NonNull NetworkTimeSuggestion timeSuggestion) {
-        if (!validateSuggestionTime(timeSuggestion.getUtcTime(), timeSuggestion)) {
+        if (timeSuggestion == null || !validateSuggestionTime(timeSuggestion.getUtcTime(), timeSuggestion)) {
             return;
         }
 
         // The caller submits suggestions with the best available information when there are network
         // changes. The best available information may have been cached and if they were all stored
         // this would lead to duplicates showing up in the suggestion history. The suggestions may
         // be made for different reasons but there is not a significant benefit to storing the same
         // suggestion information again. doAutoTimeDetection() should still be called: this ensures
         // the suggestion and device state are always re-evaluated, which might produce a different
         // detected time if, for example, the age of all suggestions are considered.
@@ -158,20 +158,25 @@ public final class TimeDetectorStrategyImpl implements TimeDetectorStrategy {
         }
 
         // Now perform auto time detection. The new suggestion may be used to modify the system
         // clock.
         String reason = "New network time suggested. timeSuggestion=" + timeSuggestion;
         doAutoTimeDetection(reason);
     }
 
     @Override
     public synchronized void suggestTelephonyTime(@NonNull TelephonyTimeSuggestion timeSuggestion) {
+        // is config_nitzUpdate is set to false, we disallow telephony time suggestions.
+        if (!mCallback.isNITZTimeDetectionEnabled()) {
+            return;
+        }
+
         // Empty time suggestion means that telephony network connectivity has been lost.
         // The passage of time is relentless, and we don't expect our users to use a time machine,
         // so we can continue relying on previous suggestions when we lose connectivity. This is
         // unlike time zone, where a user may lose connectivity when boarding a flight and where we
         // do want to "forget" old signals. Suggestions that are too old are discarded later in the
         // detection algorithm.
         if (timeSuggestion.getUtcTime() == null) {
             return;
         }
 
@@ -297,30 +302,31 @@ public final class TimeDetectorStrategyImpl implements TimeDetectorStrategy {
     @GuardedBy("this")
     private void doAutoTimeDetection(@NonNull String detectionReason) {
         if (!mCallback.isAutoTimeDetectionEnabled()) {
             // Avoid doing unnecessary work with this (race-prone) check.
             return;
         }
 
         // Android devices currently prioritize any telephony over network signals. There are
         // carrier compliance tests that would need to be changed before we could ignore NITZ or
         // prefer NTP generally. This check is cheap on devices without telephony hardware.
-        TelephonyTimeSuggestion bestTelephonySuggestion = findBestTelephonySuggestion();
-        if (bestTelephonySuggestion != null) {
-            final TimestampedValue<Long> newUtcTime = bestTelephonySuggestion.getUtcTime();
-            String cause = "Found good telephony suggestion."
-                    + ", bestTelephonySuggestion=" + bestTelephonySuggestion
-                    + ", detectionReason=" + detectionReason;
-            setSystemClockIfRequired(ORIGIN_TELEPHONY, newUtcTime, cause);
-            return;
+        if (mCallback.isNITZTimeDetectionEnabled()) {
+            TelephonyTimeSuggestion bestTelephonySuggestion = findBestTelephonySuggestion();
+            if (bestTelephonySuggestion != null) {
+                final TimestampedValue<Long> newUtcTime = bestTelephonySuggestion.getUtcTime();
+                String cause = "Found good telephony suggestion."
+                        + ", bestTelephonySuggestion=" + bestTelephonySuggestion
+                        + ", detectionReason=" + detectionReason;
+                setSystemClockIfRequired(ORIGIN_TELEPHONY, newUtcTime, cause);
+                return;
+            }
         }
-
         // There is no good telephony suggestion, try network.
         NetworkTimeSuggestion networkSuggestion = findLatestValidNetworkSuggestion();
         if (networkSuggestion != null) {
             final TimestampedValue<Long> newUtcTime = networkSuggestion.getUtcTime();
             String cause = "Found good network suggestion."
                     + ", networkSuggestion=" + networkSuggestion
                     + ", detectionReason=" + detectionReason;
             setSystemClockIfRequired(ORIGIN_NETWORK, newUtcTime, cause);
             return;
         }

commit d01ae418dfa6854ebfa93bfeb79d06226eccbb29
Author: Renlord <me@renlord.com>
Date:   Tue 2020-06-30 11:52:43+1000

    dont ping server when nitz time update is toggled off
---
 core/java/android/util/NtpTrustedTime.java | 9 +++++++++
 1 file changed, 9 insertions(+)

diff --git a/core/java/android/util/NtpTrustedTime.java b/core/java/android/util/NtpTrustedTime.java
index c1173b6cf9725de63aee2ccbbb3c82fb256a9f4e..5e424432c7f6613bc9a1371056786ac456da677c 100644
--- a/core/java/android/util/NtpTrustedTime.java
+++ b/core/java/android/util/NtpTrustedTime.java
@@ -133,20 +133,29 @@ public class NtpTrustedTime implements TrustedTime {
         if (sSingleton == null) {
             Context appContext = context.getApplicationContext();
             sSingleton = new NtpTrustedTime(appContext);
         }
         return sSingleton;
     }
 
     @UnsupportedAppUsage
     public boolean forceRefresh() {
         synchronized (this) {
+            final ContentResolver resolver = mContext.getContentResolver();
+
+            final boolean networkPollTime = Settings.Global.getInt(resolver,
+                    Settings.Global.AUTO_TIME, 1) != 0;
+            if (!networkPollTime) {
+                Log.d(TAG, "forceRefresh: nitzTimeUpdate disabled bailing early");
+                return false;
+            }
+
             NtpConnectionInfo connectionInfo = getNtpConnectionInfo();
             if (connectionInfo == null) {
                 // missing server config, so no trusted time available
                 if (LOGD) Log.d(TAG, "forceRefresh: invalid server config");
                 return false;
             }
 
             ConnectivityManager connectivityManager = mConnectivityManagerSupplier.get();
             if (connectivityManager == null) {
                 if (LOGD) Log.d(TAG, "forceRefresh: no ConnectivityManager");

commit 5865f5a734bbe635163c93c88943a787073bc7f0
Author: inthewaves <inthewaves@pm.me>
Date:   Sat 2020-09-12 12:28:34-0700

    support new special runtime permissions
    
    These are treated as a runtime permission even for legacy apps. They
    need to be granted by default for all apps to maintain compatibility.
    
    Ported from 10: 4d5d82f4e2fb9ff68158bf30f3944591bb74dd04
    
    Changes from 10:
    - It seems like parts of PackageManagerService#resetUserChangesToRuntimePermissionsAndFlagsLPw
    were refactored into PermissionManagerService#resetRuntimePermissionsInternal.
    As a result, PackageManagerService is no longer modified.
---
 .../pm/permission/PermissionManagerService.java    | 24 +++++++++++++++++-----
 1 file changed, 19 insertions(+), 5 deletions(-)

diff --git a/services/core/java/com/android/server/pm/permission/PermissionManagerService.java b/services/core/java/com/android/server/pm/permission/PermissionManagerService.java
index 8d2363b6e831cc9ed38343707bfbd61bdae8127a..26b9598790848f32211b43f4cfda728bc97c1454 100644
--- a/services/core/java/com/android/server/pm/permission/PermissionManagerService.java
+++ b/services/core/java/com/android/server/pm/permission/PermissionManagerService.java
@@ -1454,21 +1454,21 @@ public class PermissionManagerService extends IPermissionManager.Stub {
             throw new IllegalArgumentException("Unknown package: " + packageName);
         }
 
         bp.enforceDeclaredUsedAndRuntimeOrDevelopment(pkg, ps);
 
         // If a permission review is required for legacy apps we represent
         // their permissions as always granted runtime ones since we need
         // to keep the review required permission flag per user while an
         // install permission's state is shared across all users.
         if (pkg.getTargetSdkVersion() < Build.VERSION_CODES.M
-                && bp.isRuntime()) {
+                && bp.isRuntime() && !isSpecialRuntimePermission(permName)) {
             return;
         }
 
         final int uid = UserHandle.getUid(userId, UserHandle.getAppId(pkg.getUid()));
 
         final PermissionsState permissionsState = ps.getPermissionsState();
 
         final int flags = permissionsState.getPermissionFlags(permName, userId);
         if ((flags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
             Log.e(TAG, "Cannot grant system fixed permission "
@@ -1506,21 +1506,22 @@ public class PermissionManagerService extends IPermissionManager.Stub {
                 }
             }
             return;
         }
 
         if (ps.getInstantApp(userId) && !bp.isInstant()) {
             throw new SecurityException("Cannot grant non-ephemeral permission"
                     + permName + " for package " + packageName);
         }
 
-        if (pkg.getTargetSdkVersion() < Build.VERSION_CODES.M) {
+        if (pkg.getTargetSdkVersion() < Build.VERSION_CODES.M
+                && !isSpecialRuntimePermission(permName)) {
             Slog.w(TAG, "Cannot grant runtime permission to a legacy app");
             return;
         }
 
         final int result = permissionsState.grantRuntimePermission(bp, userId);
         switch (result) {
             case PERMISSION_OPERATION_FAILURE: {
                 return;
             }
 
@@ -1616,21 +1617,21 @@ public class PermissionManagerService extends IPermissionManager.Stub {
             throw new IllegalArgumentException("Unknown permission: " + permName);
         }
 
         bp.enforceDeclaredUsedAndRuntimeOrDevelopment(pkg, ps);
 
         // If a permission review is required for legacy apps we represent
         // their permissions as always granted runtime ones since we need
         // to keep the review required permission flag per user while an
         // install permission's state is shared across all users.
         if (pkg.getTargetSdkVersion() < Build.VERSION_CODES.M
-                && bp.isRuntime()) {
+                && bp.isRuntime() && !isSpecialRuntimePermission(bp.name)) {
             return;
         }
 
         final PermissionsState permissionsState = ps.getPermissionsState();
 
         final int flags = permissionsState.getPermissionFlags(permName, userId);
         // Only the system may revoke SYSTEM_FIXED permissions.
         if ((flags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0
                 && UserHandle.getCallingAppId() != Process.SYSTEM_UID) {
             throw new SecurityException("Non-System UID cannot revoke system fixed permission "
@@ -1840,21 +1841,22 @@ public class PermissionManagerService extends IPermissionManager.Stub {
                 continue;
             }
 
             // Never clobber system or policy.
             if ((oldFlags & policyOrSystemFlags) != 0) {
                 continue;
             }
 
             // If this permission was granted by default or role, make sure it is.
             if ((oldFlags & FLAG_PERMISSION_GRANTED_BY_DEFAULT) != 0
-                    || (oldFlags & FLAG_PERMISSION_GRANTED_BY_ROLE) != 0) {
+                    || (oldFlags & FLAG_PERMISSION_GRANTED_BY_ROLE) != 0
+                    || isSpecialRuntimePermission(bp.getName())) {
                 // PermissionPolicyService will handle the app op for runtime permissions later.
                 grantRuntimePermissionInternal(permName, packageName, false,
                         Process.SYSTEM_UID, userId, delayingPermCallback);
             // If permission review is enabled the permissions for a legacy apps
             // are represented as constantly granted runtime ones, so don't revoke.
             } else if ((flags & FLAG_PERMISSION_REVIEW_REQUIRED) == 0) {
                 // Otherwise, reset the permission.
                 revokeRuntimePermissionInternal(permName, packageName, false, Process.SYSTEM_UID,
                         userId, null, delayingPermCallback);
             }
@@ -2599,20 +2601,24 @@ public class PermissionManagerService extends IPermissionManager.Stub {
                         }
                     }
                 }
             }
             if (r != null) {
                 if (DEBUG_REMOVE) Log.d(TAG, "  Permissions: " + r);
             }
         }
     }
 
+    public static boolean isSpecialRuntimePermission(final String permission) {
+        return false;
+    }
+
     /**
      * Restore the permission state for a package.
      *
      * <ul>
      *     <li>During boot the state gets restored from the disk</li>
      *     <li>During app update the state gets restored from the last version of the app</li>
      * </ul>
      *
      * <p>This restores the permission state for all users.
      *
@@ -2945,20 +2951,28 @@ public class PermissionManagerService extends IPermissionManager.Stub {
                                     // Hard restricted permissions cannot be held.
                                     } else if (!permissionPolicyInitialized
                                             || (!hardRestricted || restrictionExempt)) {
                                         if (permState != null && permState.isGranted()) {
                                             if (permissionsState.grantRuntimePermission(bp, userId)
                                                     == PERMISSION_OPERATION_FAILURE) {
                                                 wasChanged = true;
                                             }
                                         }
                                     }
+
+                                    if (isSpecialRuntimePermission(bp.name) &&
+                                            origPermissions.getRuntimePermissionState(bp.name, userId) == null) {
+                                        if (permissionsState.grantRuntimePermission(bp, userId)
+                                                != PERMISSION_OPERATION_FAILURE) {
+                                            wasChanged = true;
+                                        }
+                                    }
                                 } else {
                                     if (permState == null) {
                                         // New permission
                                         if (PLATFORM_PACKAGE_NAME.equals(
                                                 bp.getSourcePackageName())) {
                                             if (!bp.isRemoved()) {
                                                 flags |= FLAG_PERMISSION_REVIEW_REQUIRED
                                                         | FLAG_PERMISSION_REVOKED_COMPAT;
                                                 wasChanged = true;
                                             }
@@ -3900,21 +3914,21 @@ public class PermissionManagerService extends IPermissionManager.Stub {
             final BasePermission bp;
             synchronized (mLock) {
                 bp = mSettings.getPermissionLocked(permission);
             }
             if (bp != null && (bp.isRuntime() || bp.isDevelopment())
                     && (!instantApp || bp.isInstant())
                     && (supportsRuntimePermissions || !bp.isRuntimeOnly())
                     && (grantedPermissions == null
                            || ArrayUtils.contains(grantedPermissions, permission))) {
                 final int flags = permissionsState.getPermissionFlags(permission, userId);
-                if (supportsRuntimePermissions) {
+                if (supportsRuntimePermissions || isSpecialRuntimePermission(bp.name)) {
                     // Installer cannot change immutable permissions.
                     if ((flags & immutableFlags) == 0) {
                         grantRuntimePermissionInternal(permission, pkg.getPackageName(), false,
                                 callingUid, userId, callback);
                     }
                 } else {
                     // In permission review mode we clear the review flag and the revoked compat
                     // flag when we are asked to install the app with all permissions granted.
                     if ((flags & compatFlags) != 0) {
                         updatePermissionFlagsInternal(permission, pkg.getPackageName(), compatFlags,

commit eeff466744c77cfb5e7050894c60f3b670181321
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Sun 2019-03-17 11:59:15-0400

    make INTERNET into a special runtime permission
    
    Ported from 10: 5e2898e9d21dd6802bb0b0139e7e496c41e1cd80
---
 core/res/AndroidManifest.xml                                            | 2 +-
 .../java/com/android/server/pm/permission/PermissionManagerService.java | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/core/res/AndroidManifest.xml b/core/res/AndroidManifest.xml
index b5fe21d81fd8f3081c0c43d9da6709d888838e54..ea4fe2d4469463aa35792d43e53d3a14c9af01a6 100644
--- a/core/res/AndroidManifest.xml
+++ b/core/res/AndroidManifest.xml
@@ -1588,21 +1588,21 @@
     <!-- Permissions for accessing networks -->
     <!-- ======================================= -->
     <eat-comment />
 
     <!-- Allows applications to open network sockets.
          <p>Protection level: normal
     -->
     <permission android:name="android.permission.INTERNET"
         android:description="@string/permdesc_createNetworkSockets"
         android:label="@string/permlab_createNetworkSockets"
-        android:protectionLevel="normal|instant" />
+        android:protectionLevel="dangerous|instant" />
 
     <!-- Allows applications to access information about networks.
          <p>Protection level: normal
     -->
     <permission android:name="android.permission.ACCESS_NETWORK_STATE"
         android:description="@string/permdesc_accessNetworkState"
         android:label="@string/permlab_accessNetworkState"
         android:protectionLevel="normal|instant" />
 
     <!-- Allows applications to access information about Wi-Fi networks.
diff --git a/services/core/java/com/android/server/pm/permission/PermissionManagerService.java b/services/core/java/com/android/server/pm/permission/PermissionManagerService.java
index 26b9598790848f32211b43f4cfda728bc97c1454..9e6ecc739ffe6b4f23149d311fa583d94e3c064a 100644
--- a/services/core/java/com/android/server/pm/permission/PermissionManagerService.java
+++ b/services/core/java/com/android/server/pm/permission/PermissionManagerService.java
@@ -2602,21 +2602,21 @@ public class PermissionManagerService extends IPermissionManager.Stub {
                     }
                 }
             }
             if (r != null) {
                 if (DEBUG_REMOVE) Log.d(TAG, "  Permissions: " + r);
             }
         }
     }
 
     public static boolean isSpecialRuntimePermission(final String permission) {
-        return false;
+        return Manifest.permission.INTERNET.equals(permission);
     }
 
     /**
      * Restore the permission state for a package.
      *
      * <ul>
      *     <li>During boot the state gets restored from the disk</li>
      *     <li>During app update the state gets restored from the last version of the app</li>
      * </ul>
      *

commit ea2043da6410d9b8c50cfdf7eb0daf19ec6ee535
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Fri 2017-07-21 11:23:07-0400

    add a NETWORK permission group for INTERNET
    
    Ported from 10: b5c9f9407d5f5407686ea8c02fa67573ddc07824
    
    Changes from 10:
    - Needed to run `m api-stubs-docs-non-updatable-update-current-api`
    to fix the "You have tried to change the API from what has been
    previously approved" errors.
---
 api/current.txt                 | 1 +
 core/res/AndroidManifest.xml    | 8 ++++++++
 core/res/res/values/strings.xml | 5 +++++
 non-updatable-api/current.txt   | 1 +
 4 files changed, 15 insertions(+)

diff --git a/api/current.txt b/api/current.txt
index 952ccdad992c74836a95e402ca88c77a64d87aad..728c0e95ca6d43fde4afa0ac00d4cf6b542021fb 100644
--- a/api/current.txt
+++ b/api/current.txt
@@ -177,20 +177,21 @@ package android {
 
   public static final class Manifest.permission_group {
     ctor public Manifest.permission_group();
     field public static final String ACTIVITY_RECOGNITION = "android.permission-group.ACTIVITY_RECOGNITION";
     field public static final String CALENDAR = "android.permission-group.CALENDAR";
     field public static final String CALL_LOG = "android.permission-group.CALL_LOG";
     field public static final String CAMERA = "android.permission-group.CAMERA";
     field public static final String CONTACTS = "android.permission-group.CONTACTS";
     field public static final String LOCATION = "android.permission-group.LOCATION";
     field public static final String MICROPHONE = "android.permission-group.MICROPHONE";
+    field public static final String NETWORK = "android.permission-group.NETWORK";
     field public static final String PHONE = "android.permission-group.PHONE";
     field public static final String SENSORS = "android.permission-group.SENSORS";
     field public static final String SMS = "android.permission-group.SMS";
     field public static final String STORAGE = "android.permission-group.STORAGE";
   }
 
   public final class R {
     ctor public R();
   }
 
diff --git a/core/res/AndroidManifest.xml b/core/res/AndroidManifest.xml
index ea4fe2d4469463aa35792d43e53d3a14c9af01a6..514428efe1aab797ab52354175a522b4fa2577dc 100644
--- a/core/res/AndroidManifest.xml
+++ b/core/res/AndroidManifest.xml
@@ -1582,24 +1582,32 @@
          @hide
     -->
     <permission android:name="android.permission.ACCESS_MOCK_LOCATION"
         android:protectionLevel="signature" />
 
     <!-- ======================================= -->
     <!-- Permissions for accessing networks -->
     <!-- ======================================= -->
     <eat-comment />
 
+    <!-- Network access -->
+    <permission-group android:name="android.permission-group.NETWORK"
+        android:icon="@drawable/perm_group_network"
+        android:label="@string/permgrouplab_network"
+        android:description="@string/permgroupdesc_network"
+        android:priority="900" />
+
     <!-- Allows applications to open network sockets.
          <p>Protection level: normal
     -->
     <permission android:name="android.permission.INTERNET"
+        android:permissionGroup="android.permission-group.UNDEFINED"
         android:description="@string/permdesc_createNetworkSockets"
         android:label="@string/permlab_createNetworkSockets"
         android:protectionLevel="dangerous|instant" />
 
     <!-- Allows applications to access information about networks.
          <p>Protection level: normal
     -->
     <permission android:name="android.permission.ACCESS_NETWORK_STATE"
         android:description="@string/permdesc_accessNetworkState"
         android:label="@string/permlab_accessNetworkState"
diff --git a/core/res/res/values/strings.xml b/core/res/res/values/strings.xml
index 6d79ff7186a64c52f28221dc404f0ca67a6b6ab8..43b21f267b2d14972b0f7f63a78199960d67b100 100644
--- a/core/res/res/values/strings.xml
+++ b/core/res/res/values/strings.xml
@@ -797,20 +797,25 @@
     <string name="permgrouplab_phone">Phone</string>
     <!-- Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. -->
     <string name="permgroupdesc_phone">make and manage phone calls</string>
     <!-- Message shown to the user when the apps requests permission from this group. If ever possible this should stay below 80 characters (assuming the parameters takes 20 characters). Don't abbreviate until the message reaches 120 characters though. [CHAR LIMIT=120] -->
 
     <!-- Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. -->
     <string name="permgrouplab_sensors">Body sensors</string>
     <!-- Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. -->
     <string name="permgroupdesc_sensors">access sensor data about your vital signs</string>
 
+    <!-- Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. -->
+    <string name="permgrouplab_network">Network</string>
+    <!-- Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. -->
+    <string name="permgroupdesc_network">access the network</string>
+
     <!-- Title for the capability of an accessibility service to retrieve window content. -->
     <string name="capability_title_canRetrieveWindowContent">Retrieve window content</string>
     <!-- Description for the capability of an accessibility service to retrieve window content. -->
     <string name="capability_desc_canRetrieveWindowContent">Inspect the content of a window you\'re
         interacting with.</string>
 
     <!-- Title for the capability of an accessibility service to request touch exploration. -->
     <string name="capability_title_canRequestTouchExploration">Turn on Explore by Touch</string>
     <!-- Description for the capability of an accessibility service to request touch exploration. -->
     <string name="capability_desc_canRequestTouchExploration">Tapped items will be spoken aloud
diff --git a/non-updatable-api/current.txt b/non-updatable-api/current.txt
index 5f15216e8400a5cbd622dbb7943ef676e8ea2ff5..189544f98594ce96cd91a42c685a6b61cd6c9c77 100644
--- a/non-updatable-api/current.txt
+++ b/non-updatable-api/current.txt
@@ -177,20 +177,21 @@ package android {
 
   public static final class Manifest.permission_group {
     ctor public Manifest.permission_group();
     field public static final String ACTIVITY_RECOGNITION = "android.permission-group.ACTIVITY_RECOGNITION";
     field public static final String CALENDAR = "android.permission-group.CALENDAR";
     field public static final String CALL_LOG = "android.permission-group.CALL_LOG";
     field public static final String CAMERA = "android.permission-group.CAMERA";
     field public static final String CONTACTS = "android.permission-group.CONTACTS";
     field public static final String LOCATION = "android.permission-group.LOCATION";
     field public static final String MICROPHONE = "android.permission-group.MICROPHONE";
+    field public static final String NETWORK = "android.permission-group.NETWORK";
     field public static final String PHONE = "android.permission-group.PHONE";
     field public static final String SENSORS = "android.permission-group.SENSORS";
     field public static final String SMS = "android.permission-group.SMS";
     field public static final String STORAGE = "android.permission-group.STORAGE";
   }
 
   public final class R {
     ctor public R();
   }
 

commit 1449befae0d0b9d79a44012d24adf199ec75b517
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Sat 2017-10-07 15:54:42-0400

    add special runtime permission for other sensors
    
    This covers sensors not included in the existing runtime permission for
    body sensors.
    
    Ported from 10: 9ec9f7f521323552fa658b46862c8408f1a7b41b
    
    Changes from 10:
    - Needed to run `m api-stubs-docs-non-updatable-update-current-api`
    to fix the "You have tried to change the API from what has been
    previously approved" errors.
---
 api/current.txt                                              |  2 ++
 core/java/android/content/pm/PackageParser.java              |  2 ++
 core/res/AndroidManifest.xml                                 | 12 ++++++++++++
 core/res/res/values/strings.xml                              | 12 ++++++++++++
 non-updatable-api/current.txt                                |  2 ++
 .../server/pm/permission/PermissionManagerService.java       |  2 +-
 6 files changed, 31 insertions(+), 1 deletion(-)

diff --git a/api/current.txt b/api/current.txt
index 728c0e95ca6d43fde4afa0ac00d4cf6b542021fb..4ab72254811f9185958fb7ad6e8e97e7828d92f9 100644
--- a/api/current.txt
+++ b/api/current.txt
@@ -99,20 +99,21 @@ package android {
     field public static final String MANAGE_OWN_CALLS = "android.permission.MANAGE_OWN_CALLS";
     field public static final String MASTER_CLEAR = "android.permission.MASTER_CLEAR";
     field public static final String MEDIA_CONTENT_CONTROL = "android.permission.MEDIA_CONTENT_CONTROL";
     field public static final String MODIFY_AUDIO_SETTINGS = "android.permission.MODIFY_AUDIO_SETTINGS";
     field public static final String MODIFY_PHONE_STATE = "android.permission.MODIFY_PHONE_STATE";
     field public static final String MOUNT_FORMAT_FILESYSTEMS = "android.permission.MOUNT_FORMAT_FILESYSTEMS";
     field public static final String MOUNT_UNMOUNT_FILESYSTEMS = "android.permission.MOUNT_UNMOUNT_FILESYSTEMS";
     field public static final String NFC = "android.permission.NFC";
     field public static final String NFC_PREFERRED_PAYMENT_INFO = "android.permission.NFC_PREFERRED_PAYMENT_INFO";
     field public static final String NFC_TRANSACTION_EVENT = "android.permission.NFC_TRANSACTION_EVENT";
+    field public static final String OTHER_SENSORS = "android.permission.OTHER_SENSORS";
     field public static final String PACKAGE_USAGE_STATS = "android.permission.PACKAGE_USAGE_STATS";
     field @Deprecated public static final String PERSISTENT_ACTIVITY = "android.permission.PERSISTENT_ACTIVITY";
     field @Deprecated public static final String PROCESS_OUTGOING_CALLS = "android.permission.PROCESS_OUTGOING_CALLS";
     field public static final String QUERY_ALL_PACKAGES = "android.permission.QUERY_ALL_PACKAGES";
     field public static final String READ_CALENDAR = "android.permission.READ_CALENDAR";
     field public static final String READ_CALL_LOG = "android.permission.READ_CALL_LOG";
     field public static final String READ_CONTACTS = "android.permission.READ_CONTACTS";
     field public static final String READ_EXTERNAL_STORAGE = "android.permission.READ_EXTERNAL_STORAGE";
     field @Deprecated public static final String READ_INPUT_STATE = "android.permission.READ_INPUT_STATE";
     field public static final String READ_LOGS = "android.permission.READ_LOGS";
@@ -178,20 +179,21 @@ package android {
   public static final class Manifest.permission_group {
     ctor public Manifest.permission_group();
     field public static final String ACTIVITY_RECOGNITION = "android.permission-group.ACTIVITY_RECOGNITION";
     field public static final String CALENDAR = "android.permission-group.CALENDAR";
     field public static final String CALL_LOG = "android.permission-group.CALL_LOG";
     field public static final String CAMERA = "android.permission-group.CAMERA";
     field public static final String CONTACTS = "android.permission-group.CONTACTS";
     field public static final String LOCATION = "android.permission-group.LOCATION";
     field public static final String MICROPHONE = "android.permission-group.MICROPHONE";
     field public static final String NETWORK = "android.permission-group.NETWORK";
+    field public static final String OTHER_SENSORS = "android.permission-group.OTHER_SENSORS";
     field public static final String PHONE = "android.permission-group.PHONE";
     field public static final String SENSORS = "android.permission-group.SENSORS";
     field public static final String SMS = "android.permission-group.SMS";
     field public static final String STORAGE = "android.permission-group.STORAGE";
   }
 
   public final class R {
     ctor public R();
   }
 
diff --git a/core/java/android/content/pm/PackageParser.java b/core/java/android/content/pm/PackageParser.java
index 70e4e6cbf622eb6bb145c2183ed5ced8b10da55d..736f50f458ef8375ff300b3dfd6c8d8e1e00229e 100644
--- a/core/java/android/content/pm/PackageParser.java
+++ b/core/java/android/content/pm/PackageParser.java
@@ -271,20 +271,22 @@ public class PackageParser {
      * NOTE: These must be declared in SDK version order, with permissions
      * added to older SDKs appearing before those added to newer SDKs.
      * If sdkVersion is 0, then this is not a permission that we want to
      * automatically add to older apps, but we do want to allow it to be
      * granted during a platform update.
      * @hide
      */
     @UnsupportedAppUsage
     public static final PackageParser.NewPermissionInfo NEW_PERMISSIONS[] =
         new PackageParser.NewPermissionInfo[] {
+            new PackageParser.NewPermissionInfo(android.Manifest.permission.OTHER_SENSORS,
+                    android.os.Build.VERSION_CODES.CUR_DEVELOPMENT + 1, 0),
             new PackageParser.NewPermissionInfo(android.Manifest.permission.WRITE_EXTERNAL_STORAGE,
                     android.os.Build.VERSION_CODES.DONUT, 0),
             new PackageParser.NewPermissionInfo(android.Manifest.permission.READ_PHONE_STATE,
                     android.os.Build.VERSION_CODES.DONUT, 0)
     };
 
     /**
      * @deprecated callers should move to explicitly passing around source path.
      */
     @Deprecated
diff --git a/core/res/AndroidManifest.xml b/core/res/AndroidManifest.xml
index 514428efe1aab797ab52354175a522b4fa2577dc..d096c6409a10aa672681416e5f87276520022e56 100644
--- a/core/res/AndroidManifest.xml
+++ b/core/res/AndroidManifest.xml
@@ -1372,20 +1372,32 @@
 
     <!-- Allows an app to use device supported biometric modalities.
          <p>Protection level: normal
     -->
     <permission android:name="android.permission.USE_BIOMETRIC"
         android:permissionGroup="android.permission-group.SENSORS"
         android:label="@string/permlab_useBiometric"
         android:description="@string/permdesc_useBiometric"
         android:protectionLevel="normal" />
 
+    <permission-group android:name="android.permission-group.OTHER_SENSORS"
+        android:icon="@drawable/perm_group_location"
+        android:label="@string/permgrouplab_otherSensors"
+        android:description="@string/permgroupdesc_otherSensors"
+        android:priority="1000" />
+
+    <permission android:name="android.permission.OTHER_SENSORS"
+        android:permissionGroup="android.permission-group.UNDEFINED"
+        android:label="@string/permlab_otherSensors"
+        android:description="@string/permdesc_otherSensors"
+        android:protectionLevel="dangerous" />
+
     <!-- ====================================================================== -->
     <!-- REMOVED PERMISSIONS                                                    -->
     <!-- ====================================================================== -->
 
     <!-- @hide We need to keep this around for backwards compatibility -->
     <permission android:name="android.permission.READ_PROFILE"
         android:protectionLevel="normal"
         android:permissionFlags="removed"/>
 
     <!-- @hide We need to keep this around for backwards compatibility -->
diff --git a/core/res/res/values/strings.xml b/core/res/res/values/strings.xml
index 43b21f267b2d14972b0f7f63a78199960d67b100..9437c60b4217f6d018c792dd9cabe803749a8829 100644
--- a/core/res/res/values/strings.xml
+++ b/core/res/res/values/strings.xml
@@ -797,20 +797,25 @@
     <string name="permgrouplab_phone">Phone</string>
     <!-- Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. -->
     <string name="permgroupdesc_phone">make and manage phone calls</string>
     <!-- Message shown to the user when the apps requests permission from this group. If ever possible this should stay below 80 characters (assuming the parameters takes 20 characters). Don't abbreviate until the message reaches 120 characters though. [CHAR LIMIT=120] -->
 
     <!-- Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. -->
     <string name="permgrouplab_sensors">Body sensors</string>
     <!-- Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. -->
     <string name="permgroupdesc_sensors">access sensor data about your vital signs</string>
 
+    <!-- Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. -->
+    <string name="permgrouplab_otherSensors">Sensors</string>
+    <!-- Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. -->
+    <string name="permgroupdesc_otherSensors">access sensor data about orientation, movement, etc.</string>
+
     <!-- Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. -->
     <string name="permgrouplab_network">Network</string>
     <!-- Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. -->
     <string name="permgroupdesc_network">access the network</string>
 
     <!-- Title for the capability of an accessibility service to retrieve window content. -->
     <string name="capability_title_canRetrieveWindowContent">Retrieve window content</string>
     <!-- Description for the capability of an accessibility service to retrieve window content. -->
     <string name="capability_desc_canRetrieveWindowContent">Inspect the content of a window you\'re
         interacting with.</string>
@@ -1111,20 +1116,27 @@
     <string name="permdesc_writeCallLog" product="default">Allows the app to modify your phone\'s call log, including data about incoming and outgoing calls.
         Malicious apps may use this to erase or modify your call log.</string>
 
     <!-- Title of the body sensors permission, listed so the user can decide whether to allow the application to access body sensor data. [CHAR LIMIT=80] -->
     <string name="permlab_bodySensors">access body sensors (like heart rate monitors)
     </string>
     <!-- Description of the body sensors permission, listed so the user can decide whether to allow the application to access data from body sensors. [CHAR LIMIT=NONE] -->
     <string name="permdesc_bodySensors" product="default">Allows the app to access data from sensors
     that monitor your physical condition, such as your heart rate.</string>
 
+    <!-- Title of the sensors permission, listed so the user can decide whether to allow the application to access sensor data. [CHAR LIMIT=80] -->
+    <string name="permlab_otherSensors">access sensors (like the compass)
+    </string>
+    <!-- Description of the sensors permission, listed so the user can decide whether to allow the application to access data from sensors. [CHAR LIMIT=NONE] -->
+    <string name="permdesc_otherSensors" product="default">Allows the app to access data from sensors
+    monitoring orientation, movement, vibration (including low frequency sound) and environmental data</string>
+
     <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
     <string name="permlab_readCalendar">Read calendar events and details</string>
     <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
     <string name="permdesc_readCalendar" product="tablet">This app can read all calendar events stored on your tablet and share or save your calendar data.</string>
     <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
     <string name="permdesc_readCalendar" product="tv">This app can read all calendar events stored on your Android TV device and share or save your calendar data.</string>
     <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
     <string name="permdesc_readCalendar" product="default">This app can read all calendar events stored on your phone and share or save your calendar data.</string>
 
     <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
diff --git a/non-updatable-api/current.txt b/non-updatable-api/current.txt
index 189544f98594ce96cd91a42c685a6b61cd6c9c77..9badc8c4d9c03496d12cc77ed4972e39a4c0215c 100644
--- a/non-updatable-api/current.txt
+++ b/non-updatable-api/current.txt
@@ -99,20 +99,21 @@ package android {
     field public static final String MANAGE_OWN_CALLS = "android.permission.MANAGE_OWN_CALLS";
     field public static final String MASTER_CLEAR = "android.permission.MASTER_CLEAR";
     field public static final String MEDIA_CONTENT_CONTROL = "android.permission.MEDIA_CONTENT_CONTROL";
     field public static final String MODIFY_AUDIO_SETTINGS = "android.permission.MODIFY_AUDIO_SETTINGS";
     field public static final String MODIFY_PHONE_STATE = "android.permission.MODIFY_PHONE_STATE";
     field public static final String MOUNT_FORMAT_FILESYSTEMS = "android.permission.MOUNT_FORMAT_FILESYSTEMS";
     field public static final String MOUNT_UNMOUNT_FILESYSTEMS = "android.permission.MOUNT_UNMOUNT_FILESYSTEMS";
     field public static final String NFC = "android.permission.NFC";
     field public static final String NFC_PREFERRED_PAYMENT_INFO = "android.permission.NFC_PREFERRED_PAYMENT_INFO";
     field public static final String NFC_TRANSACTION_EVENT = "android.permission.NFC_TRANSACTION_EVENT";
+    field public static final String OTHER_SENSORS = "android.permission.OTHER_SENSORS";
     field public static final String PACKAGE_USAGE_STATS = "android.permission.PACKAGE_USAGE_STATS";
     field @Deprecated public static final String PERSISTENT_ACTIVITY = "android.permission.PERSISTENT_ACTIVITY";
     field @Deprecated public static final String PROCESS_OUTGOING_CALLS = "android.permission.PROCESS_OUTGOING_CALLS";
     field public static final String QUERY_ALL_PACKAGES = "android.permission.QUERY_ALL_PACKAGES";
     field public static final String READ_CALENDAR = "android.permission.READ_CALENDAR";
     field public static final String READ_CALL_LOG = "android.permission.READ_CALL_LOG";
     field public static final String READ_CONTACTS = "android.permission.READ_CONTACTS";
     field public static final String READ_EXTERNAL_STORAGE = "android.permission.READ_EXTERNAL_STORAGE";
     field @Deprecated public static final String READ_INPUT_STATE = "android.permission.READ_INPUT_STATE";
     field public static final String READ_LOGS = "android.permission.READ_LOGS";
@@ -178,20 +179,21 @@ package android {
   public static final class Manifest.permission_group {
     ctor public Manifest.permission_group();
     field public static final String ACTIVITY_RECOGNITION = "android.permission-group.ACTIVITY_RECOGNITION";
     field public static final String CALENDAR = "android.permission-group.CALENDAR";
     field public static final String CALL_LOG = "android.permission-group.CALL_LOG";
     field public static final String CAMERA = "android.permission-group.CAMERA";
     field public static final String CONTACTS = "android.permission-group.CONTACTS";
     field public static final String LOCATION = "android.permission-group.LOCATION";
     field public static final String MICROPHONE = "android.permission-group.MICROPHONE";
     field public static final String NETWORK = "android.permission-group.NETWORK";
+    field public static final String OTHER_SENSORS = "android.permission-group.OTHER_SENSORS";
     field public static final String PHONE = "android.permission-group.PHONE";
     field public static final String SENSORS = "android.permission-group.SENSORS";
     field public static final String SMS = "android.permission-group.SMS";
     field public static final String STORAGE = "android.permission-group.STORAGE";
   }
 
   public final class R {
     ctor public R();
   }
 
diff --git a/services/core/java/com/android/server/pm/permission/PermissionManagerService.java b/services/core/java/com/android/server/pm/permission/PermissionManagerService.java
index 9e6ecc739ffe6b4f23149d311fa583d94e3c064a..c744a0b5079ae60a6232efd9d0b13fde197865d1 100644
--- a/services/core/java/com/android/server/pm/permission/PermissionManagerService.java
+++ b/services/core/java/com/android/server/pm/permission/PermissionManagerService.java
@@ -2602,21 +2602,21 @@ public class PermissionManagerService extends IPermissionManager.Stub {
                     }
                 }
             }
             if (r != null) {
                 if (DEBUG_REMOVE) Log.d(TAG, "  Permissions: " + r);
             }
         }
     }
 
     public static boolean isSpecialRuntimePermission(final String permission) {
-        return Manifest.permission.INTERNET.equals(permission);
+        return Manifest.permission.INTERNET.equals(permission) || Manifest.permission.OTHER_SENSORS.equals(permission);
     }
 
     /**
      * Restore the permission state for a package.
      *
      * <ul>
      *     <li>During boot the state gets restored from the disk</li>
      *     <li>During app update the state gets restored from the last version of the app</li>
      * </ul>
      *

commit e5713289f6534cc98f6129a8f57d959fe3801153
Author: Zoraver Kang <zkang@wpi.edu>
Date:   Mon 2019-09-16 16:41:30-0400

    Enforce INTERNET as a runtime permission.
    
    Ported from 10: 69f726bc4219a7acea0319ae8d4b5fda48cd9861
---
 .../server/connectivity/PermissionMonitor.java     | 59 ++++++++++++++--------
 1 file changed, 39 insertions(+), 20 deletions(-)

diff --git a/services/core/java/com/android/server/connectivity/PermissionMonitor.java b/services/core/java/com/android/server/connectivity/PermissionMonitor.java
index f0b7150dd84ff31699afc655012a3ef130a63df4..41c013b4b197f8ee2fdbbc3aa052f53b12427dd4 100644
--- a/services/core/java/com/android/server/connectivity/PermissionMonitor.java
+++ b/services/core/java/com/android/server/connectivity/PermissionMonitor.java
@@ -22,20 +22,21 @@ import static android.Manifest.permission.INTERNET;
 import static android.Manifest.permission.NETWORK_STACK;
 import static android.Manifest.permission.UPDATE_DEVICE_STATS;
 import static android.content.pm.PackageInfo.REQUESTED_PERMISSION_GRANTED;
 import static android.content.pm.PackageManager.GET_PERMISSIONS;
 import static android.content.pm.PackageManager.MATCH_ANY_USER;
 import static android.net.NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK;
 import static android.os.Process.INVALID_UID;
 import static android.os.Process.SYSTEM_UID;
 
 import android.annotation.NonNull;
+import android.annotation.UserIdInt;
 import android.content.Context;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageInfo;
 import android.content.pm.PackageManager;
 import android.content.pm.PackageManager.NameNotFoundException;
 import android.content.pm.PackageManagerInternal;
 import android.content.pm.UserInfo;
 import android.net.INetd;
 import android.net.UidRange;
 import android.os.Build;
@@ -48,20 +49,21 @@ import android.util.ArraySet;
 import android.util.Log;
 import android.util.SparseArray;
 import android.util.SparseIntArray;
 
 import com.android.internal.annotations.GuardedBy;
 import com.android.internal.annotations.VisibleForTesting;
 import com.android.internal.util.ArrayUtils;
 import com.android.internal.util.IndentingPrintWriter;
 import com.android.server.LocalServices;
 import com.android.server.SystemConfig;
+import com.android.server.pm.permission.PermissionManagerServiceInternal;
 
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Set;
 
@@ -73,20 +75,21 @@ import java.util.Set;
  * @hide
  */
 public class PermissionMonitor {
     private static final String TAG = "PermissionMonitor";
     private static final boolean DBG = true;
     protected static final Boolean SYSTEM = Boolean.TRUE;
     protected static final Boolean NETWORK = Boolean.FALSE;
     private static final int VERSION_Q = Build.VERSION_CODES.Q;
 
     private final PackageManager mPackageManager;
+    private final PackageManagerInternal mPackageManagerInternal;
     private final UserManager mUserManager;
     private final INetd mNetd;
 
     // Values are User IDs.
     @GuardedBy("this")
     private final Set<Integer> mUsers = new HashSet<>();
 
     // Keys are app uids. Values are true for SYSTEM permission and false for NETWORK permission.
     @GuardedBy("this")
     private final Map<Integer, Boolean> mApps = new HashMap<>();
@@ -97,60 +100,76 @@ public class PermissionMonitor {
     private final Map<String, Set<UidRange>> mVpnUidRanges = new HashMap<>();
 
     // A set of appIds for apps across all users on the device. We track appIds instead of uids
     // directly to reduce its size and also eliminate the need to update this set when user is
     // added/removed.
     @GuardedBy("this")
     private final Set<Integer> mAllApps = new HashSet<>();
 
     private class PackageListObserver implements PackageManagerInternal.PackageListObserver {
 
-        private int getPermissionForUid(int uid) {
-            int permission = 0;
-            // Check all the packages for this UID. The UID has the permission if any of the
-            // packages in it has the permission.
-            String[] packages = mPackageManager.getPackagesForUid(uid);
-            if (packages != null && packages.length > 0) {
-                for (String name : packages) {
-                    final PackageInfo app = getPackageInfo(name);
-                    if (app != null && app.requestedPermissions != null) {
-                        permission |= getNetdPermissionMask(app.requestedPermissions,
-                              app.requestedPermissionsFlags);
-                    }
-                }
-            } else {
-                // The last package of this uid is removed from device. Clean the package up.
-                permission = INetd.PERMISSION_UNINSTALLED;
-            }
-            return permission;
-        }
-
         @Override
         public void onPackageAdded(String packageName, int uid) {
             sendPackagePermissionsForUid(uid, getPermissionForUid(uid));
         }
 
         @Override
         public void onPackageChanged(@NonNull String packageName, int uid) {
             sendPackagePermissionsForUid(uid, getPermissionForUid(uid));
         }
 
         @Override
         public void onPackageRemoved(String packageName, int uid) {
             sendPackagePermissionsForUid(uid, getPermissionForUid(uid));
         }
     }
 
+    private int getPermissionForUid(int uid) {
+        int permission = 0;
+        // Check all the packages for this UID. The UID has the permission if any of the
+        // packages in it has the permission.
+        String[] packages = mPackageManager.getPackagesForUid(uid);
+        if (packages != null && packages.length > 0) {
+            for (String name : packages) {
+                final PackageInfo app = getPackageInfo(name);
+                if (app != null && app.requestedPermissions != null) {
+                    permission |= getNetdPermissionMask(app.requestedPermissions,
+                          app.requestedPermissionsFlags);
+                }
+            }
+        } else {
+            // The last package of this uid is removed from device. Clean the package up.
+            permission = INetd.PERMISSION_UNINSTALLED;
+        }
+        return permission;
+    }
+
+    // implements OnRuntimePermissionStateChangedListener
+    private void enforceINTERNETAsRuntimePermission(@NonNull String packageName,
+            @UserIdInt int userId) {
+        // userId is _not_ uid
+        int uid = mPackageManagerInternal.getPackageUid(packageName, 0, userId);
+        sendPackagePermissionsForUid(uid, getPermissionForUid(uid));
+    }
+
     public PermissionMonitor(Context context, INetd netd) {
         mPackageManager = context.getPackageManager();
         mUserManager = (UserManager) context.getSystemService(Context.USER_SERVICE);
         mNetd = netd;
+
+        mPackageManagerInternal = LocalServices.getService(
+                PackageManagerInternal.class);
+
+        final PermissionManagerServiceInternal permManagerInternal = LocalServices.getService(
+                PermissionManagerServiceInternal.class);
+        permManagerInternal.addOnRuntimePermissionStateChangedListener(
+                this::enforceINTERNETAsRuntimePermission);
     }
 
     // Intended to be called only once at startup, after the system is ready. Installs a broadcast
     // receiver to monitor ongoing UID changes, so this shouldn't/needn't be called again.
     public synchronized void startMonitoring() {
         log("Monitoring");
 
         PackageManagerInternal pmi = LocalServices.getService(PackageManagerInternal.class);
         if (pmi != null) {
             pmi.getPackageList(new PackageListObserver());

commit be30686e2b5704a1dee22c253bf90cfb61e9287f
Author: Renlord <me@renlord.com>
Date:   Fri 2019-12-13 22:44:39+1100

    add option of always randomizing MAC addresses
---
 api/system-current.txt                            |  1 +
 wifi/api/system-current.txt                       |  1 +
 wifi/java/android/net/wifi/WifiConfiguration.java | 15 +++++++++++----
 3 files changed, 13 insertions(+), 4 deletions(-)

diff --git a/api/system-current.txt b/api/system-current.txt
index f07ebaf19cb693c9da8de8c0732e95e67495c87d..21dbbbc244a69f394ac2b82759c48dd633f2253f 100755
--- a/api/system-current.txt
+++ b/api/system-current.txt
@@ -7110,20 +7110,21 @@ package android.net.wifi {
     method @Deprecated public boolean hasNoInternetAccess();
     method @Deprecated public boolean isEphemeral();
     method @Deprecated public static boolean isMetered(@Nullable android.net.wifi.WifiConfiguration, @Nullable android.net.wifi.WifiInfo);
     method @Deprecated public boolean isNoInternetAccessExpected();
     method @Deprecated public void setIpConfiguration(@Nullable android.net.IpConfiguration);
     method @Deprecated public void setNetworkSelectionStatus(@NonNull android.net.wifi.WifiConfiguration.NetworkSelectionStatus);
     field @Deprecated public static final int INVALID_NETWORK_ID = -1; // 0xffffffff
     field @Deprecated public static final int METERED_OVERRIDE_METERED = 1; // 0x1
     field @Deprecated public static final int METERED_OVERRIDE_NONE = 0; // 0x0
     field @Deprecated public static final int METERED_OVERRIDE_NOT_METERED = 2; // 0x2
+    field @Deprecated public static final int RANDOMIZATION_ALWAYS = 100; // 0x64
     field @Deprecated public static final int RANDOMIZATION_NONE = 0; // 0x0
     field @Deprecated public static final int RANDOMIZATION_PERSISTENT = 1; // 0x1
     field @Deprecated public static final int RECENT_FAILURE_AP_UNABLE_TO_HANDLE_NEW_STA = 17; // 0x11
     field @Deprecated public static final int RECENT_FAILURE_NONE = 0; // 0x0
     field @Deprecated public boolean allowAutojoin;
     field @Deprecated public int carrierId;
     field @Deprecated public String creatorName;
     field @Deprecated public int creatorUid;
     field @Deprecated public boolean fromWifiNetworkSpecifier;
     field @Deprecated public boolean fromWifiNetworkSuggestion;
diff --git a/wifi/api/system-current.txt b/wifi/api/system-current.txt
index 07793c1eb02a42ca35208ead4ffe957c1e5f5f63..2a9fa1093774229b4953f1b6e254ea1deaebd7da 100644
--- a/wifi/api/system-current.txt
+++ b/wifi/api/system-current.txt
@@ -313,20 +313,21 @@ package android.net.wifi {
     method @Deprecated public boolean hasNoInternetAccess();
     method @Deprecated public boolean isEphemeral();
     method @Deprecated public static boolean isMetered(@Nullable android.net.wifi.WifiConfiguration, @Nullable android.net.wifi.WifiInfo);
     method @Deprecated public boolean isNoInternetAccessExpected();
     method @Deprecated public void setIpConfiguration(@Nullable android.net.IpConfiguration);
     method @Deprecated public void setNetworkSelectionStatus(@NonNull android.net.wifi.WifiConfiguration.NetworkSelectionStatus);
     field @Deprecated public static final int INVALID_NETWORK_ID = -1; // 0xffffffff
     field @Deprecated public static final int METERED_OVERRIDE_METERED = 1; // 0x1
     field @Deprecated public static final int METERED_OVERRIDE_NONE = 0; // 0x0
     field @Deprecated public static final int METERED_OVERRIDE_NOT_METERED = 2; // 0x2
+    field @Deprecated public static final int RANDOMIZATION_ALWAYS = 100; // 0x64
     field @Deprecated public static final int RANDOMIZATION_NONE = 0; // 0x0
     field @Deprecated public static final int RANDOMIZATION_PERSISTENT = 1; // 0x1
     field @Deprecated public static final int RECENT_FAILURE_AP_UNABLE_TO_HANDLE_NEW_STA = 17; // 0x11
     field @Deprecated public static final int RECENT_FAILURE_NONE = 0; // 0x0
     field @Deprecated public boolean allowAutojoin;
     field @Deprecated public int carrierId;
     field @Deprecated public String creatorName;
     field @Deprecated public int creatorUid;
     field @Deprecated public boolean fromWifiNetworkSpecifier;
     field @Deprecated public boolean fromWifiNetworkSuggestion;
diff --git a/wifi/java/android/net/wifi/WifiConfiguration.java b/wifi/java/android/net/wifi/WifiConfiguration.java
index 71f0ab8087abb62aca8f5290a0f236ec9459f2bb..8f52ba46a4094f11106a1129a65dfade79fec76c 100644
--- a/wifi/java/android/net/wifi/WifiConfiguration.java
+++ b/wifi/java/android/net/wifi/WifiConfiguration.java
@@ -1123,45 +1123,52 @@ public class WifiConfiguration implements Parcelable {
      * @hide
      * Number of time we associated to this configuration.
      */
     @SystemApi
     public int numAssociation;
 
     /** @hide */
     @Retention(RetentionPolicy.SOURCE)
     @IntDef(prefix = {"RANDOMIZATION_"}, value = {
             RANDOMIZATION_NONE,
-            RANDOMIZATION_PERSISTENT})
+            RANDOMIZATION_PERSISTENT,
+            RANDOMIZATION_ALWAYS})
     public @interface MacRandomizationSetting {}
 
     /**
      * Use factory MAC when connecting to this network
      * @hide
      */
     @SystemApi
     public static final int RANDOMIZATION_NONE = 0;
     /**
      * Generate a randomized MAC once and reuse it for all connections to this network
      * @hide
      */
     @SystemApi
     public static final int RANDOMIZATION_PERSISTENT = 1;
+    /**
+     * @hide
+     * Generate a randomize MAC always
+     */
+    @SystemApi
+    public static final int RANDOMIZATION_ALWAYS = 100;
 
     /**
      * Level of MAC randomization for this network.
-     * One of {@link #RANDOMIZATION_NONE} or {@link #RANDOMIZATION_PERSISTENT}.
-     * By default this field is set to {@link #RANDOMIZATION_PERSISTENT}.
+     * One of {@link #RANDOMIZATION_NONE} or {@link #RANDOMIZATION_PERSISTENT} or RANDOMIZATION_ALWAYS.
+     * By default this field is set to RANDOMIZATION_ALWAYS in GrapheneOS.
      * @hide
      */
     @SystemApi
     @MacRandomizationSetting
-    public int macRandomizationSetting = RANDOMIZATION_PERSISTENT;
+    public int macRandomizationSetting = RANDOMIZATION_ALWAYS;
 
     /**
      * @hide
      * Randomized MAC address to use with this particular network
      */
     @NonNull
     private MacAddress mRandomizedMacAddress;
 
     /**
      * @hide

commit 833464e3ac3737e847609ccb09edcc1f0d3ec025
Author: inthewaves <inthewaves@pm.me>
Date:   Sun 2020-09-20 14:59:10-0700

    have NfcTile get an NfcAdapter directly
    
    This changes the NfcTile to not be dependent on an NfcManager giving the
    NfcTile an NfcAdapter.
    
    The problem with NfcTile is that the NfcService doesn't start until the
    device is unlocked after a reboot, but NfcTile can be created and have
    its state updated before the device is unlocked.
    
    The state of NfcTile depends on an NfcAdapter. The tile gets an
    NfcAdapter from a call to NfcAdapter#getDefaultAdapter, which gets an
    adapter from an NfcManager via Context#getSystemService, and NfcManager
    tries to get an adapter in its constructor via NfcAdapter#getNfcAdapter.
    
    If this is done before unlock, NfcService isn't started, so the
    constructor of NfcManager fails to get an adapter, opting to just store
    null. This means that the NfcManager that's _cached_ by the NfcTile's
    application context holds a null NfcAdapter, so subsequent calls in
    NfcTile to get the NfcAdapter will keep returning null.
    
    We can just have NfcTile get the NfcAdapter directly via
    NfcAdapter#getNfcAdapter instead of relying on an NfcManager to call the
    same method for us to get its default adapter. We just have to make sure
    we use the application context for NfcAdapter#getNfcAdapter, as per the
    doc comments for getNfcAdapter. This means that there's no longer an
    NfcManager associated with the NfcTile's application context.
    
    It doesn't look like NfcManager does anything special with the
    NfcAdapter anyway. It seems to just be some middle man for NfcAdapters:
    * The NfcAdapter field in NfcManager is final, and it doesn't do
    anything else with it besides have a getter method for returning it. The
    NfcManager seems to be a way to force third-party apps that want to get
    an NfcAdapter to use the application context.
    * NfcAdapter#getNfcAdapter manages the caching of NfcAdapters by
    application context in a static HashMap. NfcManager doesn't manage
    caching; it just calls NfcAdapter#getNfcAdapter.
---
 packages/SystemUI/src/com/android/systemui/qs/tiles/NfcTile.java | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/packages/SystemUI/src/com/android/systemui/qs/tiles/NfcTile.java b/packages/SystemUI/src/com/android/systemui/qs/tiles/NfcTile.java
index aec38d9abd50e85291414f76c8458272c14b4be3..b428b56cc6e89eb74cc3685bd473407590080956 100644
--- a/packages/SystemUI/src/com/android/systemui/qs/tiles/NfcTile.java
+++ b/packages/SystemUI/src/com/android/systemui/qs/tiles/NfcTile.java
@@ -154,21 +154,21 @@ public class NfcTile extends QSTileImpl<BooleanState> {
         if (mState.value) {
             return mContext.getString(R.string.quick_settings_nfc_on);
         } else {
             return mContext.getString(R.string.quick_settings_nfc_off);
         }
     }
 
     private NfcAdapter getAdapter() {
         if (mAdapter == null) {
             try {
-                mAdapter = NfcAdapter.getDefaultAdapter(mContext);
+                mAdapter = NfcAdapter.getNfcAdapter(mContext.getApplicationContext());
             } catch (UnsupportedOperationException e) {
                 mAdapter = null;
             }
         }
         return mAdapter;
     }
 
     private BroadcastReceiver mNfcReceiver = new BroadcastReceiver() {
         @Override
         public void onReceive(Context context, Intent intent) {

commit 2942f86aa4fa06bf44b4b71852c3ef429c72be41
Author: inthewaves <inthewaves@pm.me>
Date:   Sun 2020-09-20 16:58:24-0700

    properly handle NfcTile's icon
    
    The quick tiles programmatically change the icon's appearance based on
    the state, so only one icon resource is needed (unless there's some
    special in between state). Since NfcTile hasn't been maintained, the
    icon code was based on an older system.
---
 packages/SystemUI/src/com/android/systemui/qs/tiles/NfcTile.java | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/packages/SystemUI/src/com/android/systemui/qs/tiles/NfcTile.java b/packages/SystemUI/src/com/android/systemui/qs/tiles/NfcTile.java
index b428b56cc6e89eb74cc3685bd473407590080956..e4419682406fe5759648e5f97e34cdfb15f2a625 100644
--- a/packages/SystemUI/src/com/android/systemui/qs/tiles/NfcTile.java
+++ b/packages/SystemUI/src/com/android/systemui/qs/tiles/NfcTile.java
@@ -130,22 +130,21 @@ public class NfcTile extends QSTileImpl<BooleanState> {
     public CharSequence getTileLabel() {
         return mContext.getString(R.string.quick_settings_nfc_label);
     }
 
     @Override
     protected void handleUpdateState(BooleanState state, Object arg) {
         state.value = getAdapter() != null && getAdapter().isEnabled();
         state.state = getAdapter() == null
                 ? Tile.STATE_UNAVAILABLE
                 : state.value ? Tile.STATE_ACTIVE : Tile.STATE_INACTIVE;
-        state.icon = ResourceIcon.get(
-                state.value ? R.drawable.ic_qs_nfc_enabled : R.drawable.ic_qs_nfc_disabled);
+        state.icon = ResourceIcon.get(R.drawable.ic_qs_nfc_enabled);
         state.label = mContext.getString(R.string.quick_settings_nfc_label);
         state.expandedAccessibilityClassName = Switch.class.getName();
         state.contentDescription = state.label;
     }
 
     @Override
     public int getMetricsCategory() {
         return MetricsEvent.QS_NFC;
     }
 

commit 7ce552b8848fd07940c3db18c73a1c46f1007b64
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Sun 2020-09-27 17:37:28-0400

    add 2 button navigation overlay
---
 packages/overlays/Android.mk | 1 +
 1 file changed, 1 insertion(+)

diff --git a/packages/overlays/Android.mk b/packages/overlays/Android.mk
index 999ab0802468d9a5f5de0b8a924eb3d8950ffaeb..03528e35c461f894e84cd1430e4bcf557b31e462 100644
--- a/packages/overlays/Android.mk
+++ b/packages/overlays/Android.mk
@@ -66,20 +66,21 @@ LOCAL_REQUIRED_MODULES := \
 	IconPackRoundedSettingsOverlay \
 	IconPackRoundedSystemUIOverlay \
 	IconPackRoundedThemePickerOverlay \
 	IconShapePebbleOverlay \
 	IconShapeRoundedRectOverlay \
 	IconShapeSquircleOverlay \
 	IconShapeTaperedRectOverlay \
 	IconShapeTeardropOverlay \
 	IconShapeVesselOverlay \
 	NavigationBarMode3ButtonOverlay \
+	NavigationBarMode2ButtonOverlay \
 	NavigationBarModeGesturalOverlay \
 	NavigationBarModeGesturalOverlayNarrowBack \
 	NavigationBarModeGesturalOverlayWideBack \
 	NavigationBarModeGesturalOverlayExtraWideBack \
 	preinstalled-packages-platform-overlays.xml
 
 include $(BUILD_PHONY_PACKAGE)
 include $(CLEAR_VARS)
 
 LOCAL_MODULE := frameworks-base-overlays-debug

commit 48fc961f50cfc65e12e352f7b162b7084d49b3c5
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Tue 2020-09-29 16:37:29-0400

    Revert "OsuLogin: Generate AOSP keys and sign APK"
    
    This reverts commit d0330873bf6232019be185f987c58a693d0348f9.
---
 packages/OsuLogin/Android.bp                       |   7 +--
 .../certs/com.android.hotspot2.osulogin.pk8 (gone) | Bin 2374 -> 0 bytes
 .../com.android.hotspot2.osulogin.x509.pem (gone)  |  35 --------------
 packages/OsuLogin/certs/key.pem (gone)             |  52 ---------------------
 4 files changed, 1 insertion(+), 93 deletions(-)

diff --git a/packages/OsuLogin/Android.bp b/packages/OsuLogin/Android.bp
index 445c81b89273167c5391fb2693496046fd1f3d05..a9e0d9fb29f9e8f248f2e042226443097eeee2eb 100644
--- a/packages/OsuLogin/Android.bp
+++ b/packages/OsuLogin/Android.bp
@@ -1,18 +1,13 @@
 android_app {
     name: "OsuLogin",
     defaults: ["wifi-module-sdk-version-defaults"],
     static_libs: ["androidx.legacy_legacy-support-v4"],
     resource_dirs: ["res"],
     srcs: ["src/**/*.java"],
     sdk_version: "system_current",
-    certificate: ":com.android.hotspot2.osulogin.certificate",
+
     apex_available: [
         "com.android.wifi",
         "test_com.android.wifi",
     ],
 }
-
-android_app_certificate {
-    name: "com.android.hotspot2.osulogin.certificate",
-    certificate: "certs/com.android.hotspot2.osulogin"
-}
diff --git a/packages/OsuLogin/certs/com.android.hotspot2.osulogin.pk8 b/packages/OsuLogin/certs/com.android.hotspot2.osulogin.pk8
deleted file mode 100644
index 87fd622cde2cd80fc6e4f7e2e019e5857336b91d..0000000000000000000000000000000000000000
Binary files a/packages/OsuLogin/certs/com.android.hotspot2.osulogin.pk8 and /dev/null differ
diff --git a/packages/OsuLogin/certs/com.android.hotspot2.osulogin.x509.pem b/packages/OsuLogin/certs/com.android.hotspot2.osulogin.x509.pem
deleted file mode 100644
index 1dfe701dc88e16254d23bf9faecaa2c08572c360..0000000000000000000000000000000000000000
--- a/packages/OsuLogin/certs/com.android.hotspot2.osulogin.x509.pem
+++ /dev/null
@@ -1,35 +0,0 @@
------BEGIN CERTIFICATE-----
-MIIGDzCCA/egAwIBAgIUHzkh0UCF/H+1mZZp0ROX4nXKOUowDQYJKoZIhvcNAQEL
-BQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQH
-DA1Nb3VudGFpbiBWaWV3MRAwDgYDVQQKDAdBbmRyb2lkMRAwDgYDVQQLDAdBbmRy
-b2lkMREwDwYDVQQDDAhPc3VMb2dpbjEiMCAGCSqGSIb3DQEJARYTYW5kcm9pZEBh
-bmRyb2lkLmNvbTAgFw0yMDAzMjUwMjQ5MTNaGA80NzU4MDIxOTAyNDkxM1owgZUx
-CzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3Vu
-dGFpbiBWaWV3MRAwDgYDVQQKDAdBbmRyb2lkMRAwDgYDVQQLDAdBbmRyb2lkMREw
-DwYDVQQDDAhPc3VMb2dpbjEiMCAGCSqGSIb3DQEJARYTYW5kcm9pZEBhbmRyb2lk
-LmNvbTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAMJDnjAeIZ2KUvKc
-ONwxuzIhLvXr6LRm+Uz0ebjz++5IzQJLwr/COPBG9zbIm8izj2acp+l4WVEYT6I4
-Es5LEp556ySCuZx8IjOd0Zd6NCdaKmYouDTjYTrELWUlZjfA7Km2L5x2M6ArnDO5
-zJ1BIsQ06S3C7iR3ktAQ1cFdidg6Ha2gainS0A1JKN3kL9BL1pvHRLzWZX4gsNhB
-C/6Ue3W3Sx2JRQkaaLksDdoKq0QswEk5tGfKbVr9+hHv/pztaaqEXSeV6f305cAx
-Hzd6+QJ8f8AJz2Rhnv43y72UO8b02CSP3laUj8geidR8XXw+R7Kzu8NfFDL7uVIh
-ktPaBxfWPNYtedp3JrGeZhkzljsushY+bVHECEzROhY2CiUZBEn+wwZLWe2W7oee
-VCL1EZBYctK5CfrrV6x0wvbBUF/ViwV+2LQXQNp08xB8bJBqoBn4KZjK0tTN86Dq
-qRALyoVIVh5VDU9Wbi3vrJb0/9TEQtMjuo0DS3hdtnowdRyAyhwbQHO26dqnnzBI
-XtTAve4RkOwnb8QzZde56qvRgweDE9Im1jpx4E+MMGqVYs8Txurmd/t6bCjTvp1P
-4i88crk/zqCoHEQEbiaNdfkULJAWg9wqxPjqPCTVNtOXoJwuHsNymQVSztIUSySz
-ZQ8Trk0ApqQf8yH2mjM6HJJZoNpBAgMBAAGjUzBRMB0GA1UdDgQWBBRdpduh1P+I
-BMbg5S4n1kbj5hQsOzAfBgNVHSMEGDAWgBRdpduh1P+IBMbg5S4n1kbj5hQsOzAP
-BgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4ICAQB+FzSuoA7LCvn8l86V
-sSI4lH1KLLH+wrXp20w/wYcBY+s4hYPpAJ8YbEMOT9uibK/HpEWYFqiVCqk4gKXr
-Qraxvmtqq0WNSwkjeopTYlZeBzTC/If3UoOCp7KCfMdydIcxvk6LNokMWWqSCNP8
-QiD872XuBvj/uQeBsbHZTqruqPnu+LZwpuHFVRp/Pyj9rT61PsvGitb7q/chW0G7
-7csHOc5q2223LKlNknPsfbcR6nVEg4KfN7kPKny8iJtl2pdbfBjFDp+73nzW8qZU
-5JWO5nWL7cJh4mt5sPGrzpt/Hf8/Dngg69sImRqjv/6/wCV0pEmmNjKJkXcMaZ0T
-2TSs+A7K6l15NYk8exkMymTU7jk+iDud3tnQ68YHf/A9pDu15OCw6U/pTgOgu9co
-rBLLhGV0Tb6XAnsWKe9tsLcumQXU5ZUn9m5VJl58wQHNhUqpT7L0fWtpiTMTStVA
-/yZbndPO4SbjR5rjcAk1xge8lyIIp0WBWmwoQ/1y4DXF/yPaX733wO7uWUljgKuy
-MM/zM4zklB8nFjXfPNf3j24Bzqmy7rqy4XB64enVmYQ2mVNqfwXvINoo2XOrAmj/
-bhSWXiCFltJFM7fmJGOMEEHBt9QfbmCgmM4aoWMgH7P+HxGW+Vc3tGixBbsxNRC+
-/VrPAINQV4x5q8zGYNQBqNFn/A==
------END CERTIFICATE-----
diff --git a/packages/OsuLogin/certs/key.pem b/packages/OsuLogin/certs/key.pem
deleted file mode 100644
index f560a8d0fa624b75cfeb8c70eac356833c8eeb58..0000000000000000000000000000000000000000
--- a/packages/OsuLogin/certs/key.pem
+++ /dev/null
@@ -1,52 +0,0 @@
------BEGIN PRIVATE KEY-----
-MIIJQgIBADANBgkqhkiG9w0BAQEFAASCCSwwggkoAgEAAoICAQDCQ54wHiGdilLy
-nDjcMbsyIS716+i0ZvlM9Hm48/vuSM0CS8K/wjjwRvc2yJvIs49mnKfpeFlRGE+i
-OBLOSxKeeeskgrmcfCIzndGXejQnWipmKLg042E6xC1lJWY3wOypti+cdjOgK5wz
-ucydQSLENOktwu4kd5LQENXBXYnYOh2toGop0tANSSjd5C/QS9abx0S81mV+ILDY
-QQv+lHt1t0sdiUUJGmi5LA3aCqtELMBJObRnym1a/foR7/6c7WmqhF0nlen99OXA
-MR83evkCfH/ACc9kYZ7+N8u9lDvG9Ngkj95WlI/IHonUfF18Pkeys7vDXxQy+7lS
-IZLT2gcX1jzWLXnadyaxnmYZM5Y7LrIWPm1RxAhM0ToWNgolGQRJ/sMGS1ntlu6H
-nlQi9RGQWHLSuQn661esdML2wVBf1YsFfti0F0DadPMQfGyQaqAZ+CmYytLUzfOg
-6qkQC8qFSFYeVQ1PVm4t76yW9P/UxELTI7qNA0t4XbZ6MHUcgMocG0Bztunap58w
-SF7UwL3uEZDsJ2/EM2XXueqr0YMHgxPSJtY6ceBPjDBqlWLPE8bq5nf7emwo076d
-T+IvPHK5P86gqBxEBG4mjXX5FCyQFoPcKsT46jwk1TbTl6CcLh7DcpkFUs7SFEsk
-s2UPE65NAKakH/Mh9pozOhySWaDaQQIDAQABAoICAGgX7XKhIqgVD59aoIk0yLby
-2wQBdf780ocu1O6LJiqnrdqWF/PCsdnmXN9pHTitJqD4Pm03BL0Uhs9ItqL9zStH
-7vzwY177kSQRY9aEL+AKS3/UP+hvEpF3v09ce+pSIT5LFjYDjGQ+GgQJgh+dYHC8
-XVodAphdzjhZXQCxC4TmlzKLK3ffs4X69r/3XruBd6yfWTDKvTWZdMlcCX5Pt9v6
-7HAWNvzKvuTCO2Xjo6PzStGx7v5SlMhWISJtdARInv80z+m/RdPD3zxd1flXloiD
-h7yyRQPn31cfNLgP7vwMBKmKwbuo/WZhHr/SKBHEGY0jC/CDSQKMqd/dh5ynTnbC
-vi/qjKFIHofmhzgQ+fiHMeMsAO1c9eYs8a6bDeJjhA5qJP1HjSie9Ss9z94mp6Ww
-TRkU93yVX04DU4TCCf0IcFpKdbtKp84i6iLV9lKGh9juM42hSOFUV6bhxmlJ9zvM
-yl7vfhhuFHy1SypmaK/oJ+nwac4vIMaHCX9ifl6hm/z4PrGFSYJGQoJtVOz0vT15
-lSwCJVdHkGAe0LI+3iFn5jJlluD7TqsLmZLxqTTmzDZ3U9WhAslmn5TcZd92mL0i
-ZVTfCkjyl1wUHeif2992oTUH6CFZ1jKd8xwdWvyKkvQcjhiS9GUsm7j6jolR/QI7
-VPQlocM/vCCusrMWnR7xAoIBAQDv9O8kboz6WzN6Xw5UC7MWpi2jZg1bTs/uKcfz
-biAEC96iJQ33YSkYi6QzV4jSaackU99vGkHbQIdaBTkudz+FK5XqH0auImB2xxcR
-Xu9G2j2fhzESchVTtOnotVgjiuv18SLZ/GQoSIccs0QxcisPiTa5Ij9pl8xVoS6J
-sxfqAe15hASqLh+9Ula3+Orb1kCkqK0UwU0nM9nfUH88BKvUwQIMA7kipTA8jJog
-MJOlYPQUGxkltlim8Vip//P336E7CWT6fWbfo62US6IEu6HcC6T8u8jcLjIKsmjJ
-YJyqrepZqAVMPlv2Z+mNhxRR0ct6blfjJSrEZEtxBRn98kZ1AoIBAQDPQJ1z7Mfy
-AOfjSO6Dlfr7V9SWmGvexosH0gu6H8KO+n1/ZPH5fHGt7ORubUDhkNI/fqZK0Hls
-Q9Jwgq1QI9UwMTogF8DgmZ6L6jiXhUScIk0BFhUxOBoplugaI0jdTW350D2quFUJ
-LjYo+VcRapTfXXVehHSjbUh3nmTWj0WboA+//7xq8q9KHPb1Sbiwjf7N1iYD5R8p
-PaaG0DMET+l90bxI+QVX1enwjZGcFjo8VI+qXGGkpB/1zK5yWm29ZWypLw8TZreM
-7rLUdBY1/m7MB54zOaJ2jSsxLQSXIVSGPI1ugkmFr6OxeuLdcCLN4yca3+HYHewa
-w3GCBP3kfYMdAoIBAAxG0slhYpMYgWy8WkZQhuwcum8GtJ48TQUZXCKHOtoaJVzU
-Wn+SmACqfE8oJlblkuiX5fGQPVhTV9lyNPe8oCJXFYdx7DLSjW7mRrbbzZApcEeu
-KgOQlKjAs8r1JDpFTEc7/BV9BT7OXyNHxLBm7+8OjR8xsl7bplenNHNVF18glB7I
-c1ilnXgZM1icQp/WuV3zR0+tiB3+WCJFwwy2DHiJG2qz8g/ktbATXXtSIOuwJyy0
-Kjg0uRppdKjV8Ix5A426sFDkg5PjkujoabSmSOSyL9HCZcdmEadcc2ICMGHHHhtS
-Lls1QY08ycU06QQ6oJd198cmSqbbnsR8h1TnxVUCggEBAI2zF/QSiAImLGVxj+HX
-wWnneyobvGTsSlJmgi4XWOZ4zSU011xEgVTxCp2VhS6z3YwcA4ZTUzF6jX7vWZ/Z
-YAE7JwqaMv1dCtGOqnKuY2J88Tk05/hm6zxUOQzl4wOr1O1gO0lmDn3gYpdRIv59
-aJvvQjgFR9oU9d8TJM6t1mG45gvXxfM5Si/Z7d93MBdGflgteoBfPxbrV9gEsVzZ
-ZkLoC1u5JrYPQ4t8v3mAmQB2sGNCFmCC9ncQIpV8zlsX5VsnGZ+iMwzghtRLKoRw
-GUDWVIuhdDqp+kX9CY5q82d0Lx7HZY1JsRm/cy0DZkhubmYpfDhO/QavagQDdbOr
-POECggEAXOliqX4yFvy6USXihHVM44s63gK+yH0+0iRppqoB3+E5tDyhvvvBMPLZ
-7EBkhd7ILTDXbc0c8nSl8I/556YSlIaOB4Xbf4UQbsmD4fNGEnNWFbCzcEWYOjpQ
-5QyXjIzK/k8eg22OZlC3XNjGHgb/mA5f+v2enGQNuy7WRTl1mKYZB2h/2p6xy+jV
-CGhd4btB2bOu+1XR/B2KFvI5NdtPPti05LmsYgsU00yYJfQkpc7VvOSH5Jyy3eZL
-L9xTAy7NWBQ3LGdIpX+V1jcn3SzVits0m6hOUCtJLT1snMXAKFweTvWAQynuGomc
-VPf88ITMTOBjOH6YC8jKd/n2lVWLjw==
------END PRIVATE KEY-----

commit b1a1d15fa9701d81b557d9fddf0e60ce97cefd44
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Sun 2020-10-04 19:02:09-0400

    enable secondary user logout support by default
---
 .../com/android/server/devicepolicy/DevicePolicyManagerService.java | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java b/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java
index ae354a953eecc839c3fd00bc9a25039f1edd290c..47769ef9e7a88d0ff8a42f5c9411c24fcf0b2745 100644
--- a/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java
+++ b/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java
@@ -1159,21 +1159,21 @@ public class DevicePolicyManagerService extends BaseIDevicePolicyManager {
         boolean encryptionRequested = false;
         boolean testOnlyAdmin = false;
         boolean disableCamera = false;
         boolean disableCallerId = false;
         boolean disableContactsSearch = false;
         boolean disableBluetoothContactSharing = true;
         boolean disableScreenCapture = false; // Can only be set by a device/profile owner.
         boolean requireAutoTime = false; // Can only be set by a device owner.
         boolean forceEphemeralUsers = false; // Can only be set by a device owner.
         boolean isNetworkLoggingEnabled = false; // Can only be set by a device owner.
-        boolean isLogoutEnabled = false; // Can only be set by a device owner.
+        boolean isLogoutEnabled = true; // Can only be set by a device owner.
 
         // one notification after enabling + one more after reboots
         static final int DEF_MAXIMUM_NETWORK_LOGGING_NOTIFICATIONS_SHOWN = 2;
         int numNetworkLoggingNotifications = 0;
         long lastNetworkLoggingNotificationTimeMs = 0; // Time in milliseconds since epoch
 
         ActiveAdmin parentAdmin;
         final boolean isParent;
 
         static class TrustAgentInfo {
@@ -15109,25 +15109,25 @@ public class DevicePolicyManagerService extends BaseIDevicePolicyManager {
                 return;
             }
             deviceOwner.isLogoutEnabled = enabled;
             saveSettingsLocked(mInjector.userHandleGetCallingUserId());
         }
     }
 
     @Override
     public boolean isLogoutEnabled() {
         if (!mHasFeature) {
-            return false;
+            return true;
         }
         synchronized (getLockObject()) {
             ActiveAdmin deviceOwner = getDeviceOwnerAdminLocked();
-            return (deviceOwner != null) && deviceOwner.isLogoutEnabled;
+            return (deviceOwner == null) || deviceOwner.isLogoutEnabled;
         }
     }
 
     @Override
     public List<String> getDisallowedSystemApps(ComponentName admin, int userId,
             String provisioningAction) throws RemoteException {
         enforceCanManageProfileAndDeviceOwners();
         return new ArrayList<>(
                 mOverlayPackagesProvider.getNonRequiredApps(admin, userId, provisioningAction));
     }

commit 22b8da494037c437b57733bf307e90b987e5009a
Author: inthewaves <inthewaves@pm.me>
Date:   Tue 2020-10-06 16:02:25-0700

    switch to providing WebView via Vanadium
---
 core/res/res/xml/config_webview_packages.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/core/res/res/xml/config_webview_packages.xml b/core/res/res/xml/config_webview_packages.xml
index f062b59a008c900260a691e55b6328a5ca6692c2..1db99d8bc404e5b496541ca44e962d61e84a46c6 100644
--- a/core/res/res/xml/config_webview_packages.xml
+++ b/core/res/res/xml/config_webview_packages.xml
@@ -9,13 +9,13 @@
 
      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
 -->
 
 <webviewproviders>
     <!-- The default WebView implementation -->
-    <webviewprovider description="Android WebView" packageName="com.android.webview" availableByDefault="true">
+    <webviewprovider description="Vanadium" packageName="app.vanadium.webview" availableByDefault="true">
     </webviewprovider>
 </webviewproviders>

commit 0e0130898cc250cbf850e27d15caa715d8a9f243
Author: anupritaisno1 <www.anuprita804@gmail.com>
Date:   Fri 2020-10-30 22:26:09+0000

    pass through runtime flags for exec spawning and implement them in the child
    
    Signed-off-by: anupritaisno1 <www.anuprita804@gmail.com>
---
 core/java/com/android/internal/os/ExecInit.java    | 14 ++--
 core/java/com/android/internal/os/Zygote.java      |  9 +++
 .../com/android/internal/os/ZygoteConnection.java  |  2 +-
 core/jni/com_android_internal_os_Zygote.cpp        | 83 ++++++++++++----------
 4 files changed, 66 insertions(+), 42 deletions(-)

diff --git a/core/java/com/android/internal/os/ExecInit.java b/core/java/com/android/internal/os/ExecInit.java
index 830e5b562a919bf599784358f3e4a267168e7fb1..749c67abf389dfd684972fab5b8e5b967c2634a0 100644
--- a/core/java/com/android/internal/os/ExecInit.java
+++ b/core/java/com/android/internal/os/ExecInit.java
@@ -24,57 +24,63 @@ public class ExecInit {
      * The first argument is the target SDK version for the app.
      *
      * The remaining arguments are passed to the runtime.
      *
      * @param args The command-line arguments.
      */
     public static void main(String[] args) {
         // Parse our mandatory argument.
         int targetSdkVersion = Integer.parseInt(args[0], 10);
 
+        // Parse the runtime_flags.
+        int runtimeFlags = Integer.parseInt(args[1], 10);
+
         // Mimic system Zygote preloading.
         ZygoteInit.preload(new TimingsTraceLog("ExecInitTiming",
                 Trace.TRACE_TAG_DALVIK), false);
 
         // Launch the application.
-        String[] runtimeArgs = new String[args.length - 1];
-        System.arraycopy(args, 1, runtimeArgs, 0, runtimeArgs.length);
+        String[] runtimeArgs = new String[args.length - 2];
+        System.arraycopy(args, 2, runtimeArgs, 0, runtimeArgs.length);
         Runnable r = execInit(targetSdkVersion, runtimeArgs);
 
+        Zygote.nativeHandleRuntimeFlags(runtimeFlags);
+
         r.run();
     }
 
     /**
      * Executes a runtime application with exec-based spawning.
      * This method never returns.
      *
      * @param niceName The nice name for the application, or null if none.
      * @param targetSdkVersion The target SDK version for the app.
      * @param args Arguments for {@link RuntimeInit#main}.
      */
     public static void execApplication(String niceName, int targetSdkVersion,
-            String instructionSet, String[] args) {
+            String instructionSet, int runtimeFlags, String[] args) {
         int niceArgs = niceName == null ? 0 : 1;
-        int baseArgs = 5 + niceArgs;
+        int baseArgs = 6 + niceArgs;
         String[] argv = new String[baseArgs + args.length];
         if (VMRuntime.is64BitInstructionSet(instructionSet)) {
             argv[0] = "/system/bin/app_process64";
         } else {
             argv[0] = "/system/bin/app_process32";
         }
         argv[1] = "/system/bin";
         argv[2] = "--application";
         if (niceName != null) {
             argv[3] = "--nice-name=" + niceName;
         }
         argv[3 + niceArgs] = "com.android.internal.os.ExecInit";
         argv[4 + niceArgs] = Integer.toString(targetSdkVersion);
+        argv[5 + niceArgs] = Integer.toString(runtimeFlags);
         System.arraycopy(args, 0, argv, baseArgs, args.length);
 
         WrapperInit.preserveCapabilities();
         try {
             Os.execv(argv[0], argv);
         } catch (ErrnoException e) {
             throw new RuntimeException(e);
         }
     }
 
diff --git a/core/java/com/android/internal/os/Zygote.java b/core/java/com/android/internal/os/Zygote.java
index a7d9827855a2108ebdc8ebc80f9927a4d5d5df7e..aa874ad98a78dbec939c4c6924b02b51f34f5eeb 100644
--- a/core/java/com/android/internal/os/Zygote.java
+++ b/core/java/com/android/internal/os/Zygote.java
@@ -1090,11 +1090,20 @@ public final class Zygote {
      */
     @FastNative
     public static native int nativeParseSigChld(byte[] in, int length, int[] out);
 
     /**
      * Returns whether the kernel supports tagged pointers. Present in the
      * Android Common Kernel from 4.14 and up. By default, you should prefer
      * fully-feature Memory Tagging, rather than the static Tagged Pointers.
      */
     public static native boolean nativeSupportsTaggedPointers();
+
+    /**
+     * Used on GrapheneOS to set up runtime flags
+     *
+     * @param runtimeFlags flags to be passed to the native method
+     *
+     * @hide
+     */
+    public static native void nativeHandleRuntimeFlags(int runtimeFlags);
 }
diff --git a/core/java/com/android/internal/os/ZygoteConnection.java b/core/java/com/android/internal/os/ZygoteConnection.java
index 9b466417853081e568693c7c4c6693a2e337a0f7..4ae69677f1dd8cf07cb475dbb80613f44b336ae7 100644
--- a/core/java/com/android/internal/os/ZygoteConnection.java
+++ b/core/java/com/android/internal/os/ZygoteConnection.java
@@ -498,21 +498,21 @@ class ZygoteConnection {
                     VMRuntime.getCurrentInstructionSet(),
                     pipeFd, parsedArgs.mRemainingArgs);
 
             // Should not get here.
             throw new IllegalStateException("WrapperInit.execApplication unexpectedly returned");
         } else {
             if (!isZygote) {
                 if (SystemProperties.getBoolean("sys.spawn.exec", true) &&
                         (parsedArgs.mRuntimeFlags & ApplicationInfo.FLAG_DEBUGGABLE) == 0) {
                     ExecInit.execApplication(parsedArgs.mNiceName, parsedArgs.mTargetSdkVersion,
-                            VMRuntime.getCurrentInstructionSet(), parsedArgs.mRemainingArgs);
+                            VMRuntime.getCurrentInstructionSet(), parsedArgs.mRuntimeFlags, parsedArgs.mRemainingArgs);
 
                     // Should not get here.
                     throw new IllegalStateException("ExecInit.execApplication unexpectedly returned");
                 }
                 return ZygoteInit.zygoteInit(parsedArgs.mTargetSdkVersion,
                         parsedArgs.mDisabledCompatChanges,
                         parsedArgs.mRemainingArgs, null /* classLoader */);
             } else {
                 return ZygoteInit.childZygoteInit(parsedArgs.mTargetSdkVersion,
                         parsedArgs.mRemainingArgs, null /* classLoader */);
diff --git a/core/jni/com_android_internal_os_Zygote.cpp b/core/jni/com_android_internal_os_Zygote.cpp
index 9eede83e21e52b265e80460954a1223f9915dcaf..cb4bde87916be8d2b20e9bf1c40896577628e8c3 100644
--- a/core/jni/com_android_internal_os_Zygote.cpp
+++ b/core/jni/com_android_internal_os_Zygote.cpp
@@ -1592,20 +1592,60 @@ static void BindMountStorageDirs(JNIEnv* env, jobjectArray pkg_data_info_list,
 
   // Bind mount each package obb directory
   for (int i = 0; i < size; i += 3) {
     jstring package_str = (jstring) (env->GetObjectArrayElement(pkg_data_info_list, i));
     std::string packageName = extract_fn(package_str).value();
     BindMountStorageToLowerFs(user_id, uid, "Android/obb", packageName.c_str(), fail_fn);
     BindMountStorageToLowerFs(user_id, uid, "Android/data", packageName.c_str(), fail_fn);
   }
 }
 
+static void HandleRuntimeFlags(JNIEnv* env, jint& runtime_flags) {
+  // Set process properties to enable debugging if required.
+  if ((runtime_flags & RuntimeFlags::DEBUG_ENABLE_JDWP) != 0) {
+    EnableDebugger();
+  }
+  if ((runtime_flags & RuntimeFlags::PROFILE_FROM_SHELL) != 0) {
+    // simpleperf needs the process to be dumpable to profile it.
+    if (prctl(PR_SET_DUMPABLE, 1, 0, 0, 0) == -1) {
+      ALOGE("prctl(PR_SET_DUMPABLE) failed: %s", strerror(errno));
+      RuntimeAbort(env, __LINE__, "prctl(PR_SET_DUMPABLE, 1) failed");
+    }
+  }
+
+  HeapTaggingLevel heap_tagging_level;
+  switch (runtime_flags & RuntimeFlags::MEMORY_TAG_LEVEL_MASK) {
+    case RuntimeFlags::MEMORY_TAG_LEVEL_TBI:
+      heap_tagging_level = M_HEAP_TAGGING_LEVEL_TBI;
+      break;
+    default:
+      heap_tagging_level = M_HEAP_TAGGING_LEVEL_NONE;
+  }
+  android_mallopt(M_SET_HEAP_TAGGING_LEVEL, &heap_tagging_level, sizeof(heap_tagging_level));
+  // Now that we've used the flag, clear it so that we don't pass unknown flags to the ART runtime.
+  runtime_flags &= ~RuntimeFlags::MEMORY_TAG_LEVEL_MASK;
+
+  bool forceEnableGwpAsan = false;
+  switch (runtime_flags & RuntimeFlags::GWP_ASAN_LEVEL_MASK) {
+      default:
+      case RuntimeFlags::GWP_ASAN_LEVEL_NEVER:
+          break;
+      case RuntimeFlags::GWP_ASAN_LEVEL_ALWAYS:
+          forceEnableGwpAsan = true;
+          [[fallthrough]];
+      case RuntimeFlags::GWP_ASAN_LEVEL_LOTTERY:
+          android_mallopt(M_INITIALIZE_GWP_ASAN, &forceEnableGwpAsan, sizeof(forceEnableGwpAsan));
+  }
+  // Now that we've used the flag, clear it so that we don't pass unknown flags to the ART runtime.
+  runtime_flags &= ~RuntimeFlags::GWP_ASAN_LEVEL_MASK;
+}
+
 // Utility routine to specialize a zygote child process.
 static void SpecializeCommon(JNIEnv* env, uid_t uid, gid_t gid, jintArray gids,
                              jint runtime_flags, jobjectArray rlimits,
                              jlong permitted_capabilities, jlong effective_capabilities,
                              jint mount_external, jstring managed_se_info,
                              jstring managed_nice_name, bool is_system_server,
                              bool is_child_zygote, jstring managed_instruction_set,
                              jstring managed_app_data_dir, bool is_top_app,
                              jobjectArray pkg_data_info_list,
                              jobjectArray whitelisted_data_info_list,
@@ -1709,57 +1749,21 @@ static void SpecializeCommon(JNIEnv* env, uid_t uid, gid_t gid, jintArray gids,
     RuntimeAbort(env, __LINE__, "prctl(PR_GET_DUMPABLE) failed");
   }
 
   if (dumpable == 2 && uid >= AID_APP) {
     if (prctl(PR_SET_DUMPABLE, 0, 0, 0, 0) == -1) {
       ALOGE("prctl(PR_SET_DUMPABLE, 0) failed: %s", strerror(errno));
       RuntimeAbort(env, __LINE__, "prctl(PR_SET_DUMPABLE, 0) failed");
     }
   }
 
-  // Set process properties to enable debugging if required.
-  if ((runtime_flags & RuntimeFlags::DEBUG_ENABLE_JDWP) != 0) {
-    EnableDebugger();
-  }
-  if ((runtime_flags & RuntimeFlags::PROFILE_FROM_SHELL) != 0) {
-    // simpleperf needs the process to be dumpable to profile it.
-    if (prctl(PR_SET_DUMPABLE, 1, 0, 0, 0) == -1) {
-      ALOGE("prctl(PR_SET_DUMPABLE) failed: %s", strerror(errno));
-      RuntimeAbort(env, __LINE__, "prctl(PR_SET_DUMPABLE, 1) failed");
-    }
-  }
-
-  HeapTaggingLevel heap_tagging_level;
-  switch (runtime_flags & RuntimeFlags::MEMORY_TAG_LEVEL_MASK) {
-    case RuntimeFlags::MEMORY_TAG_LEVEL_TBI:
-      heap_tagging_level = M_HEAP_TAGGING_LEVEL_TBI;
-      break;
-    default:
-      heap_tagging_level = M_HEAP_TAGGING_LEVEL_NONE;
-  }
-  android_mallopt(M_SET_HEAP_TAGGING_LEVEL, &heap_tagging_level, sizeof(heap_tagging_level));
-  // Now that we've used the flag, clear it so that we don't pass unknown flags to the ART runtime.
-  runtime_flags &= ~RuntimeFlags::MEMORY_TAG_LEVEL_MASK;
-
-  bool forceEnableGwpAsan = false;
-  switch (runtime_flags & RuntimeFlags::GWP_ASAN_LEVEL_MASK) {
-      default:
-      case RuntimeFlags::GWP_ASAN_LEVEL_NEVER:
-          break;
-      case RuntimeFlags::GWP_ASAN_LEVEL_ALWAYS:
-          forceEnableGwpAsan = true;
-          [[fallthrough]];
-      case RuntimeFlags::GWP_ASAN_LEVEL_LOTTERY:
-          android_mallopt(M_INITIALIZE_GWP_ASAN, &forceEnableGwpAsan, sizeof(forceEnableGwpAsan));
-  }
-  // Now that we've used the flag, clear it so that we don't pass unknown flags to the ART runtime.
-  runtime_flags &= ~RuntimeFlags::GWP_ASAN_LEVEL_MASK;
+  HandleRuntimeFlags(env, runtime_flags);
 
   if (NeedsNoRandomizeWorkaround()) {
     // Work around ARM kernel ASLR lossage (http://b/5817320).
     int old_personality = personality(0xffffffff);
     int new_personality = personality(old_personality | ADDR_NO_RANDOMIZE);
     if (new_personality == -1) {
       ALOGW("personality(%d) failed: %s", new_personality, strerror(errno));
     }
   }
 
@@ -2434,20 +2438,24 @@ static jint com_android_internal_os_Zygote_nativeParseSigChld(JNIEnv* env, jclas
 
 static jboolean com_android_internal_os_Zygote_nativeSupportsTaggedPointers(JNIEnv* env, jclass) {
 #ifdef __aarch64__
   int res = prctl(PR_GET_TAGGED_ADDR_CTRL, 0, 0, 0, 0);
   return res >= 0 && res & PR_TAGGED_ADDR_ENABLE;
 #else
   return false;
 #endif
 }
 
+static void nativeHandleRuntimeFlagsWrapper(JNIEnv* env, jclass, jint runtime_flags) {
+    HandleRuntimeFlags(env, runtime_flags);
+}
+
 static const JNINativeMethod gMethods[] = {
         {"nativeForkAndSpecialize",
          "(II[II[[IILjava/lang/String;Ljava/lang/String;[I[IZLjava/lang/String;Ljava/lang/"
          "String;Z[Ljava/lang/String;[Ljava/lang/String;ZZ)I",
          (void*)com_android_internal_os_Zygote_nativeForkAndSpecialize},
         {"nativeForkSystemServer", "(II[II[[IJJ)I",
          (void*)com_android_internal_os_Zygote_nativeForkSystemServer},
         {"nativeAllowFileAcrossFork", "(Ljava/lang/String;)V",
          (void*)com_android_internal_os_Zygote_nativeAllowFileAcrossFork},
         {"nativePreApplicationInit", "()V",
@@ -2471,20 +2479,21 @@ static const JNINativeMethod gMethods[] = {
          (void*)com_android_internal_os_Zygote_nativeGetUsapPoolCount},
         {"nativeEmptyUsapPool", "()V", (void*)com_android_internal_os_Zygote_nativeEmptyUsapPool},
         {"nativeBlockSigTerm", "()V", (void*)com_android_internal_os_Zygote_nativeBlockSigTerm},
         {"nativeUnblockSigTerm", "()V", (void*)com_android_internal_os_Zygote_nativeUnblockSigTerm},
         {"nativeBoostUsapPriority", "()V",
          (void*)com_android_internal_os_Zygote_nativeBoostUsapPriority},
         {"nativeParseSigChld", "([BI[I)I",
          (void*)com_android_internal_os_Zygote_nativeParseSigChld},
         {"nativeSupportsTaggedPointers", "()Z",
          (void*)com_android_internal_os_Zygote_nativeSupportsTaggedPointers},
+        {"nativeHandleRuntimeFlags", "(I)V", (void*)nativeHandleRuntimeFlagsWrapper},
 };
 
 int register_com_android_internal_os_Zygote(JNIEnv* env) {
   gZygoteClass = MakeGlobalRefOrDie(env, FindClassOrDie(env, kZygoteClassName));
   gCallPostForkSystemServerHooks = GetStaticMethodIDOrDie(env, gZygoteClass,
                                                           "callPostForkSystemServerHooks",
                                                           "(I)V");
   gCallPostForkChildHooks = GetStaticMethodIDOrDie(env, gZygoteClass, "callPostForkChildHooks",
                                                    "(IZZLjava/lang/String;)V");
 

commit d5f69a05ba10d91e2feb108a6c57f7c7996af6c6
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Wed 2020-11-25 03:55:15-0500

    default to GrapheneOS connectivity check server
---
 services/core/java/com/android/server/ConnectivityService.java | 2 +-
 tests/net/java/com/android/server/ConnectivityServiceTest.java | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/services/core/java/com/android/server/ConnectivityService.java b/services/core/java/com/android/server/ConnectivityService.java
index a1cbd00e360f1f0a864d454e1b7d59aafb79b7ec..4ca1a118fc6811109e2680e1e62a472900161866 100644
--- a/services/core/java/com/android/server/ConnectivityService.java
+++ b/services/core/java/com/android/server/ConnectivityService.java
@@ -270,21 +270,21 @@ public class ConnectivityService extends IConnectivityManager.Stub
     private static final boolean LOGD_BLOCKED_NETWORKINFO = true;
 
     /**
      * Default URL to use for {@link #getCaptivePortalServerUrl()}. This should not be changed
      * by OEMs for configuration purposes, as this value is overridden by
      * Settings.Global.CAPTIVE_PORTAL_HTTP_URL.
      * R.string.config_networkCaptivePortalServerUrl should be overridden instead for this purpose
      * (preferably via runtime resource overlays).
      */
     private static final String DEFAULT_CAPTIVE_PORTAL_HTTP_URL =
-            "http://connectivitycheck.gstatic.com/generate_204";
+            "http://connectivitycheck.grapheneos.network/generate_204";
 
     // TODO: create better separation between radio types and network types
 
     // how long to wait before switching back to a radio's default network
     private static final int RESTORE_DEFAULT_NETWORK_DELAY = 1 * 60 * 1000;
     // system property that can override the above value
     private static final String NETWORK_RESTORE_DELAY_PROP_NAME =
             "android.telephony.apn-restore";
 
     // How long to wait before putting up a "This network doesn't have an Internet connection,
diff --git a/tests/net/java/com/android/server/ConnectivityServiceTest.java b/tests/net/java/com/android/server/ConnectivityServiceTest.java
index a5554c740e7f7f42d61e9f2f670937549d08656e..7f78193974c709046d40b0a09f006c2e35d82630 100644
--- a/tests/net/java/com/android/server/ConnectivityServiceTest.java
+++ b/tests/net/java/com/android/server/ConnectivityServiceTest.java
@@ -4513,21 +4513,21 @@ public class ConnectivityServiceTest {
         try (DatagramSocket ignored = new DatagramSocket(port)) {
             return false;
         } catch (IOException alreadyInUse) {
             return true;
         }
     }
 
     @Test
     public void testGetCaptivePortalServerUrl() throws Exception {
         String url = mCm.getCaptivePortalServerUrl();
-        assertEquals("http://connectivitycheck.gstatic.com/generate_204", url);
+        assertEquals("http://connectivitycheck.grapheneos.network/generate_204", url);
     }
 
     private static class TestNetworkPinner extends NetworkPinner {
         public static boolean awaitPin(int timeoutMs) throws InterruptedException {
             synchronized(sLock) {
                 if (sNetwork == null) {
                     sLock.wait(timeoutMs);
                 }
                 return sNetwork != null;
             }

commit af2cdc54afff620f5526f17e43792decea356b6e
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Sun 2020-12-20 15:53:52-0500

    add check for empty TTS engine name
---
 core/java/android/speech/tts/TtsEngines.java | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/core/java/android/speech/tts/TtsEngines.java b/core/java/android/speech/tts/TtsEngines.java
index a8aea7c1eb599bcf8d66f0ef25099691c32eb8a2..3697b9494949d93a83c6fe1136140f465d3b3863 100644
--- a/core/java/android/speech/tts/TtsEngines.java
+++ b/core/java/android/speech/tts/TtsEngines.java
@@ -491,21 +491,21 @@ public class TtsEngines {
         }
     }
 
     /**
      * Parses a comma separated list of engine locale preferences. The list is of the
      * form {@code "engine_name_1:locale_1,engine_name_2:locale2"} and so on and
      * so forth. Returns null if the list is empty, malformed or if there is no engine
      * specific preference in the list.
      */
     private static String parseEnginePrefFromList(String prefValue, String engineName) {
-        if (TextUtils.isEmpty(prefValue)) {
+        if (TextUtils.isEmpty(prefValue) || TextUtils.isEmpty(engineName)) {
             return null;
         }
 
         String[] prefValues = prefValue.split(",");
 
         for (String value : prefValues) {
             final int delimiter = value.indexOf(':');
             if (delimiter > 0) {
                 if (engineName.equals(value.substring(0, delimiter))) {
                     return value.substring(delimiter + 1);

commit 946ef5bdb1b19eb05fb567b372b2def49e3574ff
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Sun 2021-01-03 08:50:34-0500

    use blue accent color
---
 core/res/res/values/colors_device_defaults.xml | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/core/res/res/values/colors_device_defaults.xml b/core/res/res/values/colors_device_defaults.xml
index 7a8f411992ce59462a63b3c5951f57a268658083..f1aa10146919a216267d1cd1cdd200c24603d52b 100644
--- a/core/res/res/values/colors_device_defaults.xml
+++ b/core/res/res/values/colors_device_defaults.xml
@@ -26,22 +26,22 @@
     <color name="primary_dark_device_default_settings">@color/primary_dark_material_settings</color>
     <color name="primary_dark_device_default_settings_light">@color/primary_dark_material_settings_light</color>
 
     <color name="navigation_bar_divider_device_default_settings">#1f000000</color>
 
     <color name="secondary_device_default_settings">@color/secondary_material_settings</color>
     <color name="secondary_device_default_settings_light">@color/secondary_material_settings_light</color>
     <color name="tertiary_device_default_settings">@color/tertiary_material_settings</color>
     <color name="quaternary_device_default_settings">@color/quaternary_material_settings</color>
 
-    <color name="accent_device_default_light">@color/accent_material_light</color>
-    <color name="accent_device_default_dark">@color/accent_material_dark</color>
+    <color name="accent_device_default_dark">#ff82b1ff</color> <!-- blue A100 -->
+    <color name="accent_device_default_light">#ff1e88e5</color> <!-- blue 600 -->
     <color name="accent_device_default">@color/accent_device_default_light</color>
 
     <color name="background_device_default_dark">@color/background_material_dark</color>
     <color name="background_device_default_light">@color/background_material_light</color>
     <color name="background_floating_device_default_dark">@color/background_floating_material_dark</color>
     <color name="background_floating_device_default_light">@color/background_floating_material_light</color>
 
     <!-- Error color -->
     <color name="error_color_device_default_dark">@color/error_color_material_dark</color>
     <color name="error_color_device_default_light">@color/error_color_material_light</color>

commit d4db450f2fedbbcefb0d82f3f98b74687626f659
Author: Marco Janotta <marcojntt@gmail.com>
Date:   Fri 2021-01-08 18:19:11+0100

    use black settings background in dark theme
    
    Use black for settings background when using the Dark theme. This has no
    effect on the Light theme.
---
 core/res/res/values/colors_device_defaults.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/core/res/res/values/colors_device_defaults.xml b/core/res/res/values/colors_device_defaults.xml
index f1aa10146919a216267d1cd1cdd200c24603d52b..404b624efd8f3a42afdac5bc0f96bdd0a23765ab 100644
--- a/core/res/res/values/colors_device_defaults.xml
+++ b/core/res/res/values/colors_device_defaults.xml
@@ -16,21 +16,21 @@
 
 <!-- Colors specific to DeviceDefault themes. These are mostly pass-throughs to enable
      overlaying new theme colors. -->
 <resources>
     <color name="primary_device_default_dark">@color/primary_material_dark</color>
     <color name="primary_device_default_light">@color/primary_material_light</color>
     <color name="primary_device_default_settings">@color/primary_material_settings</color>
     <color name="primary_device_default_settings_light">@color/primary_material_settings_light</color>
     <color name="primary_dark_device_default_dark">@color/primary_dark_material_dark</color>
     <color name="primary_dark_device_default_light">@color/primary_dark_material_light</color>
-    <color name="primary_dark_device_default_settings">@color/primary_dark_material_settings</color>
+    <color name="primary_dark_device_default_settings">#ff000000</color> <!-- Black -->
     <color name="primary_dark_device_default_settings_light">@color/primary_dark_material_settings_light</color>
 
     <color name="navigation_bar_divider_device_default_settings">#1f000000</color>
 
     <color name="secondary_device_default_settings">@color/secondary_material_settings</color>
     <color name="secondary_device_default_settings_light">@color/secondary_material_settings_light</color>
     <color name="tertiary_device_default_settings">@color/tertiary_material_settings</color>
     <color name="quaternary_device_default_settings">@color/quaternary_material_settings</color>
 
     <color name="accent_device_default_dark">#ff82b1ff</color> <!-- blue A100 -->

commit 53343813452f8f1f665f40701968c5cecb249daa
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Sun 2021-01-03 09:24:21-0500

    use black wallpaper by default
---
 core/res/res/drawable-nodpi/default_wallpaper.png   | Bin 489912 -> 235 bytes
 .../drawable-sw600dp-nodpi/default_wallpaper.png    | Bin 1197339 -> 625 bytes
 .../drawable-sw720dp-nodpi/default_wallpaper.png    | Bin 1930496 -> 974 bytes
 3 files changed, 0 insertions(+), 0 deletions(-)

diff --git a/core/res/res/drawable-nodpi/default_wallpaper.png b/core/res/res/drawable-nodpi/default_wallpaper.png
index ce546f0a11e7617627a93fec9a30e44489464224..d60ef83a86e37501e9aecdff42c6cd3609e54355 100644
Binary files a/core/res/res/drawable-nodpi/default_wallpaper.png and b/core/res/res/drawable-nodpi/default_wallpaper.png differ
diff --git a/core/res/res/drawable-sw600dp-nodpi/default_wallpaper.png b/core/res/res/drawable-sw600dp-nodpi/default_wallpaper.png
index af8e2512385a541569e0745d24361467eefeb5c9..7b7e940d10638a06fed603050803533e160d3bc2 100644
Binary files a/core/res/res/drawable-sw600dp-nodpi/default_wallpaper.png and b/core/res/res/drawable-sw600dp-nodpi/default_wallpaper.png differ
diff --git a/core/res/res/drawable-sw720dp-nodpi/default_wallpaper.png b/core/res/res/drawable-sw720dp-nodpi/default_wallpaper.png
index cb00d82a826fa820787239bfaae22ea28e211f62..68e63312cfa8371060748249e09fe19ee3da9d7a 100644
Binary files a/core/res/res/drawable-sw720dp-nodpi/default_wallpaper.png and b/core/res/res/drawable-sw720dp-nodpi/default_wallpaper.png differ

commit dcb855c083a57fedfc26eb1c67af6f1b926bc143
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Mon 2021-03-15 23:57:54-0400

    set GrapheneOS launcher as notification listener
---
 core/res/res/values/config.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/core/res/res/values/config.xml b/core/res/res/values/config.xml
index 348e9c8830e7f11132b2275bf255989313e10f75..668a170da6042febc8bf977158dfbe7b50425b02 100644
--- a/core/res/res/values/config.xml
+++ b/core/res/res/values/config.xml
@@ -3524,21 +3524,21 @@
          and followed the pertinent sections of the escrow tokens section of the CDD <link>-->
     <!-- TODO(b/35230407) complete the link field -->
     <bool name="config_allowEscrowTokenForTrustAgent">false</bool>
 
     <!-- A flattened ComponentName which corresponds to the only trust agent that should be enabled
          by default. If the default value is used, or set to an empty string, the restriction will
          not be applied. -->
     <string name="config_defaultTrustAgent" translatable="false"></string>
 
     <!-- Colon separated list of package names that should be granted Notification Listener access -->
-    <string name="config_defaultListenerAccessPackages" translatable="false"></string>
+    <string name="config_defaultListenerAccessPackages" translatable="false">com.android.launcher3</string>
 
     <!-- Maximum size, specified in pixels, to restrain the display space width to. Height and
          density will be scaled accordingly to maintain aspect ratio. A value of 0 indicates no
          constraint will be enforced. -->
     <integer name="config_maxUiWidth">0</integer>
 
     <!-- Whether the device supports quick settings and its associated APIs -->
     <bool name="config_quickSettingsSupported">true</bool>
 
     <!-- The component name, flattened to a string, for the default autofill service

commit e83b1a5827813d6b1466070e01b70eac2c90b454
Author: Dave Daynard <nardholio@gmail.com>
Date:   Sun 2013-12-15 15:35:04-0500

    Remove DUN requirement for tethering
    
    Change-Id: I296f303a23351e4ab29898895abfcd313c747db9
---
 .../com/android/networkstack/tethering/TetheringConfiguration.java | 7 +------
 1 file changed, 1 insertion(+), 6 deletions(-)

diff --git a/packages/Tethering/src/com/android/networkstack/tethering/TetheringConfiguration.java b/packages/Tethering/src/com/android/networkstack/tethering/TetheringConfiguration.java
index 409bd1f1c14733550a83391ce1fa3d82b55d9739..94265db5c69df8ce4f22d13e65d5920f740fc1f4 100644
--- a/packages/Tethering/src/com/android/networkstack/tethering/TetheringConfiguration.java
+++ b/packages/Tethering/src/com/android/networkstack/tethering/TetheringConfiguration.java
@@ -9,34 +9,32 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 package com.android.networkstack.tethering;
 
-import static android.content.Context.TELEPHONY_SERVICE;
 import static android.net.ConnectivityManager.TYPE_ETHERNET;
 import static android.net.ConnectivityManager.TYPE_MOBILE;
 import static android.net.ConnectivityManager.TYPE_MOBILE_DUN;
 import static android.net.ConnectivityManager.TYPE_MOBILE_HIPRI;
 import static android.provider.DeviceConfig.NAMESPACE_CONNECTIVITY;
 
 import android.content.Context;
 import android.content.res.Resources;
 import android.net.TetheringConfigurationParcel;
 import android.net.util.SharedLog;
 import android.provider.DeviceConfig;
 import android.telephony.SubscriptionManager;
-import android.telephony.TelephonyManager;
 import android.text.TextUtils;
 
 import com.android.internal.annotations.VisibleForTesting;
 
 import java.io.PrintWriter;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.StringJoiner;
 
@@ -273,24 +271,21 @@ public class TetheringConfiguration {
 
     private static String makeString(String[] strings) {
         if (strings == null) return "null";
         final StringJoiner sj = new StringJoiner(",", "[", "]");
         for (String s : strings) sj.add(s);
         return sj.toString();
     }
 
     /** Check whether dun is required. */
     public static boolean checkDunRequired(Context ctx) {
-        final TelephonyManager tm = (TelephonyManager) ctx.getSystemService(TELEPHONY_SERVICE);
-        // TelephonyManager would uses the active data subscription, which should be the one used
-        // by tethering.
-        return (tm != null) ? tm.isTetheringApnRequired() : false;
+        return false;
     }
 
     public int getOffloadPollInterval() {
         return mOffloadPollInterval;
     }
 
     public boolean isBpfOffloadEnabled() {
         return mEnableBpfOffload;
     }
 

commit 379f2d22d6edb1750f8e71d5db271764a4a00f6d
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Tue 2021-03-16 02:54:57-0400

    enable app compaction by default
---
 services/core/java/com/android/server/am/CachedAppOptimizer.java | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/services/core/java/com/android/server/am/CachedAppOptimizer.java b/services/core/java/com/android/server/am/CachedAppOptimizer.java
index 2f776fc55034f6fe26ff854c96b43e25f9b88433..66243a90c507c29cab8539bedea5286677aeb203 100644
--- a/services/core/java/com/android/server/am/CachedAppOptimizer.java
+++ b/services/core/java/com/android/server/am/CachedAppOptimizer.java
@@ -83,21 +83,21 @@ public final class CachedAppOptimizer {
     private static final int COMPACT_ACTION_FILE_FLAG = 1;
     private static final int COMPACT_ACTION_ANON_FLAG = 2;
     private static final int COMPACT_ACTION_FULL_FLAG = 3;
     private static final int COMPACT_ACTION_NONE_FLAG = 4;
     private static final String COMPACT_ACTION_NONE = "";
     private static final String COMPACT_ACTION_FILE = "file";
     private static final String COMPACT_ACTION_ANON = "anon";
     private static final String COMPACT_ACTION_FULL = "all";
 
     // Defaults for phenotype flags.
-    @VisibleForTesting static final Boolean DEFAULT_USE_COMPACTION = false;
+    @VisibleForTesting static final Boolean DEFAULT_USE_COMPACTION = true;
     @VisibleForTesting static final Boolean DEFAULT_USE_FREEZER = false;
     @VisibleForTesting static final int DEFAULT_COMPACT_ACTION_1 = COMPACT_ACTION_FILE_FLAG;
     @VisibleForTesting static final int DEFAULT_COMPACT_ACTION_2 = COMPACT_ACTION_FULL_FLAG;
     @VisibleForTesting static final long DEFAULT_COMPACT_THROTTLE_1 = 5_000;
     @VisibleForTesting static final long DEFAULT_COMPACT_THROTTLE_2 = 10_000;
     @VisibleForTesting static final long DEFAULT_COMPACT_THROTTLE_3 = 500;
     @VisibleForTesting static final long DEFAULT_COMPACT_THROTTLE_4 = 10_000;
     @VisibleForTesting static final long DEFAULT_COMPACT_THROTTLE_5 = 10 * 60 * 1000;
     @VisibleForTesting static final long DEFAULT_COMPACT_THROTTLE_6 = 10 * 60 * 1000;
     // The sampling rate to push app compaction events into statsd for upload.

commit 9f37ffd40482a1a7669937815d0b1a14e9faa0ea
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Tue 2021-03-16 02:56:10-0400

    enable app freezer by default
---
 services/core/java/com/android/server/am/CachedAppOptimizer.java | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/services/core/java/com/android/server/am/CachedAppOptimizer.java b/services/core/java/com/android/server/am/CachedAppOptimizer.java
index 66243a90c507c29cab8539bedea5286677aeb203..abd238bcd670c36af51f2518c7bfcc715d155ba8 100644
--- a/services/core/java/com/android/server/am/CachedAppOptimizer.java
+++ b/services/core/java/com/android/server/am/CachedAppOptimizer.java
@@ -84,21 +84,21 @@ public final class CachedAppOptimizer {
     private static final int COMPACT_ACTION_ANON_FLAG = 2;
     private static final int COMPACT_ACTION_FULL_FLAG = 3;
     private static final int COMPACT_ACTION_NONE_FLAG = 4;
     private static final String COMPACT_ACTION_NONE = "";
     private static final String COMPACT_ACTION_FILE = "file";
     private static final String COMPACT_ACTION_ANON = "anon";
     private static final String COMPACT_ACTION_FULL = "all";
 
     // Defaults for phenotype flags.
     @VisibleForTesting static final Boolean DEFAULT_USE_COMPACTION = true;
-    @VisibleForTesting static final Boolean DEFAULT_USE_FREEZER = false;
+    @VisibleForTesting static final Boolean DEFAULT_USE_FREEZER = true;
     @VisibleForTesting static final int DEFAULT_COMPACT_ACTION_1 = COMPACT_ACTION_FILE_FLAG;
     @VisibleForTesting static final int DEFAULT_COMPACT_ACTION_2 = COMPACT_ACTION_FULL_FLAG;
     @VisibleForTesting static final long DEFAULT_COMPACT_THROTTLE_1 = 5_000;
     @VisibleForTesting static final long DEFAULT_COMPACT_THROTTLE_2 = 10_000;
     @VisibleForTesting static final long DEFAULT_COMPACT_THROTTLE_3 = 500;
     @VisibleForTesting static final long DEFAULT_COMPACT_THROTTLE_4 = 10_000;
     @VisibleForTesting static final long DEFAULT_COMPACT_THROTTLE_5 = 10 * 60 * 1000;
     @VisibleForTesting static final long DEFAULT_COMPACT_THROTTLE_6 = 10 * 60 * 1000;
     // The sampling rate to push app compaction events into statsd for upload.
     @VisibleForTesting static final float DEFAULT_STATSD_SAMPLE_RATE = 0.1f;

commit 898f57bb011971a0a8a066a6238bfc35be921942
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Tue 2021-03-16 03:26:07-0400

    enable microphone/camera indicators by default
---
 .../src/com/android/systemui/privacy/PrivacyItemController.kt         | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/packages/SystemUI/src/com/android/systemui/privacy/PrivacyItemController.kt b/packages/SystemUI/src/com/android/systemui/privacy/PrivacyItemController.kt
index cd01cb703877a246a3046d3609013be58a2b41a8..7c78573e899ad3990fcc9299ae2591bd465fcf72 100644
--- a/packages/SystemUI/src/com/android/systemui/privacy/PrivacyItemController.kt
+++ b/packages/SystemUI/src/com/android/systemui/privacy/PrivacyItemController.kt
@@ -79,21 +79,21 @@ class PrivacyItemController @Inject constructor(
         @Synchronized get() = field.toList() // Returns a shallow copy of the list
         @Synchronized set
 
     fun isAllIndicatorsEnabled(): Boolean {
         return deviceConfigProxy.getBoolean(DeviceConfig.NAMESPACE_PRIVACY,
                 ALL_INDICATORS, false)
     }
 
     private fun isMicCameraEnabled(): Boolean {
         return deviceConfigProxy.getBoolean(DeviceConfig.NAMESPACE_PRIVACY,
-                MIC_CAMERA, false)
+                MIC_CAMERA, true)
     }
 
     private var currentUserIds = emptyList<Int>()
     private var listening = false
     private val callbacks = mutableListOf<WeakReference<Callback>>()
     private val internalUiExecutor = MyExecutor(WeakReference(this), uiExecutor)
 
     private val notifyChanges = Runnable {
         val list = privacyList
         callbacks.forEach { it.get()?.onPrivacyItemsChanged(list) }
@@ -116,21 +116,21 @@ class PrivacyItemController @Inject constructor(
                         (properties.keyset.contains(ALL_INDICATORS) ||
                                 properties.keyset.contains(MIC_CAMERA))) {
 
                     // Running on the ui executor so can iterate on callbacks
                     if (properties.keyset.contains(ALL_INDICATORS)) {
                         allIndicatorsAvailable = properties.getBoolean(ALL_INDICATORS, false)
                         callbacks.forEach { it.get()?.onFlagAllChanged(allIndicatorsAvailable) }
                     }
 
                     if (properties.keyset.contains(MIC_CAMERA)) {
-                        micCameraAvailable = properties.getBoolean(MIC_CAMERA, false)
+                        micCameraAvailable = properties.getBoolean(MIC_CAMERA, true)
                         callbacks.forEach { it.get()?.onFlagMicCameraChanged(micCameraAvailable) }
                     }
                     internalUiExecutor.updateListeningState()
                 }
             }
         }
 
     private val cb = object : AppOpsController.Callback {
         override fun onActiveStateChanged(
             code: Int,

commit 6323770b58d82cbabee8cc294323479d32c63a19
Author: pratyush <codelab@pratyush.dev>
Date:   Sun 2021-04-25 07:04:03+0530

    fix INTERNET enforcement for secondary users
    
    This code was not specifying the profile for the app so it wasn't
    working properly with INTERNET as a runtime permission.
---
 .../server/connectivity/PermissionMonitor.java       | 20 ++++++++++----------
 1 file changed, 10 insertions(+), 10 deletions(-)

diff --git a/services/core/java/com/android/server/connectivity/PermissionMonitor.java b/services/core/java/com/android/server/connectivity/PermissionMonitor.java
index 41c013b4b197f8ee2fdbbc3aa052f53b12427dd4..09cd274cbb052f67e2afa5bf5f219d49d9cb60bc 100644
--- a/services/core/java/com/android/server/connectivity/PermissionMonitor.java
+++ b/services/core/java/com/android/server/connectivity/PermissionMonitor.java
@@ -123,38 +123,39 @@ public class PermissionMonitor {
         }
     }
 
     private int getPermissionForUid(int uid) {
         int permission = 0;
         // Check all the packages for this UID. The UID has the permission if any of the
         // packages in it has the permission.
         String[] packages = mPackageManager.getPackagesForUid(uid);
         if (packages != null && packages.length > 0) {
             for (String name : packages) {
-                final PackageInfo app = getPackageInfo(name);
+                int userId = UserHandle.getUserId(uid);
+                final PackageInfo app = getPackageInfo(name, userId);
                 if (app != null && app.requestedPermissions != null) {
                     permission |= getNetdPermissionMask(app.requestedPermissions,
                           app.requestedPermissionsFlags);
                 }
             }
         } else {
             // The last package of this uid is removed from device. Clean the package up.
             permission = INetd.PERMISSION_UNINSTALLED;
         }
         return permission;
     }
 
     // implements OnRuntimePermissionStateChangedListener
     private void enforceINTERNETAsRuntimePermission(@NonNull String packageName,
             @UserIdInt int userId) {
         // userId is _not_ uid
-        int uid = mPackageManagerInternal.getPackageUid(packageName, 0, userId);
+        int uid = mPackageManagerInternal.getPackageUidInternal( packageName, GET_PERMISSIONS, userId);
         sendPackagePermissionsForUid(uid, getPermissionForUid(uid));
     }
 
     public PermissionMonitor(Context context, INetd netd) {
         mPackageManager = context.getPackageManager();
         mUserManager = (UserManager) context.getSystemService(Context.USER_SERVICE);
         mNetd = netd;
 
         mPackageManagerInternal = LocalServices.getService(
                 PackageManagerInternal.class);
@@ -357,26 +358,27 @@ public class PermissionMonitor {
             return;
         }
         mUsers.remove(user);
 
         Set<Integer> users = new HashSet<>();
         users.add(user);
         update(users, mApps, false);
     }
 
     @VisibleForTesting
-    protected Boolean highestPermissionForUid(Boolean currentPermission, String name) {
+    protected Boolean highestPermissionForUid(Boolean currentPermission, String name, int uid) {
         if (currentPermission == SYSTEM) {
             return currentPermission;
         }
         try {
-            final PackageInfo app = mPackageManager.getPackageInfo(name, GET_PERMISSIONS);
+            final PackageInfo app = mPackageManager.getPackageInfoAsUser(name, GET_PERMISSIONS,
+                    UserHandle.getUserId(uid));
             final boolean isNetwork = hasNetworkPermission(app);
             final boolean hasRestrictedPermission = hasRestrictedNetworkPermission(app);
             if (isNetwork || hasRestrictedPermission) {
                 currentPermission = hasRestrictedPermission;
             }
         } catch (NameNotFoundException e) {
             // App not found.
             loge("NameNotFoundException " + name);
         }
         return currentPermission;
@@ -386,21 +388,21 @@ public class PermissionMonitor {
      * Called when a package is added. See {link #ACTION_PACKAGE_ADDED}.
      *
      * @param packageName The name of the new package.
      * @param uid The uid of the new package.
      *
      * @hide
      */
     public synchronized void onPackageAdded(String packageName, int uid) {
         // If multiple packages share a UID (cf: android:sharedUserId) and ask for different
         // permissions, don't downgrade (i.e., if it's already SYSTEM, leave it as is).
-        final Boolean permission = highestPermissionForUid(mApps.get(uid), packageName);
+        final Boolean permission = highestPermissionForUid(mApps.get(uid), packageName, uid);
         if (permission != mApps.get(uid)) {
             mApps.put(uid, permission);
 
             Map<Integer, Boolean> apps = new HashMap<>();
             apps.put(uid, permission);
             update(mUsers, apps, true);
         }
 
         // If the newly-installed package falls within some VPN's uid range, update Netd with it.
         // This needs to happen after the mApps update above, since removeBypassingUids() depends
@@ -438,21 +440,21 @@ public class PermissionMonitor {
         // If the package has been removed from all users on the device, clear it form mAllApps.
         if (mPackageManager.getNameForUid(uid) == null) {
             mAllApps.remove(UserHandle.getAppId(uid));
         }
 
         Map<Integer, Boolean> apps = new HashMap<>();
         Boolean permission = null;
         String[] packages = mPackageManager.getPackagesForUid(uid);
         if (packages != null && packages.length > 0) {
             for (String name : packages) {
-                permission = highestPermissionForUid(permission, name);
+                permission = highestPermissionForUid(permission, name, uid);
                 if (permission == SYSTEM) {
                     // An app with this UID still has the SYSTEM permission.
                     // Therefore, this UID must already have the SYSTEM permission.
                     // Nothing to do.
                     return;
                 }
             }
         }
         if (permission == mApps.get(uid)) {
             // The permissions of this UID have not changed. Nothing to do.
@@ -478,25 +480,23 @@ public class PermissionMonitor {
                 permissions |= INetd.PERMISSION_INTERNET;
             }
             if (requestedPermissions[i].equals(UPDATE_DEVICE_STATS)
                     && ((requestedPermissionsFlags[i] & REQUESTED_PERMISSION_GRANTED) != 0)) {
                 permissions |= INetd.PERMISSION_UPDATE_DEVICE_STATS;
             }
         }
         return permissions;
     }
 
-    private PackageInfo getPackageInfo(String packageName) {
+    private PackageInfo getPackageInfo(String packageName, int userId) {
         try {
-            PackageInfo app = mPackageManager.getPackageInfo(packageName, GET_PERMISSIONS
-                    | MATCH_ANY_USER);
-            return app;
+            return mPackageManager.getPackageInfoAsUser(packageName, GET_PERMISSIONS, userId);
         } catch (NameNotFoundException e) {
             return null;
         }
     }
 
     /**
      * Called when a new set of UID ranges are added to an active VPN network
      *
      * @param iface The active VPN network's interface name
      * @param rangesToAdd The new UID ranges to be added to the network

commit 9c095654d06ea87aeba80b0b9f98eb351583d9c8
Author: Danny Lin <danny@kdrag0n.dev>
Date:   Mon 2020-11-02 22:31:26-0800

    overlays: Fix icon pack target packages for AOSP
    
    The new Pixel icon packs have their target launcher package set to Pixel
    Launcher, which is not present in AOSP. This causes the icon packs to
    not appear in ThemePicker.
    
    The older Circular icon pack's ThemePicker overlay also has the wrong
    target package, so fix that as well while we're at it.
    
    Change-Id: I7699f07325b943938c30ee559f1477166698b5fa
---
 .../overlays/IconPackCircularThemePickerOverlay/AndroidManifest.xml     | 2 +-
 packages/overlays/IconPackFilledThemePickerOverlay/AndroidManifest.xml  | 2 +-
 packages/overlays/IconPackKaiLauncherOverlay/AndroidManifest.xml        | 2 +-
 packages/overlays/IconPackKaiThemePickerOverlay/AndroidManifest.xml     | 2 +-
 packages/overlays/IconPackSamLauncherOverlay/AndroidManifest.xml        | 2 +-
 packages/overlays/IconPackSamThemePickerOverlay/AndroidManifest.xml     | 2 +-
 packages/overlays/IconPackVictorLauncherOverlay/AndroidManifest.xml     | 2 +-
 packages/overlays/IconPackVictorThemePickerOverlay/AndroidManifest.xml  | 2 +-
 8 files changed, 8 insertions(+), 8 deletions(-)

diff --git a/packages/overlays/IconPackCircularThemePickerOverlay/AndroidManifest.xml b/packages/overlays/IconPackCircularThemePickerOverlay/AndroidManifest.xml
index f7c5b550b193ce2abbd10ab0b142b70a0e307bd3..eae7de8f52845f5ee061e22d536a24e4f9370791 100644
--- a/packages/overlays/IconPackCircularThemePickerOverlay/AndroidManifest.xml
+++ b/packages/overlays/IconPackCircularThemePickerOverlay/AndroidManifest.xml
@@ -12,13 +12,13 @@
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 -->
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="com.android.theme.icon_pack.circular.themepicker"
     android:versionCode="1"
     android:versionName="1.0">
-    <overlay android:targetPackage="com.google.android.apps.wallpaper" android:category="android.theme.customization.icon_pack.themepicker" android:priority="1"/>
+    <overlay android:targetPackage="com.android.wallpaper" android:category="android.theme.customization.icon_pack.themepicker" android:priority="1"/>
     <application android:label="Circular" android:hasCode="false"/>
 </manifest>
diff --git a/packages/overlays/IconPackFilledThemePickerOverlay/AndroidManifest.xml b/packages/overlays/IconPackFilledThemePickerOverlay/AndroidManifest.xml
index 503a063ac86955bd1617ad5fe04c74f2fc89b88a..35023ab9653e8390827ff3b18fb29aa057dc26db 100644
--- a/packages/overlays/IconPackFilledThemePickerOverlay/AndroidManifest.xml
+++ b/packages/overlays/IconPackFilledThemePickerOverlay/AndroidManifest.xml
@@ -12,13 +12,13 @@
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 -->
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="com.android.theme.icon_pack.filled.themepicker"
     android:versionCode="1"
     android:versionName="1.0">
-    <overlay android:targetPackage="com.google.android.apps.wallpaper" android:category="android.theme.customization.icon_pack.themepicker" android:priority="1"/>
+    <overlay android:targetPackage="com.android.wallpaper" android:category="android.theme.customization.icon_pack.themepicker" android:priority="1"/>
     <application android:label="Filled" android:hasCode="false"/>
 </manifest>
diff --git a/packages/overlays/IconPackKaiLauncherOverlay/AndroidManifest.xml b/packages/overlays/IconPackKaiLauncherOverlay/AndroidManifest.xml
index 184a046cd29c683343bf24ade80d0d321236719e..5513bb9b6a3ca30aeebf4663cb2a355308cc18dd 100644
--- a/packages/overlays/IconPackKaiLauncherOverlay/AndroidManifest.xml
+++ b/packages/overlays/IconPackKaiLauncherOverlay/AndroidManifest.xml
@@ -10,13 +10,13 @@
   ~ Unless required by applicable law or agreed to in writing, software
   ~ distributed under the License is distributed on an "AS IS" BASIS,
   ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   ~ See the License for the specific language governing permissions and
   ~ limitations under the License.
   -->
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="com.android.theme.icon_pack.kai.launcher"
     android:versionCode="1"
     android:versionName="1.0">
-    <overlay android:targetPackage="com.google.android.apps.nexuslauncher" android:category="android.theme.customization.icon_pack.launcher" android:priority="1"/>
+    <overlay android:targetPackage="com.android.launcher3" android:category="android.theme.customization.icon_pack.launcher" android:priority="1"/>
     <application android:label="Kai" android:hasCode="false"/>
 </manifest>
diff --git a/packages/overlays/IconPackKaiThemePickerOverlay/AndroidManifest.xml b/packages/overlays/IconPackKaiThemePickerOverlay/AndroidManifest.xml
index 83b89858e8caac7bf974362f3d0f5687a263c8f8..d33f4bb991bbcc0011d3114240201c1324d91403 100644
--- a/packages/overlays/IconPackKaiThemePickerOverlay/AndroidManifest.xml
+++ b/packages/overlays/IconPackKaiThemePickerOverlay/AndroidManifest.xml
@@ -10,13 +10,13 @@
   ~ Unless required by applicable law or agreed to in writing, software
   ~ distributed under the License is distributed on an "AS IS" BASIS,
   ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   ~ See the License for the specific language governing permissions and
   ~ limitations under the License.
   -->
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="com.android.theme.icon_pack.kai.themepicker"
     android:versionCode="1"
     android:versionName="1.0">
-    <overlay android:targetPackage="com.google.android.apps.wallpaper" android:category="android.theme.customization.icon_pack.themepicker" android:priority="1"/>
+    <overlay android:targetPackage="com.android.wallpaper" android:category="android.theme.customization.icon_pack.themepicker" android:priority="1"/>
     <application android:label="Kai" android:hasCode="false"/>
 </manifest>
diff --git a/packages/overlays/IconPackSamLauncherOverlay/AndroidManifest.xml b/packages/overlays/IconPackSamLauncherOverlay/AndroidManifest.xml
index 2efa010da50404fd20dc5da1a74a21e404b9cb52..5f34ec6a91fbeb578139cee4d0167cbd5f24f017 100644
--- a/packages/overlays/IconPackSamLauncherOverlay/AndroidManifest.xml
+++ b/packages/overlays/IconPackSamLauncherOverlay/AndroidManifest.xml
@@ -10,13 +10,13 @@
   ~ Unless required by applicable law or agreed to in writing, software
   ~ distributed under the License is distributed on an "AS IS" BASIS,
   ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   ~ See the License for the specific language governing permissions and
   ~ limitations under the License.
   -->
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="com.android.theme.icon_pack.sam.launcher"
     android:versionCode="1"
     android:versionName="1.0">
-    <overlay android:targetPackage="com.google.android.apps.nexuslauncher" android:category="android.theme.customization.icon_pack.launcher" android:priority="1"/>
+    <overlay android:targetPackage="com.android.launcher3" android:category="android.theme.customization.icon_pack.launcher" android:priority="1"/>
     <application android:label="Sam" android:hasCode="false"/>
 </manifest>
diff --git a/packages/overlays/IconPackSamThemePickerOverlay/AndroidManifest.xml b/packages/overlays/IconPackSamThemePickerOverlay/AndroidManifest.xml
index 67446b2014c5a5e404db36f9a99e6e98c720f376..bdec2eea93aecfa74034ad3bc883ce613dfbe5f8 100644
--- a/packages/overlays/IconPackSamThemePickerOverlay/AndroidManifest.xml
+++ b/packages/overlays/IconPackSamThemePickerOverlay/AndroidManifest.xml
@@ -10,13 +10,13 @@
   ~ Unless required by applicable law or agreed to in writing, software
   ~ distributed under the License is distributed on an "AS IS" BASIS,
   ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   ~ See the License for the specific language governing permissions and
   ~ limitations under the License.
   -->
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="com.android.theme.icon_pack.sam.themepicker"
     android:versionCode="1"
     android:versionName="1.0">
-    <overlay android:targetPackage="com.google.android.apps.wallpaper" android:category="android.theme.customization.icon_pack.themepicker" android:priority="1"/>
+    <overlay android:targetPackage="com.android.wallpaper" android:category="android.theme.customization.icon_pack.themepicker" android:priority="1"/>
     <application android:label="Sam" android:hasCode="false"/>
 </manifest>
diff --git a/packages/overlays/IconPackVictorLauncherOverlay/AndroidManifest.xml b/packages/overlays/IconPackVictorLauncherOverlay/AndroidManifest.xml
index a7122eb87707c8215fbd6adca60daf0ff45afd9d..fc58ea068ac5a3b723fc1c5f50a58b9e36b01239 100644
--- a/packages/overlays/IconPackVictorLauncherOverlay/AndroidManifest.xml
+++ b/packages/overlays/IconPackVictorLauncherOverlay/AndroidManifest.xml
@@ -10,13 +10,13 @@
   ~ Unless required by applicable law or agreed to in writing, software
   ~ distributed under the License is distributed on an "AS IS" BASIS,
   ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   ~ See the License for the specific language governing permissions and
   ~ limitations under the License.
   -->
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="com.android.theme.icon_pack.victor.launcher"
     android:versionCode="1"
     android:versionName="1.0">
-    <overlay android:targetPackage="com.google.android.apps.nexuslauncher" android:category="android.theme.customization.icon_pack.launcher" android:priority="1"/>
+    <overlay android:targetPackage="com.android.launcher3" android:category="android.theme.customization.icon_pack.launcher" android:priority="1"/>
     <application android:label="Victor" android:hasCode="false"/>
 </manifest>
diff --git a/packages/overlays/IconPackVictorThemePickerOverlay/AndroidManifest.xml b/packages/overlays/IconPackVictorThemePickerOverlay/AndroidManifest.xml
index 9635febfd545470ac5f0a3b77feb967729fb2bbf..ee6a93d8e10feb8bd425dbea9cb5d8e9e13494cb 100644
--- a/packages/overlays/IconPackVictorThemePickerOverlay/AndroidManifest.xml
+++ b/packages/overlays/IconPackVictorThemePickerOverlay/AndroidManifest.xml
@@ -10,13 +10,13 @@
   ~ Unless required by applicable law or agreed to in writing, software
   ~ distributed under the License is distributed on an "AS IS" BASIS,
   ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   ~ See the License for the specific language governing permissions and
   ~ limitations under the License.
   -->
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="com.android.theme.icon_pack.victor.themepicker"
     android:versionCode="1"
     android:versionName="1.0">
-    <overlay android:targetPackage="com.google.android.apps.wallpaper" android:category="android.theme.customization.icon_pack.themepicker" android:priority="1"/>
+    <overlay android:targetPackage="com.android.wallpaper" android:category="android.theme.customization.icon_pack.themepicker" android:priority="1"/>
     <application android:label="Victor" android:hasCode="false"/>
 </manifest>

commit d50b294976ad318505b09584eadff8b0972ded93
Author: jhenrique09 <jhenrique09.mcz@hotmail.com>
Date:   Mon 2019-11-25 14:59:16+0000

    SystemUI: FingerprintDialogView: Use accent color instead of teal
    
    Change-Id: I97ab75e68693c071ec50e78a9159202f83cf284b
---
 packages/SystemUI/res/values-night/colors.xml | 2 +-
 packages/SystemUI/res/values/colors.xml       | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/packages/SystemUI/res/values-night/colors.xml b/packages/SystemUI/res/values-night/colors.xml
index cb9e178de24367da4beff1a6c38af44a41fa3509..b956956aa1ab49baa41cd1ee0556efb3412483cd 100644
--- a/packages/SystemUI/res/values-night/colors.xml
+++ b/packages/SystemUI/res/values-night/colors.xml
@@ -79,21 +79,21 @@
     <color name="global_screenshot_button_icon">@color/GM2_blue_300</color>
     <color name="global_screenshot_dismiss_background">@color/GM2_grey_800</color>
     <color name="global_screenshot_dismiss_foreground">#FFFFFF</color>
     <color name="global_screenshot_background_protection_start">#80000000</color> <!-- 50% black -->
 
     <!-- Media -->
     <color name="media_divider">#85ffffff</color>
 
     <!-- Biometric dialog colors -->
     <color name="biometric_dialog_gray">#ff888888</color>
-    <color name="biometric_dialog_accent">#ff80cbc4</color> <!-- light teal -->
+    <color name="biometric_dialog_accent">@*android:color/accent_device_default_dark</color>
     <color name="biometric_dialog_error">#fff28b82</color> <!-- red 300 -->
 
     <color name="GM2_green_500">#FF41Af6A</color>
     <color name="GM2_blue_500">#5195EA</color>
     <color name="GM2_red_500">#E25142</color>
     <color name="GM2_yellow_500">#F5C518</color>
 
     <!-- Icon color for user avatars in keyguard user switcher -->
     <color name="kg_user_switcher_avatar_icon_color">@android:color/background_light</color>
     <!-- Icon color for selected user avatars in keyguard user switcher -->
diff --git a/packages/SystemUI/res/values/colors.xml b/packages/SystemUI/res/values/colors.xml
index 994a18110260b3811efc38f6e5ba1c03dedc42d6..461fe2f9d4d2c1521ce677e1c5aaa3cecbb525a8 100644
--- a/packages/SystemUI/res/values/colors.xml
+++ b/packages/SystemUI/res/values/colors.xml
@@ -176,21 +176,21 @@
     <color name="zen_introduction">#ffffffff</color>
 
     <color name="smart_reply_button_text">@color/GM2_grey_700</color>
     <color name="smart_reply_button_text_dark_bg">@*android:color/notification_primary_text_color_dark</color>
     <color name="smart_reply_button_background">#ffffffff</color>
     <color name="smart_reply_button_stroke">#ffdadce0</color>
 
     <!-- Biometric dialog colors -->
     <color name="biometric_dialog_dim_color">#80000000</color>              <!-- 50% black -->
     <color name="biometric_dialog_gray">#ff757575</color>
-    <color name="biometric_dialog_accent">#ff008577</color>                 <!-- dark teal -->
+    <color name="biometric_dialog_accent">@*android:color/accent_device_default_light</color>
     <color name="biometric_dialog_error">#ffd93025</color>                  <!-- red 600 -->
 
     <!-- Logout button -->
     <color name="logout_button_bg_color">#ccffffff</color>
 
     <!-- Color for the Assistant invocation lights -->
     <color name="default_invocation_lights_color">#ffffffff</color>         <!-- white -->
 
     <!-- Global screenshot actions -->
     <color name="global_screenshot_button_background">#F5F5F5</color>

commit 1f802bfc4b58e919b77f718cf0e6e9ed2eab3b0c
Author: Isak Lilja <isak.lilja@sony.com>
Date:   Thu 2020-11-12 11:56:01+0100

    Use loadDrawableAsUser in MediaDataManager
    
    This fixes a SystemUI loopcrash when casting as a guest user.
    
    Bug: 173026465
    Test: Manual - install media app that can cast on guest user only,
          then cast from guest user.  SystemUI should not crash.
    Test: atest com.android.systemui.media
    Change-Id: I70f5de89a813c54a616eb701a02aa43272754580
---
 packages/SystemUI/src/com/android/systemui/media/MediaDataManager.kt | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/packages/SystemUI/src/com/android/systemui/media/MediaDataManager.kt b/packages/SystemUI/src/com/android/systemui/media/MediaDataManager.kt
index 2d7aafc497d8bac0d6967edba0c0f3b20eca7eb5..2cc31f0eba4d82939dd3e531101892d0b7d14f6d 100644
--- a/packages/SystemUI/src/com/android/systemui/media/MediaDataManager.kt
+++ b/packages/SystemUI/src/com/android/systemui/media/MediaDataManager.kt
@@ -435,21 +435,22 @@ class MediaDataManager(
                 }
             }
         }
         val bgColor = computeBackgroundColor(artworkBitmap)
 
         // App name
         val builder = Notification.Builder.recoverBuilder(context, notif)
         val app = builder.loadHeaderAppName()
 
         // App Icon
-        val smallIconDrawable: Drawable = sbn.notification.smallIcon.loadDrawable(context)
+        val smallIconDrawable: Drawable = sbn.notification.smallIcon.loadDrawableAsUser(context,
+                sbn.user.identifier)
 
         // Song name
         var song: CharSequence? = metadata?.getString(MediaMetadata.METADATA_KEY_DISPLAY_TITLE)
         if (song == null) {
             song = metadata?.getString(MediaMetadata.METADATA_KEY_TITLE)
         }
         if (song == null) {
             song = HybridGroupManager.resolveTitle(notif)
         }
 

commit bcc4327a6f896b53315129306affbba1584da9d3
Author: inthewaves <inthewaves@pm.me>
Date:   Thu 2021-05-06 20:42:26-0700

    use more loadDrawableAsUser in MediaDataManager
---
 packages/SystemUI/src/com/android/systemui/media/MediaDataManager.kt | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/packages/SystemUI/src/com/android/systemui/media/MediaDataManager.kt b/packages/SystemUI/src/com/android/systemui/media/MediaDataManager.kt
index 2cc31f0eba4d82939dd3e531101892d0b7d14f6d..f5fed3ab7de81b19cfd1b519ebfedf998468a2ce 100644
--- a/packages/SystemUI/src/com/android/systemui/media/MediaDataManager.kt
+++ b/packages/SystemUI/src/com/android/systemui/media/MediaDataManager.kt
@@ -417,21 +417,22 @@ class MediaDataManager(
         } else {
             Icon.createWithBitmap(artworkBitmap)
         }
         if (artWorkIcon != null) {
             // If we have art, get colors from that
             if (artworkBitmap == null) {
                 if (artWorkIcon.type == Icon.TYPE_BITMAP ||
                         artWorkIcon.type == Icon.TYPE_ADAPTIVE_BITMAP) {
                     artworkBitmap = artWorkIcon.bitmap
                 } else {
-                    val drawable: Drawable = artWorkIcon.loadDrawable(context)
+                    val drawable: Drawable = artWorkIcon.loadDrawableAsUser(context,
+                            sbn.user.identifier)
                     artworkBitmap = Bitmap.createBitmap(
                             drawable.intrinsicWidth,
                             drawable.intrinsicHeight,
                             Bitmap.Config.ARGB_8888)
                     val canvas = Canvas(artworkBitmap)
                     drawable.setBounds(0, 0, drawable.intrinsicWidth, drawable.intrinsicHeight)
                     drawable.draw(canvas)
                 }
             }
         }

commit 6f111831c26573d2c56e7d46ef3c9f9349abc509
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Fri 2021-05-14 22:52:17-0400

    use /generate_204 for HTTPS time updates
---
 core/res/res/values/config.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/core/res/res/values/config.xml b/core/res/res/values/config.xml
index 668a170da6042febc8bf977158dfbe7b50425b02..5805bd79772d2e7067a45087ef9c475903603532 100644
--- a/core/res/res/values/config.xml
+++ b/core/res/res/values/config.xml
@@ -2035,21 +2035,21 @@
          Defaults to true. If this is not appropriate for specific locales
          it should be disabled in that locale's resources. -->
     <bool name="config_actionMenuItemAllCaps">true</bool>
 
     <!-- Network derived time preferred protocol
          Supports "ntp" or "https" only now -->
     <string translatable="false" name="config_ntpMode">https</string>
     <!-- Remote server that can provide NTP responses. -->
     <string translatable="false" name="config_ntpServer">time.android.com</string>
     <!-- Remote server that can provide HTTPS time responses -->
-    <string translatable="false" name="config_httpsTimeServer">https://time.grapheneos.org</string>
+    <string translatable="false" name="config_httpsTimeServer">https://time.grapheneos.org/generate_204</string>
     <!-- Normal polling frequency in milliseconds -->
     <integer name="config_ntpPollingInterval">86400000</integer>
     <!-- Try-again polling interval in milliseconds, in case the network request failed -->
     <integer name="config_ntpPollingIntervalShorter">60000</integer>
     <!-- Toggle to update timestamp using NITZ -->
     <bool name="config_nitzTimeUpdate">false</bool>
     <!-- Number of times to try again with the shorter interval, before backing
          off until the normal polling interval. A value < 0 indicates infinite. -->
     <integer name="config_ntpRetry">3</integer>
     <!-- Timeout to wait for NTP server response in milliseconds. -->

commit c8b2f5a6e8e475d9e44c5342ab565e42bfaf4387
Author: inthewaves <inthewaves@pm.me>
Date:   Mon 2020-04-27 13:10:15-0700

    add option to disable fingerprint unlock
    
    There is already an implementation for disabling face unlock for the
    keyguard, so this commit follows that implementation.
---
 core/java/android/provider/Settings.java           |  6 ++++
 .../android/keyguard/KeyguardUpdateMonitor.java    | 12 ++++++--
 .../server/biometrics/BiometricService.java        | 32 +++++++++++++++++++++-
 3 files changed, 46 insertions(+), 4 deletions(-)

diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index e831c408eb31f66391a06a57b9b58aeb2d47a1db..bc65c14632cdd97e808d80c7358c248331b984c3 100755
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -8317,20 +8317,26 @@ public final class Settings {
          */
         public static final String FLASHLIGHT_AVAILABLE = "flashlight_available";
 
         /**
          * Whether or not flashlight is enabled.
          *
          * @hide
          */
         public static final String FLASHLIGHT_ENABLED = "flashlight_enabled";
 
+        /**
+         * Whether or not fingerprint unlock is allowed on Keyguard.
+         * @hide
+         */
+        public static final String FINGERPRINT_UNLOCK_KEYGUARD_ENABLED = "fingerprint_unlock_keyguard_enabled";
+
         /**
          * Whether or not face unlock is allowed on Keyguard.
          * @hide
          */
         public static final String FACE_UNLOCK_KEYGUARD_ENABLED = "face_unlock_keyguard_enabled";
 
         /**
          * Whether or not face unlock dismisses the keyguard.
          * @hide
          */
diff --git a/packages/SystemUI/src/com/android/keyguard/KeyguardUpdateMonitor.java b/packages/SystemUI/src/com/android/keyguard/KeyguardUpdateMonitor.java
index deaa4255c2f1e25916085410ada5bde5666ed618..296b36c76ea0ee0971547f1888a1141e599b6777 100644
--- a/packages/SystemUI/src/com/android/keyguard/KeyguardUpdateMonitor.java
+++ b/packages/SystemUI/src/com/android/keyguard/KeyguardUpdateMonitor.java
@@ -309,28 +309,32 @@ public class KeyguardUpdateMonitor implements TrustManager.TrustListener, Dumpab
 
     private final Handler mHandler;
 
     private final Observer<Integer> mRingerModeObserver = new Observer<Integer>() {
         @Override
         public void onChanged(Integer ringer) {
             mHandler.obtainMessage(MSG_RINGER_MODE_CHANGED, ringer, 0).sendToTarget();
         }
     };
 
+    private SparseBooleanArray mFingerprintSettingEnabledForUser = new SparseBooleanArray();
     private SparseBooleanArray mFaceSettingEnabledForUser = new SparseBooleanArray();
     private BiometricManager mBiometricManager;
     private IBiometricEnabledOnKeyguardCallback mBiometricEnabledCallback =
             new IBiometricEnabledOnKeyguardCallback.Stub() {
                 @Override
                 public void onChanged(BiometricSourceType type, boolean enabled, int userId)
                         throws RemoteException {
-                    if (type == BiometricSourceType.FACE) {
+                    if (type == BiometricSourceType.FINGERPRINT) {
+                        mFingerprintSettingEnabledForUser.put(userId, enabled);
+                        updateFingerprintListeningState();
+                    } else if (type == BiometricSourceType.FACE) {
                         mFaceSettingEnabledForUser.put(userId, enabled);
                         updateFaceListeningState();
                     }
                 }
             };
 
     @VisibleForTesting
     public PhoneStateListener mPhoneStateListener = new PhoneStateListener() {
         @Override
         public void onActiveDataSubscriptionIdChanged(int subId) {
@@ -1938,21 +1942,22 @@ public class KeyguardUpdateMonitor implements TrustManager.TrustListener, Dumpab
         final boolean allowedOnBouncer =
                 !(mFingerprintLockedOut && mBouncer && mCredentialAttempted);
 
         // Only listen if this KeyguardUpdateMonitor belongs to the primary user. There is an
         // instance of KeyguardUpdateMonitor for each user but KeyguardUpdateMonitor is user-aware.
         final boolean shouldListen = (mKeyguardIsVisible || !mDeviceInteractive ||
                 (mBouncer && !mKeyguardGoingAway) || mGoingToSleep ||
                 shouldListenForFingerprintAssistant() || (mKeyguardOccluded && mIsDreaming))
                 && !mSwitchingUser && !isFingerprintDisabled(getCurrentUser())
                 && (!mKeyguardGoingAway || !mDeviceInteractive) && mIsPrimaryUser
-                && allowedOnBouncer;
+                && allowedOnBouncer
+                && mFingerprintSettingEnabledForUser.get(getCurrentUser());
         return shouldListen;
     }
 
     /**
      * If face auth is allows to scan on this exact moment.
      */
     public boolean shouldListenForFace() {
         final boolean statusBarShadeLocked =
                 mStatusBarStateController.getState() == StatusBarState.SHADE_LOCKED;
         final boolean awakeKeyguard = mKeyguardIsVisible && mDeviceInteractive && !mGoingToSleep
@@ -2097,21 +2102,22 @@ public class KeyguardUpdateMonitor implements TrustManager.TrustListener, Dumpab
      *
      * @param userId User that's trying to unlock.
      * @return {@code true} if possible.
      */
     public boolean isUnlockingWithBiometricsPossible(int userId) {
         return isUnlockWithFacePossible(userId) || isUnlockWithFingerprintPossible(userId);
     }
 
     private boolean isUnlockWithFingerprintPossible(int userId) {
         return mFpm != null && mFpm.isHardwareDetected() && !isFingerprintDisabled(userId)
-                && mFpm.hasEnrolledTemplates(userId);
+                && mFpm.hasEnrolledTemplates(userId)
+                && mFingerprintSettingEnabledForUser.get(userId);
     }
 
     private boolean isUnlockWithFacePossible(int userId) {
         return isFaceAuthEnabledForUser(userId) && !isFaceDisabled(userId);
     }
 
     /**
      * If face hardware is available, user has enrolled and enabled auth via setting.
      */
     public boolean isFaceAuthEnabledForUser(int userId) {
diff --git a/services/core/java/com/android/server/biometrics/BiometricService.java b/services/core/java/com/android/server/biometrics/BiometricService.java
index 1217a507a8dcf715f9bc3cf993ef704aa73d392c..a6d5fa5763d4c7e87c88f34eeba327407b537aa1 100644
--- a/services/core/java/com/android/server/biometrics/BiometricService.java
+++ b/services/core/java/com/android/server/biometrics/BiometricService.java
@@ -458,66 +458,83 @@ public class BiometricService extends SystemService {
         }
     }
 
     @VisibleForTesting
     public static class SettingObserver extends ContentObserver {
 
         private static final boolean DEFAULT_KEYGUARD_ENABLED = true;
         private static final boolean DEFAULT_APP_ENABLED = true;
         private static final boolean DEFAULT_ALWAYS_REQUIRE_CONFIRMATION = false;
 
+        private final Uri FINGERPRINT_UNLOCK_KEYGUARD_ENABLED =
+                Settings.Secure.getUriFor(Settings.Secure.FINGERPRINT_UNLOCK_KEYGUARD_ENABLED);
         private final Uri FACE_UNLOCK_KEYGUARD_ENABLED =
                 Settings.Secure.getUriFor(Settings.Secure.FACE_UNLOCK_KEYGUARD_ENABLED);
         private final Uri FACE_UNLOCK_APP_ENABLED =
                 Settings.Secure.getUriFor(Settings.Secure.FACE_UNLOCK_APP_ENABLED);
         private final Uri FACE_UNLOCK_ALWAYS_REQUIRE_CONFIRMATION =
                 Settings.Secure.getUriFor(Settings.Secure.FACE_UNLOCK_ALWAYS_REQUIRE_CONFIRMATION);
 
         private final ContentResolver mContentResolver;
         private final List<BiometricService.EnabledOnKeyguardCallback> mCallbacks;
 
+        private final Map<Integer, Boolean> mFingerprintEnabledOnKeyguard = new HashMap<>();
         private final Map<Integer, Boolean> mFaceEnabledOnKeyguard = new HashMap<>();
         private final Map<Integer, Boolean> mFaceEnabledForApps = new HashMap<>();
         private final Map<Integer, Boolean> mFaceAlwaysRequireConfirmation = new HashMap<>();
 
         /**
          * Creates a content observer.
          *
          * @param handler The handler to run {@link #onChange} on, or null if none.
          */
         public SettingObserver(Context context, Handler handler,
                 List<BiometricService.EnabledOnKeyguardCallback> callbacks) {
             super(handler);
             mContentResolver = context.getContentResolver();
             mCallbacks = callbacks;
             updateContentObserver();
         }
 
         public void updateContentObserver() {
             mContentResolver.unregisterContentObserver(this);
+            mContentResolver.registerContentObserver(FINGERPRINT_UNLOCK_KEYGUARD_ENABLED,
+                    false /* notifyForDescendents */,
+                    this /* observer */,
+                    UserHandle.USER_ALL);
             mContentResolver.registerContentObserver(FACE_UNLOCK_KEYGUARD_ENABLED,
                     false /* notifyForDescendents */,
                     this /* observer */,
                     UserHandle.USER_ALL);
             mContentResolver.registerContentObserver(FACE_UNLOCK_APP_ENABLED,
                     false /* notifyForDescendents */,
                     this /* observer */,
                     UserHandle.USER_ALL);
             mContentResolver.registerContentObserver(FACE_UNLOCK_ALWAYS_REQUIRE_CONFIRMATION,
                     false /* notifyForDescendents */,
                     this /* observer */,
                     UserHandle.USER_ALL);
         }
 
         @Override
         public void onChange(boolean selfChange, Uri uri, int userId) {
-            if (FACE_UNLOCK_KEYGUARD_ENABLED.equals(uri)) {
+            if (FINGERPRINT_UNLOCK_KEYGUARD_ENABLED.equals(uri)) {
+                mFingerprintEnabledOnKeyguard.put(userId, Settings.Secure.getIntForUser(
+                                mContentResolver,
+                                Settings.Secure.FINGERPRINT_UNLOCK_KEYGUARD_ENABLED,
+                                DEFAULT_KEYGUARD_ENABLED ? 1 : 0 /* default */,
+                                userId) != 0);
+
+                if (userId == ActivityManager.getCurrentUser() && !selfChange) {
+                    notifyEnabledOnKeyguardCallbacks(userId);
+                }
+            } else if (FACE_UNLOCK_KEYGUARD_ENABLED.equals(uri)) {
                 mFaceEnabledOnKeyguard.put(userId, Settings.Secure.getIntForUser(
                                 mContentResolver,
                                 Settings.Secure.FACE_UNLOCK_KEYGUARD_ENABLED,
                                 DEFAULT_KEYGUARD_ENABLED ? 1 : 0 /* default */,
                                 userId) != 0);
 
                 if (userId == ActivityManager.getCurrentUser() && !selfChange) {
                     notifyEnabledOnKeyguardCallbacks(userId);
                 }
             } else if (FACE_UNLOCK_APP_ENABLED.equals(uri)) {
@@ -528,20 +545,28 @@ public class BiometricService extends SystemService {
                                 userId) != 0);
             } else if (FACE_UNLOCK_ALWAYS_REQUIRE_CONFIRMATION.equals(uri)) {
                 mFaceAlwaysRequireConfirmation.put(userId, Settings.Secure.getIntForUser(
                                 mContentResolver,
                                 Settings.Secure.FACE_UNLOCK_ALWAYS_REQUIRE_CONFIRMATION,
                                 DEFAULT_ALWAYS_REQUIRE_CONFIRMATION ? 1 : 0 /* default */,
                                 userId) != 0);
             }
         }
 
+        boolean getFingerprintEnabledOnKeyguard() {
+            final int user = ActivityManager.getCurrentUser();
+            if (!mFingerprintEnabledOnKeyguard.containsKey(user)) {
+                onChange(true /* selfChange */, FINGERPRINT_UNLOCK_KEYGUARD_ENABLED, user);
+            }
+            return mFingerprintEnabledOnKeyguard.get(user);
+        }
+
         public boolean getFaceEnabledOnKeyguard() {
             final int user = ActivityManager.getCurrentUser();
             if (!mFaceEnabledOnKeyguard.containsKey(user)) {
                 onChange(true /* selfChange */, FACE_UNLOCK_KEYGUARD_ENABLED, user);
             }
             return mFaceEnabledOnKeyguard.get(user);
         }
 
         public boolean getFaceEnabledForApps(int userId) {
             if (!mFaceEnabledForApps.containsKey(userId)) {
@@ -553,20 +578,23 @@ public class BiometricService extends SystemService {
         public boolean getFaceAlwaysRequireConfirmation(int userId) {
             if (!mFaceAlwaysRequireConfirmation.containsKey(userId)) {
                 onChange(true /* selfChange */, FACE_UNLOCK_ALWAYS_REQUIRE_CONFIRMATION, userId);
             }
             return mFaceAlwaysRequireConfirmation.get(userId);
         }
 
         public void notifyEnabledOnKeyguardCallbacks(int userId) {
             List<EnabledOnKeyguardCallback> callbacks = mCallbacks;
             for (int i = 0; i < callbacks.size(); i++) {
+                callbacks.get(i).notify(BiometricSourceType.FINGERPRINT,
+                        mFingerprintEnabledOnKeyguard.getOrDefault(userId, DEFAULT_KEYGUARD_ENABLED),
+                        userId);
                 callbacks.get(i).notify(BiometricSourceType.FACE,
                         mFaceEnabledOnKeyguard.getOrDefault(userId, DEFAULT_KEYGUARD_ENABLED),
                         userId);
             }
         }
     }
 
     final class EnabledOnKeyguardCallback implements IBinder.DeathRecipient {
 
         private final IBiometricEnabledOnKeyguardCallback mCallback;
@@ -838,20 +866,22 @@ public class BiometricService extends SystemService {
             mBiometricStrengthController.updateStrengths();
         }
 
         @Override // Binder call
         public void registerEnabledOnKeyguardCallback(
                 IBiometricEnabledOnKeyguardCallback callback, int callingUserId) {
             checkInternalPermission();
 
             mEnabledOnKeyguardCallbacks.add(new EnabledOnKeyguardCallback(callback));
             try {
+                callback.onChanged(BiometricSourceType.FINGERPRINT,
+                        mSettingObserver.getFingerprintEnabledOnKeyguard(), callingUserId);
                 callback.onChanged(BiometricSourceType.FACE,
                         mSettingObserver.getFaceEnabledOnKeyguard(), callingUserId);
             } catch (RemoteException e) {
                 Slog.w(TAG, "Remote exception", e);
             }
         }
 
         @Override // Binder call
         public void setActiveUser(int userId) {
             checkInternalPermission();

commit 76e50c6c6943a32378d821682802e4ea001795b1
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Wed 2021-06-09 09:26:00-0400

    Revert "DO NOT MERGE Disable privacy indicators"
    
    This reverts commit 2628cf48a15acf1f1126d15ba9d1b3c43d934967.
---
 .../systemui/privacy/PrivacyItemController.kt      |   8 +-
 .../PrivacyItemControllerFlagsTest.kt (new)        | 219 ++++++++++++++
 .../privacy/PrivacyItemControllerTest.kt (new)     | 329 +++++++++++++++++++++
 3 files changed, 554 insertions(+), 2 deletions(-)

diff --git a/packages/SystemUI/src/com/android/systemui/privacy/PrivacyItemController.kt b/packages/SystemUI/src/com/android/systemui/privacy/PrivacyItemController.kt
index 7c78573e899ad3990fcc9299ae2591bd465fcf72..61fe3e098946e9555b03bd0de3a17c5c2511b640 100644
--- a/packages/SystemUI/src/com/android/systemui/privacy/PrivacyItemController.kt
+++ b/packages/SystemUI/src/com/android/systemui/privacy/PrivacyItemController.kt
@@ -97,23 +97,23 @@ class PrivacyItemController @Inject constructor(
     private val notifyChanges = Runnable {
         val list = privacyList
         callbacks.forEach { it.get()?.onPrivacyItemsChanged(list) }
     }
 
     private val updateListAndNotifyChanges = Runnable {
         updatePrivacyList()
         uiExecutor.execute(notifyChanges)
     }
 
-    var allIndicatorsAvailable = false
+    var allIndicatorsAvailable = isAllIndicatorsEnabled()
         private set
-    var micCameraAvailable = false
+    var micCameraAvailable = isMicCameraEnabled()
         private set
 
     private val devicePropertiesChangedListener =
             object : DeviceConfig.OnPropertiesChangedListener {
         override fun onPropertiesChanged(properties: DeviceConfig.Properties) {
                 if (DeviceConfig.NAMESPACE_PRIVACY.equals(properties.getNamespace()) &&
                         (properties.keyset.contains(ALL_INDICATORS) ||
                                 properties.keyset.contains(MIC_CAMERA))) {
 
                     // Running on the ui executor so can iterate on callbacks
@@ -151,20 +151,24 @@ class PrivacyItemController @Inject constructor(
 
     @VisibleForTesting
     internal var userSwitcherReceiver = Receiver()
         set(value) {
             unregisterReceiver()
             field = value
             if (listening) registerReceiver()
         }
 
     init {
+        deviceConfigProxy.addOnPropertiesChangedListener(
+                DeviceConfig.NAMESPACE_PRIVACY,
+                uiExecutor,
+                devicePropertiesChangedListener)
         dumpManager.registerDumpable(TAG, this)
     }
 
     private fun unregisterReceiver() {
         broadcastDispatcher.unregisterReceiver(userSwitcherReceiver)
     }
 
     private fun registerReceiver() {
         broadcastDispatcher.registerReceiver(userSwitcherReceiver, intentFilter,
                 null /* handler */, UserHandle.ALL)
diff --git a/packages/SystemUI/tests/src/com/android/systemui/privacy/PrivacyItemControllerFlagsTest.kt b/packages/SystemUI/tests/src/com/android/systemui/privacy/PrivacyItemControllerFlagsTest.kt
new file mode 100644
index 0000000000000000000000000000000000000000..4ba29e6e02a61bae84ba775b2bad72a8022c69f5
--- /dev/null
+++ b/packages/SystemUI/tests/src/com/android/systemui/privacy/PrivacyItemControllerFlagsTest.kt
@@ -0,0 +1,219 @@
+/*
+ * Copyright (C) 2020 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.privacy
+
+import android.os.UserManager
+import android.provider.DeviceConfig
+import android.testing.AndroidTestingRunner
+import androidx.test.filters.SmallTest
+import com.android.internal.config.sysui.SystemUiDeviceConfigFlags
+import com.android.systemui.SysuiTestCase
+import com.android.systemui.appops.AppOpsController
+import com.android.systemui.broadcast.BroadcastDispatcher
+import com.android.systemui.dump.DumpManager
+import com.android.systemui.util.DeviceConfigProxy
+import com.android.systemui.util.DeviceConfigProxyFake
+import com.android.systemui.util.concurrency.FakeExecutor
+import com.android.systemui.util.time.FakeSystemClock
+import org.junit.Assert.assertFalse
+import org.junit.Assert.assertTrue
+import org.junit.Before
+import org.junit.Test
+import org.junit.runner.RunWith
+import org.mockito.ArgumentCaptor
+import org.mockito.Mock
+import org.mockito.Mockito
+import org.mockito.Mockito.anyBoolean
+import org.mockito.Mockito.atLeastOnce
+import org.mockito.Mockito.never
+import org.mockito.Mockito.verify
+import org.mockito.MockitoAnnotations
+
+@RunWith(AndroidTestingRunner::class)
+@SmallTest
+class PrivacyItemControllerFlagsTest : SysuiTestCase() {
+    companion object {
+        fun <T> capture(argumentCaptor: ArgumentCaptor<T>): T = argumentCaptor.capture()
+        fun <T> eq(value: T): T = Mockito.eq(value) ?: value
+        fun <T> any(): T = Mockito.any<T>()
+
+        private const val ALL_INDICATORS =
+                SystemUiDeviceConfigFlags.PROPERTY_PERMISSIONS_HUB_ENABLED
+        private const val MIC_CAMERA = SystemUiDeviceConfigFlags.PROPERTY_MIC_CAMERA_ENABLED
+    }
+
+    @Mock
+    private lateinit var appOpsController: AppOpsController
+    @Mock
+    private lateinit var callback: PrivacyItemController.Callback
+    @Mock
+    private lateinit var userManager: UserManager
+    @Mock
+    private lateinit var broadcastDispatcher: BroadcastDispatcher
+    @Mock
+    private lateinit var dumpManager: DumpManager
+
+    private lateinit var privacyItemController: PrivacyItemController
+    private lateinit var executor: FakeExecutor
+    private lateinit var deviceConfigProxy: DeviceConfigProxy
+
+    fun PrivacyItemController(): PrivacyItemController {
+        return PrivacyItemController(
+                appOpsController,
+                executor,
+                executor,
+                broadcastDispatcher,
+                deviceConfigProxy,
+                userManager,
+                dumpManager
+        )
+    }
+
+    @Before
+    fun setup() {
+        MockitoAnnotations.initMocks(this)
+        executor = FakeExecutor(FakeSystemClock())
+        deviceConfigProxy = DeviceConfigProxyFake()
+
+        privacyItemController = PrivacyItemController()
+        privacyItemController.addCallback(callback)
+
+        executor.runAllReady()
+    }
+
+    @Test
+    fun testNotListeningByDefault() {
+        assertFalse(privacyItemController.allIndicatorsAvailable)
+        assertFalse(privacyItemController.micCameraAvailable)
+
+        verify(appOpsController, never()).addCallback(any(), any())
+    }
+
+    @Test
+    fun testMicCameraChanged() {
+        changeMicCamera(true)
+        executor.runAllReady()
+
+        verify(callback).onFlagMicCameraChanged(true)
+        verify(callback, never()).onFlagAllChanged(anyBoolean())
+
+        assertTrue(privacyItemController.micCameraAvailable)
+        assertFalse(privacyItemController.allIndicatorsAvailable)
+    }
+
+    @Test
+    fun testAllChanged() {
+        changeAll(true)
+        executor.runAllReady()
+
+        verify(callback).onFlagAllChanged(true)
+        verify(callback, never()).onFlagMicCameraChanged(anyBoolean())
+
+        assertTrue(privacyItemController.allIndicatorsAvailable)
+        assertFalse(privacyItemController.micCameraAvailable)
+    }
+
+    @Test
+    fun testBothChanged() {
+        changeAll(true)
+        changeMicCamera(true)
+        executor.runAllReady()
+
+        verify(callback, atLeastOnce()).onFlagAllChanged(true)
+        verify(callback, atLeastOnce()).onFlagMicCameraChanged(true)
+
+        assertTrue(privacyItemController.allIndicatorsAvailable)
+        assertTrue(privacyItemController.micCameraAvailable)
+    }
+
+    @Test
+    fun testAll_listeningToAll() {
+        changeAll(true)
+        executor.runAllReady()
+
+        verify(appOpsController).addCallback(eq(PrivacyItemController.OPS), any())
+    }
+
+    @Test
+    fun testMicCamera_listening() {
+        changeMicCamera(true)
+        executor.runAllReady()
+
+        verify(appOpsController).addCallback(eq(PrivacyItemController.OPS), any())
+    }
+
+    @Test
+    fun testAll_listening() {
+        changeAll(true)
+        executor.runAllReady()
+
+        verify(appOpsController).addCallback(eq(PrivacyItemController.OPS), any())
+    }
+
+    @Test
+    fun testAllFalse_notListening() {
+        changeAll(true)
+        executor.runAllReady()
+        changeAll(false)
+        executor.runAllReady()
+
+        verify(appOpsController).removeCallback(any(), any())
+    }
+
+    @Test
+    fun testSomeListening_stillListening() {
+        changeAll(true)
+        changeMicCamera(true)
+        executor.runAllReady()
+        changeAll(false)
+        executor.runAllReady()
+
+        verify(appOpsController, never()).removeCallback(any(), any())
+    }
+
+    @Test
+    fun testAllDeleted_stopListening() {
+        changeAll(true)
+        executor.runAllReady()
+        changeAll(null)
+        executor.runAllReady()
+
+        verify(appOpsController).removeCallback(any(), any())
+    }
+
+    @Test
+    fun testMicDeleted_stopListening() {
+        changeMicCamera(true)
+        executor.runAllReady()
+        changeMicCamera(null)
+        executor.runAllReady()
+
+        verify(appOpsController).removeCallback(any(), any())
+    }
+
+    private fun changeMicCamera(value: Boolean?) = changeProperty(MIC_CAMERA, value)
+    private fun changeAll(value: Boolean?) = changeProperty(ALL_INDICATORS, value)
+
+    private fun changeProperty(name: String, value: Boolean?) {
+        deviceConfigProxy.setProperty(
+                DeviceConfig.NAMESPACE_PRIVACY,
+                name,
+                value?.toString(),
+                false
+        )
+    }
+}
\ No newline at end of file
diff --git a/packages/SystemUI/tests/src/com/android/systemui/privacy/PrivacyItemControllerTest.kt b/packages/SystemUI/tests/src/com/android/systemui/privacy/PrivacyItemControllerTest.kt
new file mode 100644
index 0000000000000000000000000000000000000000..5c5df2639cdd94004803fae7b9a4d89b614b0056
--- /dev/null
+++ b/packages/SystemUI/tests/src/com/android/systemui/privacy/PrivacyItemControllerTest.kt
@@ -0,0 +1,329 @@
+/*
+ * Copyright (C) 2020 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.privacy
+
+import android.app.ActivityManager
+import android.app.AppOpsManager
+import android.content.Intent
+import android.content.pm.UserInfo
+import android.os.UserHandle
+import android.os.UserManager
+import android.provider.DeviceConfig
+import android.testing.AndroidTestingRunner
+import android.testing.TestableLooper.RunWithLooper
+import androidx.test.filters.SmallTest
+import com.android.internal.config.sysui.SystemUiDeviceConfigFlags
+import com.android.systemui.SysuiTestCase
+import com.android.systemui.appops.AppOpItem
+import com.android.systemui.appops.AppOpsController
+import com.android.systemui.broadcast.BroadcastDispatcher
+import com.android.systemui.dump.DumpManager
+import com.android.systemui.util.DeviceConfigProxy
+import com.android.systemui.util.DeviceConfigProxyFake
+import com.android.systemui.util.concurrency.FakeExecutor
+import com.android.systemui.util.time.FakeSystemClock
+import org.hamcrest.Matchers.hasItem
+import org.hamcrest.Matchers.not
+import org.hamcrest.Matchers.nullValue
+import org.junit.Assert.assertEquals
+import org.junit.Assert.assertThat
+import org.junit.Assert.assertTrue
+import org.junit.Before
+import org.junit.Test
+import org.junit.runner.RunWith
+import org.mockito.ArgumentCaptor
+import org.mockito.ArgumentMatchers.anyInt
+import org.mockito.ArgumentMatchers.anyList
+import org.mockito.Captor
+import org.mockito.Mock
+import org.mockito.Mockito
+import org.mockito.Mockito.atLeastOnce
+import org.mockito.Mockito.doReturn
+import org.mockito.Mockito.mock
+import org.mockito.Mockito.never
+import org.mockito.Mockito.reset
+import org.mockito.Mockito.verify
+import org.mockito.Mockito.verifyNoMoreInteractions
+import org.mockito.MockitoAnnotations
+
+@RunWith(AndroidTestingRunner::class)
+@SmallTest
+@RunWithLooper
+class PrivacyItemControllerTest : SysuiTestCase() {
+
+    companion object {
+        val CURRENT_USER_ID = ActivityManager.getCurrentUser()
+        val TEST_UID = CURRENT_USER_ID * UserHandle.PER_USER_RANGE
+        const val TEST_PACKAGE_NAME = "test"
+
+        private const val ALL_INDICATORS =
+                SystemUiDeviceConfigFlags.PROPERTY_PERMISSIONS_HUB_ENABLED
+        private const val MIC_CAMERA = SystemUiDeviceConfigFlags.PROPERTY_MIC_CAMERA_ENABLED
+        fun <T> capture(argumentCaptor: ArgumentCaptor<T>): T = argumentCaptor.capture()
+        fun <T> eq(value: T): T = Mockito.eq(value) ?: value
+        fun <T> any(): T = Mockito.any<T>()
+    }
+
+    @Mock
+    private lateinit var appOpsController: AppOpsController
+    @Mock
+    private lateinit var callback: PrivacyItemController.Callback
+    @Mock
+    private lateinit var userManager: UserManager
+    @Mock
+    private lateinit var broadcastDispatcher: BroadcastDispatcher
+    @Mock
+    private lateinit var dumpManager: DumpManager
+    @Captor
+    private lateinit var argCaptor: ArgumentCaptor<List<PrivacyItem>>
+    @Captor
+    private lateinit var argCaptorCallback: ArgumentCaptor<AppOpsController.Callback>
+
+    private lateinit var privacyItemController: PrivacyItemController
+    private lateinit var executor: FakeExecutor
+    private lateinit var deviceConfigProxy: DeviceConfigProxy
+
+    fun PrivacyItemController(): PrivacyItemController {
+        return PrivacyItemController(
+                appOpsController,
+                executor,
+                executor,
+                broadcastDispatcher,
+                deviceConfigProxy,
+                userManager,
+                dumpManager
+        )
+    }
+
+    @Before
+    fun setup() {
+        MockitoAnnotations.initMocks(this)
+        executor = FakeExecutor(FakeSystemClock())
+        deviceConfigProxy = DeviceConfigProxyFake()
+
+        changeAll(true)
+
+        doReturn(listOf(object : UserInfo() {
+            init {
+                id = CURRENT_USER_ID
+            }
+        })).`when`(userManager).getProfiles(anyInt())
+
+        privacyItemController = PrivacyItemController()
+    }
+
+    @Test
+    fun testSetListeningTrueByAddingCallback() {
+        privacyItemController.addCallback(callback)
+        executor.runAllReady()
+        verify(appOpsController).addCallback(eq(PrivacyItemController.OPS),
+                any())
+        verify(callback).onPrivacyItemsChanged(anyList())
+    }
+
+    @Test
+    fun testSetListeningFalseByRemovingLastCallback() {
+        privacyItemController.addCallback(callback)
+        executor.runAllReady()
+        verify(appOpsController, never()).removeCallback(any(),
+                any())
+        privacyItemController.removeCallback(callback)
+        executor.runAllReady()
+        verify(appOpsController).removeCallback(eq(PrivacyItemController.OPS),
+                any())
+        verify(callback).onPrivacyItemsChanged(emptyList())
+    }
+
+    @Test
+    fun testDistinctItems() {
+        doReturn(listOf(AppOpItem(AppOpsManager.OP_CAMERA, TEST_UID, "", 0),
+                AppOpItem(AppOpsManager.OP_CAMERA, TEST_UID, "", 1)))
+                .`when`(appOpsController).getActiveAppOpsForUser(anyInt())
+
+        privacyItemController.addCallback(callback)
+        executor.runAllReady()
+        verify(callback).onPrivacyItemsChanged(capture(argCaptor))
+        assertEquals(1, argCaptor.value.size)
+    }
+
+    @Test
+    fun testRegisterReceiver_allUsers() {
+        privacyItemController.addCallback(callback)
+        executor.runAllReady()
+        verify(broadcastDispatcher, atLeastOnce()).registerReceiver(
+                eq(privacyItemController.userSwitcherReceiver), any(), eq(null), eq(UserHandle.ALL))
+        verify(broadcastDispatcher, never())
+                .unregisterReceiver(eq(privacyItemController.userSwitcherReceiver))
+    }
+
+    @Test
+    fun testReceiver_ACTION_USER_FOREGROUND() {
+        privacyItemController.userSwitcherReceiver.onReceive(context,
+                Intent(Intent.ACTION_USER_SWITCHED))
+        executor.runAllReady()
+        verify(userManager).getProfiles(anyInt())
+    }
+
+    @Test
+    fun testReceiver_ACTION_MANAGED_PROFILE_ADDED() {
+        privacyItemController.userSwitcherReceiver.onReceive(context,
+                Intent(Intent.ACTION_MANAGED_PROFILE_AVAILABLE))
+        executor.runAllReady()
+        verify(userManager).getProfiles(anyInt())
+    }
+
+    @Test
+    fun testReceiver_ACTION_MANAGED_PROFILE_REMOVED() {
+        privacyItemController.userSwitcherReceiver.onReceive(context,
+                Intent(Intent.ACTION_MANAGED_PROFILE_UNAVAILABLE))
+        executor.runAllReady()
+        verify(userManager).getProfiles(anyInt())
+    }
+
+    @Test
+    fun testAddMultipleCallbacks() {
+        val otherCallback = mock(PrivacyItemController.Callback::class.java)
+        privacyItemController.addCallback(callback)
+        executor.runAllReady()
+        verify(callback).onPrivacyItemsChanged(anyList())
+
+        privacyItemController.addCallback(otherCallback)
+        executor.runAllReady()
+        verify(otherCallback).onPrivacyItemsChanged(anyList())
+        // Adding a callback should not unnecessarily call previous ones
+        verifyNoMoreInteractions(callback)
+    }
+
+    @Test
+    fun testMultipleCallbacksAreUpdated() {
+        doReturn(emptyList<AppOpItem>()).`when`(appOpsController).getActiveAppOpsForUser(anyInt())
+
+        val otherCallback = mock(PrivacyItemController.Callback::class.java)
+        privacyItemController.addCallback(callback)
+        privacyItemController.addCallback(otherCallback)
+        executor.runAllReady()
+        reset(callback)
+        reset(otherCallback)
+
+        verify(appOpsController).addCallback(any(), capture(argCaptorCallback))
+        argCaptorCallback.value.onActiveStateChanged(0, TEST_UID, "", true)
+        executor.runAllReady()
+        verify(callback).onPrivacyItemsChanged(anyList())
+        verify(otherCallback).onPrivacyItemsChanged(anyList())
+    }
+
+    @Test
+    fun testRemoveCallback() {
+        doReturn(emptyList<AppOpItem>()).`when`(appOpsController).getActiveAppOpsForUser(anyInt())
+        val otherCallback = mock(PrivacyItemController.Callback::class.java)
+        privacyItemController.addCallback(callback)
+        privacyItemController.addCallback(otherCallback)
+        executor.runAllReady()
+        executor.runAllReady()
+        reset(callback)
+        reset(otherCallback)
+
+        verify(appOpsController).addCallback(any(), capture(argCaptorCallback))
+        privacyItemController.removeCallback(callback)
+        argCaptorCallback.value.onActiveStateChanged(0, TEST_UID, "", true)
+        executor.runAllReady()
+        verify(callback, never()).onPrivacyItemsChanged(anyList())
+        verify(otherCallback).onPrivacyItemsChanged(anyList())
+    }
+
+    @Test
+    fun testListShouldNotHaveNull() {
+        doReturn(listOf(AppOpItem(AppOpsManager.OP_ACTIVATE_VPN, TEST_UID, "", 0),
+                        AppOpItem(AppOpsManager.OP_COARSE_LOCATION, TEST_UID, "", 0)))
+                .`when`(appOpsController).getActiveAppOpsForUser(anyInt())
+        privacyItemController.addCallback(callback)
+        executor.runAllReady()
+        executor.runAllReady()
+
+        verify(callback).onPrivacyItemsChanged(capture(argCaptor))
+        assertEquals(1, argCaptor.value.size)
+        assertThat(argCaptor.value, not(hasItem(nullValue())))
+    }
+
+    @Test
+    fun testListShouldBeCopy() {
+        val list = listOf(PrivacyItem(PrivacyType.TYPE_CAMERA,
+                PrivacyApplication("", TEST_UID)))
+        privacyItemController.privacyList = list
+        val privacyList = privacyItemController.privacyList
+        assertEquals(list, privacyList)
+        assertTrue(list !== privacyList)
+    }
+
+    @Test
+    fun testNotListeningWhenIndicatorsDisabled() {
+        changeAll(false)
+        privacyItemController.addCallback(callback)
+        executor.runAllReady()
+        verify(appOpsController, never()).addCallback(eq(PrivacyItemController.OPS),
+                any())
+    }
+
+    @Test
+    fun testNotSendingLocationWhenOnlyMicCamera() {
+        changeAll(false)
+        changeMicCamera(true)
+        executor.runAllReady()
+
+        doReturn(listOf(AppOpItem(AppOpsManager.OP_CAMERA, TEST_UID, "", 0),
+                AppOpItem(AppOpsManager.OP_COARSE_LOCATION, TEST_UID, "", 0)))
+                .`when`(appOpsController).getActiveAppOpsForUser(anyInt())
+
+        privacyItemController.addCallback(callback)
+        executor.runAllReady()
+
+        verify(callback).onPrivacyItemsChanged(capture(argCaptor))
+
+        assertEquals(1, argCaptor.value.size)
+        assertEquals(PrivacyType.TYPE_CAMERA, argCaptor.value[0].privacyType)
+    }
+
+    @Test
+    fun testNotUpdated_LocationChangeWhenOnlyMicCamera() {
+        doReturn(listOf(AppOpItem(AppOpsManager.OP_COARSE_LOCATION, TEST_UID, "", 0)))
+                .`when`(appOpsController).getActiveAppOpsForUser(anyInt())
+
+        privacyItemController.addCallback(callback)
+        changeAll(false)
+        changeMicCamera(true)
+        executor.runAllReady()
+        reset(callback) // Clean callback
+
+        verify(appOpsController).addCallback(any(), capture(argCaptorCallback))
+        argCaptorCallback.value.onActiveStateChanged(
+                AppOpsManager.OP_FINE_LOCATION, TEST_UID, TEST_PACKAGE_NAME, true)
+
+        verify(callback, never()).onPrivacyItemsChanged(any())
+    }
+
+    private fun changeMicCamera(value: Boolean?) = changeProperty(MIC_CAMERA, value)
+    private fun changeAll(value: Boolean?) = changeProperty(ALL_INDICATORS, value)
+
+    private fun changeProperty(name: String, value: Boolean?) {
+        deviceConfigProxy.setProperty(
+                DeviceConfig.NAMESPACE_PRIVACY,
+                name,
+                value?.toString(),
+                false
+        )
+    }
+}
\ No newline at end of file

commit 8ade39c2c06facd99b4a0ce4e6a31a0a5cefc30c
Author: anupritaisno1 <www.anuprita804@gmail.com>
Date:   Mon 2021-06-07 22:04:53+0100

    automatically reboot device after timeout if set
---
 core/java/android/provider/Settings.java           |  7 +++++
 data/etc/com.android.systemui.xml                  |  1 +
 packages/SystemUI/AndroidManifest.xml              |  3 ++
 .../systemui/keyguard/KeyguardViewMediator.java    | 35 ++++++++++++++++++++++
 4 files changed, 46 insertions(+)

diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index bc65c14632cdd97e808d80c7358c248331b984c3..b15fb8a97be736b72abb084937d19288e43d8a7b 100755
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -14433,20 +14433,27 @@ public final class Settings {
          * Values are:
          * 0: off - All 5G NSA tracking indications are off when the screen is off.
          * 1: extended - All 5G NSA tracking indications are on when the screen is off as long as
          *    the device is camped on 5G NSA (5G icon is showing in status bar).
          *    If the device is not camped on 5G NSA, tracking indications are off.
          * 2: always on - All 5G NSA tracking indications are on whether the screen is on or off.
          * @hide
          */
         public static final String NR_NSA_TRACKING_SCREEN_OFF_MODE =
                 "nr_nsa_tracking_screen_off_mode";
+
+        /**
+         * Whether to automatically reboot the device after a user defined timeout
+         *
+         * @hide
+         */
+        public static final String SETTINGS_REBOOT_AFTER_TIMEOUT = "settings_reboot_after_timeout";
     }
 
     /**
      * Configuration system settings, containing settings which are applied identically for all
      * defined users. Only Android can read these and only a specific configuration service can
      * write these.
      *
      * @hide
      */
     public static final class Config extends NameValueTable {
diff --git a/data/etc/com.android.systemui.xml b/data/etc/com.android.systemui.xml
index 06f1dae30cd3404778b2814540baf3e1fc9f0830..7019b1829b5b72c317bcf2ce49676e1e9340dee5 100644
--- a/data/etc/com.android.systemui.xml
+++ b/data/etc/com.android.systemui.xml
@@ -41,20 +41,21 @@
         <permission name="android.permission.MOUNT_UNMOUNT_FILESYSTEMS"/>
         <permission name="android.permission.OBSERVE_NETWORK_POLICY"/>
         <permission name="android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS" />
         <permission name="android.permission.OVERRIDE_WIFI_CONFIG"/>
         <permission name="android.permission.PACKAGE_USAGE_STATS" />
         <permission name="android.permission.READ_DREAM_STATE"/>
         <permission name="android.permission.READ_FRAME_BUFFER"/>
         <permission name="android.permission.READ_NETWORK_USAGE_HISTORY"/>
         <permission name="android.permission.READ_PRIVILEGED_PHONE_STATE"/>
         <permission name="android.permission.REAL_GET_TASKS"/>
+        <permission name="android.permission.REBOOT"/>
         <permission name="android.permission.REQUEST_NETWORK_SCORES"/>
         <permission name="android.permission.RECEIVE_MEDIA_RESOURCE_USAGE"/>
         <permission name="android.permission.START_ACTIVITIES_FROM_BACKGROUND" />
         <permission name="android.permission.START_ACTIVITY_AS_CALLER"/>
         <permission name="android.permission.START_TASKS_FROM_RECENTS"/>
         <permission name="android.permission.STATUS_BAR"/>
         <permission name="android.permission.STOP_APP_SWITCHES"/>
         <permission name="android.permission.SUBSTITUTE_NOTIFICATION_APP_NAME"/>
         <permission name="android.permission.TETHER_PRIVILEGED"/>
         <permission name="android.permission.UPDATE_APP_OPS_STATS"/>
diff --git a/packages/SystemUI/AndroidManifest.xml b/packages/SystemUI/AndroidManifest.xml
index ce1eea0a715ceb5565fa1f2aa2f5b5d77a72ed8d..6aef9272aa5af7cb112d204dd86e1682272fd542 100644
--- a/packages/SystemUI/AndroidManifest.xml
+++ b/packages/SystemUI/AndroidManifest.xml
@@ -263,20 +263,23 @@
 
     <!-- Permission to register process observer -->
     <uses-permission android:name="android.permission.SET_ACTIVITY_WATCHER"/>
 
     <!-- Restore settings (used by QS) even if they have been modified -->
     <uses-permission android:name="android.permission.MODIFY_SETTINGS_OVERRIDEABLE_BY_RESTORE" />
 
     <!-- Permission to make accessibility service access Bubbles -->
     <uses-permission android:name="android.permission.ADD_TRUSTED_DISPLAY" />
 
+    <!-- Permission to allow rebooting the device after a user configurable amount of time -->
+    <uses-permission android:name="android.permission.REBOOT" />
+
 
     <protected-broadcast android:name="com.android.settingslib.action.REGISTER_SLICE_RECEIVER" />
     <protected-broadcast android:name="com.android.settingslib.action.UNREGISTER_SLICE_RECEIVER" />
     <protected-broadcast android:name="com.android.settings.flashlight.action.FLASHLIGHT_CHANGED" />
 
     <application
         android:name=".SystemUIApplication"
         android:persistent="true"
         android:allowClearUserData="false"
         android:backupAgent=".backup.BackupHelper"
diff --git a/packages/SystemUI/src/com/android/systemui/keyguard/KeyguardViewMediator.java b/packages/SystemUI/src/com/android/systemui/keyguard/KeyguardViewMediator.java
index 75f4809d752f5c06dc4be84446486aa037f7dacf..11a9730f18cb286f6beee489fae96592719dc0c2 100644
--- a/packages/SystemUI/src/com/android/systemui/keyguard/KeyguardViewMediator.java
+++ b/packages/SystemUI/src/com/android/systemui/keyguard/KeyguardViewMediator.java
@@ -150,20 +150,22 @@ import dagger.Lazy;
  */
 public class KeyguardViewMediator extends SystemUI implements Dumpable {
     private static final int KEYGUARD_DISPLAY_TIMEOUT_DELAY_DEFAULT = 30000;
     private static final long KEYGUARD_DONE_PENDING_TIMEOUT_MS = 3000;
 
     private static final boolean DEBUG = true;
     private static final boolean DEBUG_SIM_STATES = KeyguardConstants.DEBUG_SIM_STATES;
 
     private final static String TAG = "KeyguardViewMediator";
 
+    private static final String DELAYED_REBOOT_ACTION =
+        "com.android.internal.policy.impl.PhoneWindowManager.DELAYED_REBOOT";
     private static final String DELAYED_KEYGUARD_ACTION =
         "com.android.internal.policy.impl.PhoneWindowManager.DELAYED_KEYGUARD";
     private static final String DELAYED_LOCK_PROFILE_ACTION =
             "com.android.internal.policy.impl.PhoneWindowManager.DELAYED_LOCK";
 
     private static final String SYSTEMUI_PERMISSION = "com.android.systemui.permission.SELF";
 
     // used for handler messages
     private static final int SHOW = 1;
     private static final int HIDE = 2;
@@ -269,20 +271,25 @@ public class KeyguardViewMediator extends SystemUI implements Dumpable {
      * Helps remember whether the screen has turned on since the last time
      * it turned off due to timeout. see {@link #onScreenTurnedOff(int)}
      */
     private int mDelayedShowingSequence;
 
     /**
      * Simiar to {@link #mDelayedProfileShowingSequence}, but it is for profile case.
      */
     private int mDelayedProfileShowingSequence;
 
+    /**
+     * Same as {@link #mDelayedProfileShowingSequence}, but used for our reboot implementation
+     */
+    private int mDelayedRebootSequence;
+
     /**
      * If the user has disabled the keyguard, then requests to exit, this is
      * how we'll ultimately let them know whether it was successful.  We use this
      * var being non-null as an indicator that there is an in progress request.
      */
     private IKeyguardExitCallback mExitSecureCallback;
     private final DismissCallbackRegistry mDismissCallbackRegistry;
 
     // the properties of the keyguard
 
@@ -763,20 +770,21 @@ public class KeyguardViewMediator extends SystemUI implements Dumpable {
         mShowKeyguardWakeLock = mPM.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "show keyguard");
         mShowKeyguardWakeLock.setReferenceCounted(false);
 
         IntentFilter filter = new IntentFilter();
         filter.addAction(Intent.ACTION_SHUTDOWN);
         mBroadcastDispatcher.registerReceiver(mBroadcastReceiver, filter);
 
         final IntentFilter delayedActionFilter = new IntentFilter();
         delayedActionFilter.addAction(DELAYED_KEYGUARD_ACTION);
         delayedActionFilter.addAction(DELAYED_LOCK_PROFILE_ACTION);
+        delayedActionFilter.addAction(DELAYED_REBOOT_ACTION);
         mContext.registerReceiver(mDelayedLockBroadcastReceiver, delayedActionFilter,
                 SYSTEMUI_PERMISSION, null /* scheduler */);
 
         InjectionInflationController injectionInflationController =
                 new InjectionInflationController(SystemUIFactory.getInstance().getRootComponent());
         mKeyguardDisplayManager = new KeyguardDisplayManager(mContext,
                 injectionInflationController);
 
         mAlarmManager = (AlarmManager) mContext.getSystemService(Context.ALARM_SERVICE);
 
@@ -1034,37 +1042,53 @@ public class KeyguardViewMediator extends SystemUI implements Dumpable {
                     lockIntent.addFlags(Intent.FLAG_RECEIVER_FOREGROUND);
                     PendingIntent lockSender = PendingIntent.getBroadcast(
                             mContext, 0, lockIntent, PendingIntent.FLAG_CANCEL_CURRENT);
                     mAlarmManager.setExactAndAllowWhileIdle(AlarmManager.ELAPSED_REALTIME_WAKEUP,
                             userWhen, lockSender);
                 }
             }
         }
     }
 
+    private void doRebootForOwnerAfterTimeoutIfEnabled(long rebootAfterTimeout) {
+        long when = SystemClock.elapsedRealtime() + rebootAfterTimeout;
+        Intent rebootIntent = new Intent(DELAYED_REBOOT_ACTION);
+        rebootIntent.putExtra("seq", mDelayedRebootSequence);
+        rebootIntent.addFlags(Intent.FLAG_RECEIVER_FOREGROUND);
+        PendingIntent sender = PendingIntent.getBroadcast(mContext,
+                0, rebootIntent, PendingIntent.FLAG_CANCEL_CURRENT);
+        mAlarmManager.setExactAndAllowWhileIdle(AlarmManager.ELAPSED_REALTIME_WAKEUP, when, sender);
+        if (DEBUG) Log.d(TAG, "setting alarm to reboot device, timeout = "
+                         + String.valueOf(rebootAfterTimeout));
+    }
+
     private void doKeyguardForChildProfilesLocked() {
         UserManager um = UserManager.get(mContext);
         for (int profileId : um.getEnabledProfileIds(UserHandle.myUserId())) {
             if (mLockPatternUtils.isSeparateProfileChallengeEnabled(profileId)) {
                 lockProfile(profileId);
             }
         }
     }
 
     private void cancelDoKeyguardLaterLocked() {
         mDelayedShowingSequence++;
     }
 
     private void cancelDoKeyguardForChildProfilesLocked() {
         mDelayedProfileShowingSequence++;
     }
 
+    private void cancelDoRebootForOwnerAfterTimeoutIfEnabled() {
+        mDelayedRebootSequence++;
+    }
+
     /**
      * Let's us know when the device is waking up.
      */
     public void onStartedWakingUp() {
         Trace.beginSection("KeyguardViewMediator#onStartedWakingUp");
 
         // TODO: Rename all screen off/on references to interactive/sleeping
         synchronized (this) {
             mDeviceInteractive = true;
             cancelDoKeyguardLaterLocked();
@@ -1402,20 +1426,24 @@ public class KeyguardViewMediator extends SystemUI implements Dumpable {
                 if (DEBUG) Log.d(TAG, "Not showing lock screen since just decrypted");
                 // Without this, settings is not enabled until the lock screen first appears
                 setShowingLocked(false);
                 hideLocked();
                 return;
             }
         }
 
         if (DEBUG) Log.d(TAG, "doKeyguard: showing the lock screen");
         showLocked(options);
+        final long rebootAfterTimeout = Settings.Global.getLong(mContext.getContentResolver(), Settings.Global.SETTINGS_REBOOT_AFTER_TIMEOUT, 0);
+        if (rebootAfterTimeout >= 1) {
+            doRebootForOwnerAfterTimeoutIfEnabled(rebootAfterTimeout);
+        }
     }
 
     private void lockProfile(int userId) {
         mTrustManager.setDeviceLockedForUser(userId, true);
     }
 
     private boolean shouldWaitForProvisioning() {
         return !mUpdateMonitor.isDeviceProvisioned() && !isSecure();
     }
 
@@ -1562,20 +1590,26 @@ public class KeyguardViewMediator extends SystemUI implements Dumpable {
             } else if (DELAYED_LOCK_PROFILE_ACTION.equals(intent.getAction())) {
                 final int sequence = intent.getIntExtra("seq", 0);
                 int userId = intent.getIntExtra(Intent.EXTRA_USER_ID, 0);
                 if (userId != 0) {
                     synchronized (KeyguardViewMediator.this) {
                         if (mDelayedProfileShowingSequence == sequence) {
                             lockProfile(userId);
                         }
                     }
                 }
+            } else if (DELAYED_REBOOT_ACTION.equals(intent.getAction())) {
+                final int sequence = intent.getIntExtra("seq", 0);
+                if (sequence == mDelayedRebootSequence) {
+                    PowerManager pm = mContext.getSystemService(PowerManager.class);
+                    pm.reboot(null);
+                }
             }
         }
     };
 
     private final BroadcastReceiver mBroadcastReceiver = new BroadcastReceiver() {
         @Override
         public void onReceive(Context context, Intent intent) {
             if (Intent.ACTION_SHUTDOWN.equals(intent.getAction())) {
                 synchronized (KeyguardViewMediator.this){
                     mShuttingDown = true;
@@ -1999,20 +2033,21 @@ public class KeyguardViewMediator extends SystemUI implements Dumpable {
             }
 
             setShowingLocked(false);
             mWakeAndUnlocking = false;
             mDismissCallbackRegistry.notifyDismissSucceeded();
             mKeyguardViewControllerLazy.get().hide(startTime, fadeoutDuration);
             resetKeyguardDonePendingLocked();
             mHideAnimationRun = false;
             adjustStatusBarLocked();
             sendUserPresentBroadcast();
+            cancelDoRebootForOwnerAfterTimeoutIfEnabled();
         }
         Trace.endSection();
     }
 
     private void adjustStatusBarLocked() {
         adjustStatusBarLocked(false /* forceHideHomeRecentsButtons */,
                 false /* forceClearFlags */);
     }
 
     private void adjustStatusBarLocked(boolean forceHideHomeRecentsButtons,

commit 63822af3ef187067226c7436d262dc2c291a4273
Author: pratyush <codelab@pratyush.dev>
Date:   Thu 2021-07-01 12:26:49+0530

    Bluetooth auto turn off
---
 core/java/android/provider/Settings.java           |  6 ++
 .../android/server/BluetoothManagerService.java    | 76 ++++++++++++++++++++++
 2 files changed, 82 insertions(+)

diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index b15fb8a97be736b72abb084937d19288e43d8a7b..5faef6c2d141955410ea7695f4e83d0daeecde5f 100755
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -14434,20 +14434,26 @@ public final class Settings {
          * 0: off - All 5G NSA tracking indications are off when the screen is off.
          * 1: extended - All 5G NSA tracking indications are on when the screen is off as long as
          *    the device is camped on 5G NSA (5G icon is showing in status bar).
          *    If the device is not camped on 5G NSA, tracking indications are off.
          * 2: always on - All 5G NSA tracking indications are on whether the screen is on or off.
          * @hide
          */
         public static final String NR_NSA_TRACKING_SCREEN_OFF_MODE =
                 "nr_nsa_tracking_screen_off_mode";
 
+        /**
+         * The amount of time in milliseconds before bluetooth is turned off
+         * @hide
+         */
+        public static final String BLUETOOTH_OFF_TIMEOUT = "bluetooth_off_timeout";
+
         /**
          * Whether to automatically reboot the device after a user defined timeout
          *
          * @hide
          */
         public static final String SETTINGS_REBOOT_AFTER_TIMEOUT = "settings_reboot_after_timeout";
     }
 
     /**
      * Configuration system settings, containing settings which are applied identically for all
diff --git a/services/core/java/com/android/server/BluetoothManagerService.java b/services/core/java/com/android/server/BluetoothManagerService.java
index 9ce7cf27f9ff802f1f566602bcc673985b4582ab..9598faa3a667661972183aac6ee2a80834223f69 100644
--- a/services/core/java/com/android/server/BluetoothManagerService.java
+++ b/services/core/java/com/android/server/BluetoothManagerService.java
@@ -14,20 +14,21 @@
  * limitations under the License.
  */
 
 package com.android.server;
 
 import static android.content.pm.PackageManager.MATCH_SYSTEM_ONLY;
 import static android.os.UserHandle.USER_SYSTEM;
 
 import android.Manifest;
 import android.app.ActivityManager;
+import android.app.AlarmManager;
 import android.app.AppGlobals;
 import android.app.AppOpsManager;
 import android.bluetooth.BluetoothAdapter;
 import android.bluetooth.BluetoothProfile;
 import android.bluetooth.BluetoothProtoEnums;
 import android.bluetooth.IBluetooth;
 import android.bluetooth.IBluetoothCallback;
 import android.bluetooth.IBluetoothGatt;
 import android.bluetooth.IBluetoothHeadset;
 import android.bluetooth.IBluetoothManager;
@@ -505,20 +506,95 @@ class BluetoothManagerService extends IBluetoothManager.Stub {
             systemUiUid = pm.getPackageUid(pm.getSystemUiServiceComponent().getPackageName(),
                     MATCH_SYSTEM_ONLY, USER_SYSTEM);
         }
         if (systemUiUid >= 0) {
             Slog.d(TAG, "Detected SystemUiUid: " + Integer.toString(systemUiUid));
         } else {
             // Some platforms, such as wearables do not have a system ui.
             Slog.w(TAG, "Unable to resolve SystemUI's UID.");
         }
         mSystemUiUid = systemUiUid;
+
+        /*
+        * System sends ACTION_STATE_CHANGED broadcast soon as any state
+        * changes. what it means in action is we don't have to take care if
+        * device reboot while BT has not been turned off automatically.
+        *
+        * A word of warning though it does not check if device as been
+        * unlocked or not what it means in real life is if you have sometime
+        * like tile ble tracker configured it will turn off BT. As result tile
+        * tracking will fail because of auto timeout. this behaviour can be
+        * changed with UserManager.isUnlocked()
+        * */
+        IntentFilter btFilter = new IntentFilter();
+        btFilter.addAction(BluetoothAdapter.ACTION_STATE_CHANGED);
+        btFilter.addAction(BluetoothAdapter.ACTION_CONNECTION_STATE_CHANGED);
+        btFilter.addAction(BluetoothAdapter.ACTION_LOCAL_NAME_CHANGED);
+        context.registerReceiver(new BroadcastReceiver() {
+            @Override
+            public void onReceive(Context broadcastContext, Intent intent) {
+                reconfigureBtTimeoutListener();
+            }
+        }, btFilter);
+
+        context.getContentResolver().registerContentObserver(
+                Settings.Global.getUriFor(Settings.Global.BLUETOOTH_OFF_TIMEOUT),
+                false,
+                new ContentObserver(new Handler(context.getMainLooper())) {
+                    @Override
+                    public void onChange(boolean selfChange) {
+                        super.onChange(selfChange);
+                        reconfigureBtTimeoutListener();
+                    }
+                });
+    }
+
+    private static final AlarmManager.OnAlarmListener listener = () -> {
+        BluetoothAdapter bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
+        if (isBtOnAndDisconnected() && bluetoothAdapter != null) {
+            bluetoothAdapter.disable();
+        }
+    };
+
+    // If device is still connected cancel timeout for now and wait for disconnected signal
+    private void reconfigureBtTimeoutListener() {
+        AlarmManager alarmManager = (AlarmManager) mContext.getSystemService(Context.ALARM_SERVICE);
+        if (isTimeoutEnabled(mContext) && isBtOnAndDisconnected()) {
+            final long timeout = SystemClock.elapsedRealtime() + btTimeoutDurationInMilli(mContext);
+            alarmManager.cancel(listener);
+            alarmManager.setExact(
+                    AlarmManager.ELAPSED_REALTIME_WAKEUP,
+                    timeout,
+                    "BT Idle Timeout",
+                    listener,
+                    new Handler(mContext.getMainLooper())
+            );
+        } else {
+            alarmManager.cancel(listener);
+        }
+    }
+
+    private static boolean isBtOnAndDisconnected() {
+        BluetoothAdapter bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
+        return bluetoothAdapter != null && bluetoothAdapter.getState() == BluetoothAdapter.STATE_ON
+                && bluetoothAdapter.getState() == BluetoothAdapter.STATE_ON &&
+                bluetoothAdapter.getConnectionState() == BluetoothAdapter.STATE_DISCONNECTED;
+    }
+
+    private static long btTimeoutDurationInMilli(Context context) {
+        return Settings.Global.getLong(context.getContentResolver(),
+                Settings.Global.BLUETOOTH_OFF_TIMEOUT, 0);
+    }
+
+    /** Zero is default and means disabled */
+    private static boolean isTimeoutEnabled(Context context) {
+        return 0 != btTimeoutDurationInMilli(context);
     }
 
     /**
      *  Returns true if airplane mode is currently on
      */
     private boolean isAirplaneModeOn() {
         return Settings.Global.getInt(mContext.getContentResolver(),
                 Settings.Global.AIRPLANE_MODE_ON, 0) == 1;
     }
 

commit 6b1e4053d15ea3dfc4ca22ef2d86cfd050f9076e
Author: Pratyush <codelab@pratyush.dev>
Date:   Tue 2021-07-06 18:18:06+0530

    Wi-Fi auto turn off
---
 core/java/android/provider/Settings.java           |  6 ++
 .../android/server/net/NetworkStatsService.java    | 70 ++++++++++++++++++++++
 2 files changed, 76 insertions(+)

diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index 5faef6c2d141955410ea7695f4e83d0daeecde5f..a9698f64476ab71efda6375da0689be16bacab96 100755
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -14440,20 +14440,26 @@ public final class Settings {
          */
         public static final String NR_NSA_TRACKING_SCREEN_OFF_MODE =
                 "nr_nsa_tracking_screen_off_mode";
 
         /**
          * The amount of time in milliseconds before bluetooth is turned off
          * @hide
          */
         public static final String BLUETOOTH_OFF_TIMEOUT = "bluetooth_off_timeout";
 
+        /**
+         * The amount of time in milliseconds before Wi-Fi is turned off
+         * @hide
+         */
+        public static final String WIFI_OFF_TIMEOUT = "wifi_off_timeout";
+
         /**
          * Whether to automatically reboot the device after a user defined timeout
          *
          * @hide
          */
         public static final String SETTINGS_REBOOT_AFTER_TIMEOUT = "settings_reboot_after_timeout";
     }
 
     /**
      * Configuration system settings, containing settings which are applied identically for all
diff --git a/services/core/java/com/android/server/net/NetworkStatsService.java b/services/core/java/com/android/server/net/NetworkStatsService.java
index ba9f486092f7f0bc3673a7ec6bef51949b0f0724..24cba592a59dd931b7bae8bb55e5a89f8933c00a 100644
--- a/services/core/java/com/android/server/net/NetworkStatsService.java
+++ b/services/core/java/com/android/server/net/NetworkStatsService.java
@@ -80,41 +80,44 @@ import android.annotation.Nullable;
 import android.app.AlarmManager;
 import android.app.PendingIntent;
 import android.app.usage.NetworkStatsManager;
 import android.content.BroadcastReceiver;
 import android.content.ContentResolver;
 import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageManager;
+import android.database.ContentObserver;
 import android.net.DataUsageRequest;
 import android.net.INetworkManagementEventObserver;
 import android.net.INetworkStatsService;
 import android.net.INetworkStatsSession;
 import android.net.LinkProperties;
 import android.net.Network;
 import android.net.NetworkCapabilities;
 import android.net.NetworkIdentity;
 import android.net.NetworkInfo;
 import android.net.NetworkStack;
 import android.net.NetworkState;
 import android.net.NetworkStats;
 import android.net.NetworkStats.NonMonotonicObserver;
 import android.net.NetworkStatsHistory;
 import android.net.NetworkTemplate;
 import android.net.TrafficStats;
 import android.net.netstats.provider.INetworkStatsProvider;
 import android.net.netstats.provider.INetworkStatsProviderCallback;
 import android.net.netstats.provider.NetworkStatsProvider;
+import android.net.wifi.WifiManager;
 import android.os.BestClock;
 import android.os.Binder;
+import android.os.Bundle;
 import android.os.DropBoxManager;
 import android.os.Environment;
 import android.os.Handler;
 import android.os.HandlerExecutor;
 import android.os.HandlerThread;
 import android.os.IBinder;
 import android.os.INetworkManagementService;
 import android.os.Looper;
 import android.os.Message;
 import android.os.Messenger;
@@ -431,20 +434,87 @@ public class NetworkStatsService extends INetworkStatsService.Stub {
         mSystemDir = Objects.requireNonNull(systemDir, "missing systemDir");
         mBaseDir = Objects.requireNonNull(baseDir, "missing baseDir");
         mUseBpfTrafficStats = new File("/sys/fs/bpf/map_netd_app_uid_stats_map").exists();
         mDeps = Objects.requireNonNull(deps, "missing Dependencies");
 
         final HandlerThread handlerThread = mDeps.makeHandlerThread();
         handlerThread.start();
         mHandler = new NetworkStatsHandler(handlerThread.getLooper());
         mNetworkStatsSubscriptionsMonitor = deps.makeSubscriptionsMonitor(mContext,
                 new HandlerExecutor(mHandler), this);
+
+        IntentFilter wifiFilter = new IntentFilter();
+        wifiFilter.addAction(WifiManager.NETWORK_STATE_CHANGED_ACTION);
+        wifiFilter.addAction(WifiManager.WIFI_STATE_CHANGED_ACTION);
+
+        context.registerReceiver(
+                new BroadcastReceiver() {
+                    @Override
+                    public void onReceive(Context context, Intent intent) {
+                        if (WifiManager.NETWORK_STATE_CHANGED_ACTION.equals(intent.getAction())) {
+                            Bundle bundle = intent.getExtras();
+                            NetworkInfo networkInfo = bundle.getParcelable(WifiManager.EXTRA_NETWORK_INFO);
+                            isWifiConnected = networkInfo != null && networkInfo.isConnected();
+                        }
+                        reconfigureWiFiTimeoutListener();
+                    }
+                }, wifiFilter
+        );
+
+        context.getContentResolver().registerContentObserver(
+                Global.getUriFor(Global.WIFI_OFF_TIMEOUT),
+                false,
+                new ContentObserver(new Handler(context.getMainLooper())) {
+                    @Override
+                    public void onChange(boolean selfChange) {
+                        super.onChange(selfChange);
+                        reconfigureWiFiTimeoutListener();
+                    }
+                });
+    }
+
+    private static boolean isWifiConnected = false;
+    private final AlarmManager.OnAlarmListener listener = this::turnOffWifi;
+
+    private void turnOffWifi() {
+        WifiManager wifiManager = (WifiManager) mContext.getSystemService(Context.WIFI_SERVICE);
+        if (isWifiTimeoutEnabled(mContext) && wifiManager.isWifiEnabled()) {
+            // setWifiEnabled(enabled) is deprecated, though AOSP still uses
+            // it internally and system apps/services are exempted
+            wifiManager.setWifiEnabled(false);
+        }
+    }
+
+    private void reconfigureWiFiTimeoutListener() {
+        if (isWifiTimeoutEnabled(mContext) && !isWifiConnected) {
+            final long timeout = SystemClock.elapsedRealtime() + wifiTimeoutDurationInMilli(mContext);
+            mAlarmManager.cancel(listener);
+            mAlarmManager.setExact(
+                    AlarmManager.ELAPSED_REALTIME_WAKEUP,
+                    timeout,
+                    "Wi-Fi Idle Timeout",
+                    listener,
+                    new Handler(mContext.getMainLooper())
+            );
+        } else {
+            mAlarmManager.cancel(listener);
+        }
+    }
+
+    private static long wifiTimeoutDurationInMilli(Context mContext) {
+        return Settings.Global.getLong(mContext.getContentResolver(),
+                Global.WIFI_OFF_TIMEOUT, 0);
+    }
+
+    /** Zero is default and means disabled */
+    private static boolean isWifiTimeoutEnabled(Context mContext) {
+        return 0 != wifiTimeoutDurationInMilli(mContext);
     }
 
     /**
      * Dependencies of NetworkStatsService, for injection in tests.
      */
     // TODO: Move more stuff into dependencies object.
     @VisibleForTesting
     public static class Dependencies {
         /**
          * Create a HandlerThread to use in NetworkStatsService.

commit 1a7818784d27b353820ad0b43e3ca6d504efb3fc
Author: Danny Lin <danny@kdrag0n.dev>
Date:   Wed 2021-07-07 21:39:20-0700

    gmscompat: Add helpers for Google Play Services compatibility
    
    This adds a set of helper classes and methods for our upcoming Google
    Play Services compatibility, which will make it possible to run Google
    Play Services (aka. Google Mobile Services / "GMS") and related apps
    (Google Services Framework, Google Play Store) as regular, unprivileged
    user apps.
    
    Implementation notes:
      - The core GmsCompat class is in android.app.gmscompat and exposes
        isEnabled() to system modules because WifiManager, which is part of
        the com.android.wifi APEX module, will need to use it.
      - GmsCompat should only be used for core functionality. API shim
        implementations belong in GmsHooks.
      - The flag has been implemented as a compatibility change,
        GMS_UNPRIVILEGED_COMPAT, in order to reuse the existing
        compatibility change infrastructure.
    
    The actual API shims and compatibility will be added in following
    commits.
    
    Change-Id: Ibfabb6465c40280d4ce73c120ff1f18230fbe2d3
---
 api/module-lib-current.txt                         |   8 ++
 .../android/app/compat/gms/GmsCompat.java (new)    | 116 +++++++++++++++++++++
 .../android/internal/gmscompat/GmsHooks.java (new) |  30 ++++++
 .../android/internal/gmscompat/GmsInfo.java (new)  |  31 ++++++
 non-updatable-api/module-lib-current.txt           |   8 ++
 5 files changed, 193 insertions(+)

diff --git a/api/module-lib-current.txt b/api/module-lib-current.txt
index 67afc3225f7b874ecb487c76ee1b0d11d83f5849..fd9a7d1dc5f9bdb7af9905b621794ffdc5b9d158 100644
--- a/api/module-lib-current.txt
+++ b/api/module-lib-current.txt
@@ -1,11 +1,19 @@
 // Signature format: 2.0
+package android.app.compat.gms {
+
+  public final class GmsCompat {
+    method public static boolean isEnabled();
+  }
+
+}
+
 package android.net {
 
   public final class TetheredClient implements android.os.Parcelable {
     ctor public TetheredClient(@NonNull android.net.MacAddress, @NonNull java.util.Collection<android.net.TetheredClient.AddressInfo>, int);
     method public int describeContents();
     method @NonNull public java.util.List<android.net.TetheredClient.AddressInfo> getAddresses();
     method @NonNull public android.net.MacAddress getMacAddress();
     method public int getTetheringType();
     method public void writeToParcel(@NonNull android.os.Parcel, int);
     field @NonNull public static final android.os.Parcelable.Creator<android.net.TetheredClient> CREATOR;
diff --git a/core/java/android/app/compat/gms/GmsCompat.java b/core/java/android/app/compat/gms/GmsCompat.java
new file mode 100644
index 0000000000000000000000000000000000000000..24d4c40046aaabc5c2e0e45543cc36272131053b
--- /dev/null
+++ b/core/java/android/app/compat/gms/GmsCompat.java
@@ -0,0 +1,116 @@
+/*
+ * Copyright (C) 2021 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package android.app.compat.gms;
+
+import android.annotation.SystemApi;
+import android.app.ActivityThread;
+import android.compat.Compatibility;
+import android.compat.annotation.ChangeId;
+import android.compat.annotation.Disabled;
+import android.content.pm.Signature;
+import android.os.Process;
+import android.util.Log;
+
+import com.android.internal.gmscompat.GmsInfo;
+
+/**
+ * This class provides helpers for Google Play Services compatibility. It allows the following apps
+ * to work as regular, unprivileged user apps:
+ *     - Google Play Services (Google Mobile Services, aka "GMS")
+ *     - Google Services Framework
+ *     - Google Play Store
+ *     - All apps depending on Google Play Services
+ *
+ * All GMS compatibility hooks should call methods on GmsCompat. Hooks that are more complicated
+ * than returning a simple constant value should also be implemented in GmsHooks to reduce
+ * maintenance overhead.
+ *
+ * @hide
+ */
+@SystemApi(client = SystemApi.Client.MODULE_LIBRARIES)
+public final class GmsCompat {
+    private static final String TAG = "GmsCompat";
+
+    /**
+     * Whether to enable Google Play Services compatibility for this app.
+     *
+     * This compatibility change is special because the system enables it automatically for certain
+     * apps, but it still needs to be declared with a change ID.
+     *
+     * We don't have a bug for this in Google's issue tracker, so the change ID is a
+     * randomly-generated long.
+     */
+    @ChangeId
+    @Disabled
+    private static final long GMS_UNPRIVILEGED_COMPAT = 1531297613045645771L;
+
+    private static final boolean DEBUG_VERBOSE = false;
+
+    // Static only
+    private GmsCompat() { }
+
+    private static void logEnabled(boolean enabled) {
+        if (!DEBUG_VERBOSE) {
+            return;
+        }
+
+        String pkg = ActivityThread.currentPackageName();
+        if (pkg == null) {
+            pkg = (Process.myUid() == Process.SYSTEM_UID) ? "system_server" : "[unknown]";
+        }
+
+        Log.d(TAG, "Enabled for " + pkg + " (" + Process.myPid() + "): " + enabled);
+    }
+
+    public static boolean isEnabled() {
+        boolean enabled = Compatibility.isChangeEnabled(GMS_UNPRIVILEGED_COMPAT);
+
+        // Compatibility changes aren't available in the system process, but this should never be
+        // enabled for it.
+        if (Process.myUid() == Process.SYSTEM_UID) {
+            enabled = false;
+        }
+
+        logEnabled(enabled);
+        return enabled;
+    }
+
+    /**
+     * Check whether the given app is part of the Google Play Services family.
+     *
+     * @hide
+     */
+    public static boolean isGmsApp(String packageName, Signature[] signatures) {
+        if (!GmsInfo.PACKAGE_GMS.equals(packageName) &&
+                !GmsInfo.PACKAGE_GSF.equals(packageName) &&
+                !GmsInfo.PACKAGE_PLAY_STORE.equals(packageName)) {
+            return false;
+        }
+
+        // Validate signature to avoid affecting apps like microG and Gcam Services Provider.
+        // This isn't actually necessary from a security perspective because GMS doesn't get any
+        // special privileges.
+        boolean validCert = false;
+        for (Signature signature : signatures) {
+            if (signature.toCharsString().equals(GmsInfo.SIGNING_CERT)) {
+                validCert = true;
+            }
+        }
+
+        return validCert;
+    }
+}
diff --git a/core/java/com/android/internal/gmscompat/GmsHooks.java b/core/java/com/android/internal/gmscompat/GmsHooks.java
new file mode 100644
index 0000000000000000000000000000000000000000..0ec3967eb4c7f8f70925eabb9389048caec6c9ec
--- /dev/null
+++ b/core/java/com/android/internal/gmscompat/GmsHooks.java
@@ -0,0 +1,30 @@
+/*
+ * Copyright (C) 2021 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.internal.gmscompat;
+
+/**
+ * API shims for Google Play Services compatibility. Hooks that are more complicated than a simple
+ * constant return value should be delegated to this class for easier maintenance.
+ *
+ * @hide
+ */
+public final class GmsHooks {
+    private static final String TAG = "GmsHooks";
+
+    // Static only
+    private GmsHooks() { }
+}
diff --git a/core/java/com/android/internal/gmscompat/GmsInfo.java b/core/java/com/android/internal/gmscompat/GmsInfo.java
new file mode 100644
index 0000000000000000000000000000000000000000..e80ac457b6e7c4851a1efc03691829c1afe4fecb
--- /dev/null
+++ b/core/java/com/android/internal/gmscompat/GmsInfo.java
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2021 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.internal.gmscompat;
+
+/** @hide */
+public final class GmsInfo {
+    // Package names for GMS apps
+    public static final String PACKAGE_GMS = "com.google.android.gms";
+    public static final String PACKAGE_GSF = "com.google.android.gsf";
+    public static final String PACKAGE_PLAY_STORE = "com.android.vending";
+
+    // Signing certificate for GMS apps, used to check package eligibility.
+    // This is Google's 2008 MD5 certificate because Play Store doesn't use the new SHA-256 one yet.
+    public static final String SIGNING_CERT = "308204433082032ba003020102020900c2e08746644a308d300d06092a864886f70d01010405003074310b3009060355040613025553311330110603550408130a43616c69666f726e6961311630140603550407130d4d6f756e7461696e205669657731143012060355040a130b476f6f676c6520496e632e3110300e060355040b1307416e64726f69643110300e06035504031307416e64726f6964301e170d3038303832313233313333345a170d3336303130373233313333345a3074310b3009060355040613025553311330110603550408130a43616c69666f726e6961311630140603550407130d4d6f756e7461696e205669657731143012060355040a130b476f6f676c6520496e632e3110300e060355040b1307416e64726f69643110300e06035504031307416e64726f696430820120300d06092a864886f70d01010105000382010d00308201080282010100ab562e00d83ba208ae0a966f124e29da11f2ab56d08f58e2cca91303e9b754d372f640a71b1dcb130967624e4656a7776a92193db2e5bfb724a91e77188b0e6a47a43b33d9609b77183145ccdf7b2e586674c9e1565b1f4c6a5955bff251a63dabf9c55c27222252e875e4f8154a645f897168c0b1bfc612eabf785769bb34aa7984dc7e2ea2764cae8307d8c17154d7ee5f64a51a44a602c249054157dc02cd5f5c0e55fbef8519fbe327f0b1511692c5a06f19d18385f5c4dbc2d6b93f68cc2979c70e18ab93866b3bd5db8999552a0e3b4c99df58fb918bedc182ba35e003c1b4b10dd244a8ee24fffd333872ab5221985edab0fc0d0b145b6aa192858e79020103a381d93081d6301d0603551d0e04160414c77d8cc2211756259a7fd382df6be398e4d786a53081a60603551d2304819e30819b8014c77d8cc2211756259a7fd382df6be398e4d786a5a178a4763074310b3009060355040613025553311330110603550408130a43616c69666f726e6961311630140603550407130d4d6f756e7461696e205669657731143012060355040a130b476f6f676c6520496e632e3110300e060355040b1307416e64726f69643110300e06035504031307416e64726f6964820900c2e08746644a308d300c0603551d13040530030101ff300d06092a864886f70d010104050003820101006dd252ceef85302c360aaace939bcff2cca904bb5d7a1661f8ae46b2994204d0ff4a68c7ed1a531ec4595a623ce60763b167297a7ae35712c407f208f0cb109429124d7b106219c084ca3eb3f9ad5fb871ef92269a8be28bf16d44c8d9a08e6cb2f005bb3fe2cb96447e868e731076ad45b33f6009ea19c161e62641aa99271dfd5228c5c587875ddb7f452758d661f6cc0cccb7352e424cc4365c523532f7325137593c4ae341f4db41edda0d0b1071a7c440f0fe9ea01cb627ca674369d084bd2fd911ff06cdbf2cfa10dc0f893ae35762919048c7efc64c7144178342f70581c9de573af55b390dd7fdb9418631895d5f759f30112687ff621410c069308a";
+
+    private GmsInfo() { }
+}
diff --git a/non-updatable-api/module-lib-current.txt b/non-updatable-api/module-lib-current.txt
index 5d8a9cf75ea5095ad7f3a123e8a524d1b359f599..db6d9e64529779f9f119c686fc5eee8d3900f411 100644
--- a/non-updatable-api/module-lib-current.txt
+++ b/non-updatable-api/module-lib-current.txt
@@ -1,11 +1,19 @@
 // Signature format: 2.0
+package android.app.compat.gms {
+
+  public final class GmsCompat {
+    method public static boolean isEnabled();
+  }
+
+}
+
 package android.os {
 
   public class StatsServiceManager {
     method @NonNull public android.os.StatsServiceManager.ServiceRegisterer getStatsCompanionServiceRegisterer();
     method @NonNull public android.os.StatsServiceManager.ServiceRegisterer getStatsManagerServiceRegisterer();
     method @NonNull public android.os.StatsServiceManager.ServiceRegisterer getStatsdServiceRegisterer();
   }
 
   public static class StatsServiceManager.ServiceNotFoundException extends java.lang.Exception {
     ctor public StatsServiceManager.ServiceNotFoundException(@NonNull String);

commit d8b1765e0c917f14dcfb68b3a344a2885a3e1f56
Author: Danny Lin <danny@kdrag0n.dev>
Date:   Sat 2021-07-10 00:45:36-0700

    gmscompat: Enable compatibility change for GMS apps
    
    This overrides the default disabled state for the compatibility change
    and enables it automatically by checking package names and signatures.
    
    The enabled state can still be overridden on a per-package basis, but
    that's not currently exposed for non-debuggable apps.
    
    Change-Id: I86f908e227a4e2ca98940f19ba6227fbd5aaf1d1
---
 core/java/android/app/compat/gms/GmsCompat.java    | 38 ++++++++++++++++++++--
 .../com/android/server/compat/CompatChange.java    |  4 +++
 2 files changed, 40 insertions(+), 2 deletions(-)

diff --git a/core/java/android/app/compat/gms/GmsCompat.java b/core/java/android/app/compat/gms/GmsCompat.java
index 24d4c40046aaabc5c2e0e45543cc36272131053b..c2c25f267fad82a7c9eb40477aa4b87be5e67473 100644
--- a/core/java/android/app/compat/gms/GmsCompat.java
+++ b/core/java/android/app/compat/gms/GmsCompat.java
@@ -14,24 +14,31 @@
  * limitations under the License.
  */
 
 package android.app.compat.gms;
 
 import android.annotation.SystemApi;
 import android.app.ActivityThread;
 import android.compat.Compatibility;
 import android.compat.annotation.ChangeId;
 import android.compat.annotation.Disabled;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.IPackageManager;
+import android.content.pm.PackageInfo;
+import android.content.pm.PackageManager;
 import android.content.pm.Signature;
 import android.os.Process;
+import android.os.RemoteException;
+import android.os.UserHandle;
 import android.util.Log;
 
+import com.android.internal.compat.CompatibilityChangeInfo;
 import com.android.internal.gmscompat.GmsInfo;
 
 /**
  * This class provides helpers for Google Play Services compatibility. It allows the following apps
  * to work as regular, unprivileged user apps:
  *     - Google Play Services (Google Mobile Services, aka "GMS")
  *     - Google Services Framework
  *     - Google Play Store
  *     - All apps depending on Google Play Services
  *
@@ -48,21 +55,21 @@ public final class GmsCompat {
     /**
      * Whether to enable Google Play Services compatibility for this app.
      *
      * This compatibility change is special because the system enables it automatically for certain
      * apps, but it still needs to be declared with a change ID.
      *
      * We don't have a bug for this in Google's issue tracker, so the change ID is a
      * randomly-generated long.
      */
     @ChangeId
-    @Disabled
+    @Disabled // Overridden as a special case in CompatChange
     private static final long GMS_UNPRIVILEGED_COMPAT = 1531297613045645771L;
 
     private static final boolean DEBUG_VERBOSE = false;
 
     // Static only
     private GmsCompat() { }
 
     private static void logEnabled(boolean enabled) {
         if (!DEBUG_VERBOSE) {
             return;
@@ -96,21 +103,48 @@ public final class GmsCompat {
      */
     public static boolean isGmsApp(String packageName, Signature[] signatures) {
         if (!GmsInfo.PACKAGE_GMS.equals(packageName) &&
                 !GmsInfo.PACKAGE_GSF.equals(packageName) &&
                 !GmsInfo.PACKAGE_PLAY_STORE.equals(packageName)) {
             return false;
         }
 
         // Validate signature to avoid affecting apps like microG and Gcam Services Provider.
         // This isn't actually necessary from a security perspective because GMS doesn't get any
-        // special privileges.
+        // special privileges, but it's a failsafe to avoid unintentional compatibility issues.
         boolean validCert = false;
         for (Signature signature : signatures) {
             if (signature.toCharsString().equals(GmsInfo.SIGNING_CERT)) {
                 validCert = true;
             }
         }
 
         return validCert;
     }
+
+    /** @hide */
+    // CompatChange#isEnabled(ApplicationInfo)
+    public static boolean isChangeEnabled(CompatibilityChangeInfo change, ApplicationInfo app) {
+        // Privileged GMS doesn't need any compatibility changes
+        if (change.getId() != GMS_UNPRIVILEGED_COMPAT || app.isSystemApp()) {
+            return false;
+        }
+
+        int userId = UserHandle.getUserId(app.uid);
+        IPackageManager pm = ActivityThread.getPackageManager();
+
+        // Fetch PackageInfo to get signing certificates
+        PackageInfo pkg;
+        try {
+            pkg = pm.getPackageInfo(app.packageName, PackageManager.GET_SIGNING_CERTIFICATES, userId);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+
+        // Get all applicable certificates, even if GMS switches to multiple signing certificates
+        // in the future
+        Signature[] signatures = pkg.signingInfo.hasMultipleSigners() ?
+                pkg.signingInfo.getApkContentsSigners() :
+                pkg.signingInfo.getSigningCertificateHistory();
+        return isGmsApp(app.packageName, signatures);
+    }
 }
diff --git a/services/core/java/com/android/server/compat/CompatChange.java b/services/core/java/com/android/server/compat/CompatChange.java
index 2e9818d15963561df4c2627f051fa4b189ba8dd6..bf1c11d0b122b57da3ab752aaa8d5bb68b66cc89 100644
--- a/services/core/java/com/android/server/compat/CompatChange.java
+++ b/services/core/java/com/android/server/compat/CompatChange.java
@@ -10,20 +10,21 @@
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 package com.android.server.compat;
 
 import android.annotation.Nullable;
+import android.app.compat.gms.GmsCompat;
 import android.compat.annotation.ChangeId;
 import android.compat.annotation.EnabledAfter;
 import android.content.pm.ApplicationInfo;
 
 import com.android.internal.compat.CompatibilityChangeInfo;
 import com.android.server.compat.config.Change;
 
 import java.util.HashMap;
 import java.util.Map;
 
@@ -135,20 +136,23 @@ public final class CompatChange extends CompatibilityChangeInfo {
      * Find if this change is enabled for the given package, taking into account any overrides that
      * exist.
      *
      * @param app Info about the app in question
      * @return {@code true} if the change should be enabled for the package.
      */
     boolean isEnabled(ApplicationInfo app) {
         if (mPackageOverrides != null && mPackageOverrides.containsKey(app.packageName)) {
             return mPackageOverrides.get(app.packageName);
         }
+        if (GmsCompat.isChangeEnabled(this, app)) {
+            return true;
+        }
         if (getDisabled()) {
             return false;
         }
         if (getEnableAfterTargetSdk() != -1) {
             return app.targetSdkVersion > getEnableAfterTargetSdk();
         }
         return true;
     }
 
     /**

commit 3f37f8c708be086251d88f9dedbac3dd798bc5ba
Author: Danny Lin <danny@kdrag0n.dev>
Date:   Sat 2021-07-10 01:56:27-0700

    gmscompat: Add overload to get signatures from ApplicationInfo
    
    This will be used in future commits.
    
    Change-Id: Ideb435682bcd2f24cdefc843cbfb778c8472dbb1
---
 core/java/android/app/compat/gms/GmsCompat.java | 13 +++++++++----
 1 file changed, 9 insertions(+), 4 deletions(-)

diff --git a/core/java/android/app/compat/gms/GmsCompat.java b/core/java/android/app/compat/gms/GmsCompat.java
index c2c25f267fad82a7c9eb40477aa4b87be5e67473..5e016456d1a48ddeea7f6592df7b25b8201e1189 100644
--- a/core/java/android/app/compat/gms/GmsCompat.java
+++ b/core/java/android/app/compat/gms/GmsCompat.java
@@ -90,21 +90,21 @@ public final class GmsCompat {
         // enabled for it.
         if (Process.myUid() == Process.SYSTEM_UID) {
             enabled = false;
         }
 
         logEnabled(enabled);
         return enabled;
     }
 
     /**
-     * Check whether the given app is part of the Google Play Services family.
+     * Check whether the given app is unprivileged and part of the Google Play Services family.
      *
      * @hide
      */
     public static boolean isGmsApp(String packageName, Signature[] signatures) {
         if (!GmsInfo.PACKAGE_GMS.equals(packageName) &&
                 !GmsInfo.PACKAGE_GSF.equals(packageName) &&
                 !GmsInfo.PACKAGE_PLAY_STORE.equals(packageName)) {
             return false;
         }
 
@@ -115,24 +115,23 @@ public final class GmsCompat {
         for (Signature signature : signatures) {
             if (signature.toCharsString().equals(GmsInfo.SIGNING_CERT)) {
                 validCert = true;
             }
         }
 
         return validCert;
     }
 
     /** @hide */
-    // CompatChange#isEnabled(ApplicationInfo)
-    public static boolean isChangeEnabled(CompatibilityChangeInfo change, ApplicationInfo app) {
+    public static boolean isGmsApp(ApplicationInfo app) {
         // Privileged GMS doesn't need any compatibility changes
-        if (change.getId() != GMS_UNPRIVILEGED_COMPAT || app.isSystemApp()) {
+        if (app.isSystemApp()) {
             return false;
         }
 
         int userId = UserHandle.getUserId(app.uid);
         IPackageManager pm = ActivityThread.getPackageManager();
 
         // Fetch PackageInfo to get signing certificates
         PackageInfo pkg;
         try {
             pkg = pm.getPackageInfo(app.packageName, PackageManager.GET_SIGNING_CERTIFICATES, userId);
@@ -140,11 +139,17 @@ public final class GmsCompat {
             throw e.rethrowFromSystemServer();
         }
 
         // Get all applicable certificates, even if GMS switches to multiple signing certificates
         // in the future
         Signature[] signatures = pkg.signingInfo.hasMultipleSigners() ?
                 pkg.signingInfo.getApkContentsSigners() :
                 pkg.signingInfo.getSigningCertificateHistory();
         return isGmsApp(app.packageName, signatures);
     }
+
+    /** @hide */
+    // CompatChange#isEnabled(ApplicationInfo)
+    public static boolean isChangeEnabled(CompatibilityChangeInfo change, ApplicationInfo app) {
+        return change.getId() == GMS_UNPRIVILEGED_COMPAT && isGmsApp(app);
+    }
 }

commit cc214db3d68ea36c2de70779b6d483667cb558ec
Author: Danny Lin <danny@kdrag0n.dev>
Date:   Mon 2021-07-12 16:52:21-0700

    gmscompat: Check for privileged flag instead of system
    
    GMS apps are in /product, not /system. The privileged flag is what we
    really want to check here.
    
    Change-Id: I333c4df6ce3d02a8fa79334bd6c052d724e1a2d2
---
 core/java/android/app/compat/gms/GmsCompat.java | 14 +++++++-------
 1 file changed, 7 insertions(+), 7 deletions(-)

diff --git a/core/java/android/app/compat/gms/GmsCompat.java b/core/java/android/app/compat/gms/GmsCompat.java
index 5e016456d1a48ddeea7f6592df7b25b8201e1189..22dab9ab29f7e98bda5d15862f56431f9207a37e 100644
--- a/core/java/android/app/compat/gms/GmsCompat.java
+++ b/core/java/android/app/compat/gms/GmsCompat.java
@@ -94,21 +94,26 @@ public final class GmsCompat {
 
         logEnabled(enabled);
         return enabled;
     }
 
     /**
      * Check whether the given app is unprivileged and part of the Google Play Services family.
      *
      * @hide
      */
-    public static boolean isGmsApp(String packageName, Signature[] signatures) {
+    public static boolean isGmsApp(String packageName, Signature[] signatures, boolean isPrivileged) {
+        // Privileged GMS doesn't need any compatibility changes
+        if (isPrivileged) {
+            return false;
+        }
+
         if (!GmsInfo.PACKAGE_GMS.equals(packageName) &&
                 !GmsInfo.PACKAGE_GSF.equals(packageName) &&
                 !GmsInfo.PACKAGE_PLAY_STORE.equals(packageName)) {
             return false;
         }
 
         // Validate signature to avoid affecting apps like microG and Gcam Services Provider.
         // This isn't actually necessary from a security perspective because GMS doesn't get any
         // special privileges, but it's a failsafe to avoid unintentional compatibility issues.
         boolean validCert = false;
@@ -116,40 +121,35 @@ public final class GmsCompat {
             if (signature.toCharsString().equals(GmsInfo.SIGNING_CERT)) {
                 validCert = true;
             }
         }
 
         return validCert;
     }
 
     /** @hide */
     public static boolean isGmsApp(ApplicationInfo app) {
-        // Privileged GMS doesn't need any compatibility changes
-        if (app.isSystemApp()) {
-            return false;
-        }
-
         int userId = UserHandle.getUserId(app.uid);
         IPackageManager pm = ActivityThread.getPackageManager();
 
         // Fetch PackageInfo to get signing certificates
         PackageInfo pkg;
         try {
             pkg = pm.getPackageInfo(app.packageName, PackageManager.GET_SIGNING_CERTIFICATES, userId);
         } catch (RemoteException e) {
             throw e.rethrowFromSystemServer();
         }
 
         // Get all applicable certificates, even if GMS switches to multiple signing certificates
         // in the future
         Signature[] signatures = pkg.signingInfo.hasMultipleSigners() ?
                 pkg.signingInfo.getApkContentsSigners() :
                 pkg.signingInfo.getSigningCertificateHistory();
-        return isGmsApp(app.packageName, signatures);
+        return isGmsApp(app.packageName, signatures, app.isPrivilegedApp());
     }
 
     /** @hide */
     // CompatChange#isEnabled(ApplicationInfo)
     public static boolean isChangeEnabled(CompatibilityChangeInfo change, ApplicationInfo app) {
         return change.getId() == GMS_UNPRIVILEGED_COMPAT && isGmsApp(app);
     }
 }

commit 91f690380566e7aa61c1e17aa1a6e1c1a240e818
Author: Danny Lin <danny@kdrag0n.dev>
Date:   Thu 2021-07-08 03:09:36-0700

    gmscompat: Keep GMS services alive by converting to foreground services
    
    Unprivileged apps can't be exempt from the background execution
    requirements, so keep GMS services alive by converting them to
    foreground services.
    
    Apps must post a foreground service notification for each service within
    10 seconds of the service starting or the system will kill the entire
    process, so generate notifications dynamically from fully-qualified
    service class names and post them automatically for GMS apps.
    
    Change-Id: I0c8a44bf86c364dbbd22ef18138a9a57c86a7bdc
---
 core/java/android/app/ActivityThread.java          |  2 +
 core/java/android/app/ContextImpl.java             |  6 ++
 .../com/android/internal/gmscompat/GmsHooks.java   | 77 ++++++++++++++++++++++
 core/res/res/values/strings.xml                    |  3 +
 core/res/res/values/symbols.xml                    |  1 +
 5 files changed, 89 insertions(+)

diff --git a/core/java/android/app/ActivityThread.java b/core/java/android/app/ActivityThread.java
index 4cc486a0b9b4452d282cbfaabfa17782f567bdca..b07ef232baa4e60c5a8e34d3b20ca45bb50652ec 100644
--- a/core/java/android/app/ActivityThread.java
+++ b/core/java/android/app/ActivityThread.java
@@ -166,20 +166,21 @@ import android.view.ViewManager;
 import android.view.ViewRootImpl;
 import android.view.Window;
 import android.view.WindowManager;
 import android.view.WindowManagerGlobal;
 import android.webkit.WebView;
 
 import com.android.internal.annotations.GuardedBy;
 import com.android.internal.annotations.VisibleForTesting;
 import com.android.internal.app.IVoiceInteractor;
 import com.android.internal.content.ReferrerIntent;
+import com.android.internal.gmscompat.GmsHooks;
 import com.android.internal.os.BinderInternal;
 import com.android.internal.os.RuntimeInit;
 import com.android.internal.os.SomeArgs;
 import com.android.internal.util.ArrayUtils;
 import com.android.internal.util.FastPrintWriter;
 import com.android.internal.util.Preconditions;
 import com.android.internal.util.function.pooled.PooledLambda;
 import com.android.org.conscrypt.OpenSSLSocketImpl;
 import com.android.org.conscrypt.TrustedCertificateStore;
 import com.android.server.am.MemInfoDumpProto;
@@ -4176,20 +4177,21 @@ public final class ActivityThread extends ClientTransactionHandler {
             service = packageInfo.getAppFactory()
                     .instantiateService(cl, data.info.name, data.intent);
             // Service resources must be initialized with the same loaders as the application
             // context.
             context.getResources().addLoaders(
                     app.getResources().getLoaders().toArray(new ResourcesLoader[0]));
 
             context.setOuterContext(service);
             service.attach(context, this, data.info.name, data.token, app,
                     ActivityManager.getService());
+            GmsHooks.attachService(service);
             service.onCreate();
             mServices.put(data.token, service);
             try {
                 ActivityManager.getService().serviceDoneExecuting(
                         data.token, SERVICE_DONE_EXECUTING_ANON, 0, 0);
             } catch (RemoteException e) {
                 throw e.rethrowFromSystemServer();
             }
         } catch (Exception e) {
             if (!mInstrumentation.onException(service, e)) {
diff --git a/core/java/android/app/ContextImpl.java b/core/java/android/app/ContextImpl.java
index 7effbb3f7c8445acca95d991f791ac83120ef412..d67c20e3cfff46c7e2a188091496ef3964986db4 100644
--- a/core/java/android/app/ContextImpl.java
+++ b/core/java/android/app/ContextImpl.java
@@ -15,20 +15,21 @@
  */
 
 package android.app;
 
 import static android.content.pm.PackageManager.PERMISSION_GRANTED;
 import static android.os.StrictMode.vmIncorrectContextUseEnabled;
 
 import android.annotation.IntDef;
 import android.annotation.NonNull;
 import android.annotation.Nullable;
+import android.app.compat.gms.GmsCompat;
 import android.compat.annotation.UnsupportedAppUsage;
 import android.content.AutofillOptions;
 import android.content.BroadcastReceiver;
 import android.content.ComponentName;
 import android.content.ContentCaptureOptions;
 import android.content.ContentProvider;
 import android.content.ContentResolver;
 import android.content.Context;
 import android.content.ContextWrapper;
 import android.content.IContentProvider;
@@ -81,20 +82,21 @@ import android.system.StructStat;
 import android.text.TextUtils;
 import android.util.AndroidRuntimeException;
 import android.util.ArrayMap;
 import android.util.Log;
 import android.util.Slog;
 import android.view.Display;
 import android.view.DisplayAdjustments;
 import android.view.autofill.AutofillManager.AutofillClient;
 
 import com.android.internal.annotations.GuardedBy;
+import com.android.internal.gmscompat.GmsHooks;
 import com.android.internal.util.Preconditions;
 
 import dalvik.system.BlockGuard;
 
 import libcore.io.Memory;
 
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
@@ -1659,20 +1661,24 @@ class ContextImpl extends Context {
                 throw ex;
             } else {
                 Log.w(TAG, "Implicit intents with startService are not safe: " + service
                         + " " + Debug.getCallers(2, 3));
             }
         }
     }
 
     @Override
     public ComponentName startService(Intent service) {
+        if (GmsCompat.isEnabled()) {
+            return GmsHooks.startService(this, service);
+        }
+
         warnIfCallingFromSystemProcess();
         return startServiceCommon(service, false, mUser);
     }
 
     @Override
     public ComponentName startForegroundService(Intent service) {
         warnIfCallingFromSystemProcess();
         return startServiceCommon(service, true, mUser);
     }
 
diff --git a/core/java/com/android/internal/gmscompat/GmsHooks.java b/core/java/com/android/internal/gmscompat/GmsHooks.java
index 0ec3967eb4c7f8f70925eabb9389048caec6c9ec..c4c733125a3ac7adfe6c51768808cb91c1437b6e 100644
--- a/core/java/com/android/internal/gmscompat/GmsHooks.java
+++ b/core/java/com/android/internal/gmscompat/GmsHooks.java
@@ -9,22 +9,99 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 package com.android.internal.gmscompat;
 
+import android.app.Notification;
+import android.app.NotificationChannel;
+import android.app.NotificationManager;
+import android.app.PendingIntent;
+import android.app.Service;
+import android.app.compat.gms.GmsCompat;
+import android.content.ComponentName;
+import android.content.Context;
+import android.content.Intent;
+import android.util.Log;
+
 /**
  * API shims for Google Play Services compatibility. Hooks that are more complicated than a simple
  * constant return value should be delegated to this class for easier maintenance.
  *
  * @hide
  */
 public final class GmsHooks {
     private static final String TAG = "GmsHooks";
 
+    // Foreground service notifications
+    private static final String FGS_CHANNEL_ID = "service_shim";
+    private static boolean fgsChannelCreated = false;
+
     // Static only
     private GmsHooks() { }
+
+    /*
+     * Foreground service notifications to keep GMS services alive
+     */
+
+    // Make all services foreground to keep them alive
+    // ContextImpl#startService(Intent)
+    public static ComponentName startService(Context context, Intent service) {
+        return context.startForegroundService(service);
+    }
+
+    private static void createFgsChannel(Service service) {
+        if (fgsChannelCreated) {
+            return;
+        }
+
+        NotificationManager notificationManager = (NotificationManager)
+                service.getSystemService(Context.NOTIFICATION_SERVICE);
+
+        CharSequence name = service.getText(
+                com.android.internal.R.string.foreground_service_gms_shim_category);
+        NotificationChannel channel = new NotificationChannel(FGS_CHANNEL_ID, name,
+                NotificationManager.IMPORTANCE_LOW);
+        notificationManager.createNotificationChannel(channel);
+
+        fgsChannelCreated = true;
+    }
+
+    // Post notification on foreground service start
+    // ActivityThread#handleCreateService(CreateServiceData)
+    public static void attachService(Service service) {
+        if (!GmsCompat.isEnabled()) {
+            return;
+        }
+
+        // Shorten name for display
+        String serviceName = service.getClass().getName()
+                .replace("com.google.android.gms.", "c.g.a.g.")
+                .replace("com.google.android.", "c.g.a.")
+                .replace("com.google.", "c.g.");
+
+        // Channel
+        createFgsChannel(service);
+        // Notification
+        PendingIntent pi = PendingIntent.getActivity(service, 100, new Intent(),
+                PendingIntent.FLAG_IMMUTABLE);
+        Notification notification = new Notification.Builder(service, FGS_CHANNEL_ID)
+                .setSmallIcon(service.getApplicationInfo().icon)
+                .setContentTitle(serviceName)
+                .setContentIntent(pi)
+                .build();
+
+        Log.d(TAG, "Posting notification for service: " + service.getClass().getName());
+        service.startForeground(serviceName.hashCode(), notification);
+    }
+
+    // GMS tries to clean up its own notification channels periodically.
+    // Don't let it delete the FGS shim channel because that throws an exception and crashes GMS.
+    // NotificationManager#deleteNotificationChannel(String)
+    public static boolean skipDeleteNotificationChannel(String channelId) {
+        return GmsCompat.isEnabled() && FGS_CHANNEL_ID.equals(channelId);
+    }
 }
diff --git a/core/res/res/values/strings.xml b/core/res/res/values/strings.xml
index 9437c60b4217f6d018c792dd9cabe803749a8829..dc83ca8fc5721302b8bfb152939f3b4aa7788982 100644
--- a/core/res/res/values/strings.xml
+++ b/core/res/res/values/strings.xml
@@ -729,20 +729,23 @@
         data usage</string>
 
     <!-- Separator for foreground service notification content listing all apps when there
         are multiple apps running.  The left and right side may both already be compound
         (constructed using this separator).  Should be kept as short as possible, this is
         for summary text in the notification where there is not a lot of space.
         [CHAR LIMIT=NONE] -->
     <string name="foreground_service_multiple_separator"><xliff:g id="left_side">%1$s</xliff:g>,
         <xliff:g id="right_side">%2$s</xliff:g></string>
 
+    <!-- Name for foreground service notification category created by GmsCompat  -->
+    <string name="foreground_service_gms_shim_category">Services</string>
+
     <!-- Displayed to the user to tell them that they have started up the phone in "safe mode" -->
     <string name="safeMode">Safe mode</string>
 
     <!-- Label for the Android system components when they are shown to the user. -->
     <string name="android_system_label">Android System</string>
 
     <!-- "Switch" is a verb; it means to change user profile by tapping another user profile name. -->
     <string name="user_owner_label">Switch to personal profile</string>
 
     <!-- "Switch" is a verb; it means to change user profile by tapping another user profile name. -->
diff --git a/core/res/res/values/symbols.xml b/core/res/res/values/symbols.xml
index 9167f66304296813230b7264ad4f597b48f7b8f5..299b9631123b9c733d4fd96df1063f73fe1a9198 100644
--- a/core/res/res/values/symbols.xml
+++ b/core/res/res/values/symbols.xml
@@ -3450,20 +3450,21 @@
   <java-symbol type="string" name="config_defaultSystemCaptionsService" />
   <java-symbol type="string" name="config_defaultSystemCaptionsManagerService" />
   <java-symbol type="string" name="config_retailDemoPackage" />
   <java-symbol type="string" name="config_retailDemoPackageSignature" />
 
   <java-symbol type="string" name="notification_channel_foreground_service" />
   <java-symbol type="string" name="foreground_service_app_in_background" />
   <java-symbol type="string" name="foreground_service_apps_in_background" />
   <java-symbol type="string" name="foreground_service_tap_for_details" />
   <java-symbol type="string" name="foreground_service_multiple_separator" />
+  <java-symbol type="string" name="foreground_service_gms_shim_category" />
 
   <java-symbol type="bool" name="config_enableCredentialFactoryResetProtection" />
 
   <!-- ETWS primary messages -->
   <java-symbol type="string" name="etws_primary_default_message_earthquake" />
   <java-symbol type="string" name="etws_primary_default_message_tsunami" />
   <java-symbol type="string" name="etws_primary_default_message_earthquake_and_tsunami" />
   <java-symbol type="string" name="etws_primary_default_message_test" />
   <java-symbol type="string" name="etws_primary_default_message_others" />
 

commit 07f021b349ba156c8599df3c4786957d319cf2d7
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Fri 2021-07-16 12:11:51-0400

    gmscompat: reuse one notification for GMS foreground services
---
 core/java/com/android/internal/gmscompat/GmsHooks.java | 11 +++--------
 1 file changed, 3 insertions(+), 8 deletions(-)

diff --git a/core/java/com/android/internal/gmscompat/GmsHooks.java b/core/java/com/android/internal/gmscompat/GmsHooks.java
index c4c733125a3ac7adfe6c51768808cb91c1437b6e..94ed5e54e0ca9ded5f25cf4077c57d9b9ef9d05d 100644
--- a/core/java/com/android/internal/gmscompat/GmsHooks.java
+++ b/core/java/com/android/internal/gmscompat/GmsHooks.java
@@ -31,20 +31,21 @@ import android.util.Log;
  * API shims for Google Play Services compatibility. Hooks that are more complicated than a simple
  * constant return value should be delegated to this class for easier maintenance.
  *
  * @hide
  */
 public final class GmsHooks {
     private static final String TAG = "GmsHooks";
 
     // Foreground service notifications
     private static final String FGS_CHANNEL_ID = "service_shim";
+    private static final int FGS_NOTIFICATION_ID = 529977835;
     private static boolean fgsChannelCreated = false;
 
     // Static only
     private GmsHooks() { }
 
     /*
      * Foreground service notifications to keep GMS services alive
      */
 
     // Make all services foreground to keep them alive
@@ -70,38 +71,32 @@ public final class GmsHooks {
         fgsChannelCreated = true;
     }
 
     // Post notification on foreground service start
     // ActivityThread#handleCreateService(CreateServiceData)
     public static void attachService(Service service) {
         if (!GmsCompat.isEnabled()) {
             return;
         }
 
-        // Shorten name for display
-        String serviceName = service.getClass().getName()
-                .replace("com.google.android.gms.", "c.g.a.g.")
-                .replace("com.google.android.", "c.g.a.")
-                .replace("com.google.", "c.g.");
-
         // Channel
         createFgsChannel(service);
         // Notification
         PendingIntent pi = PendingIntent.getActivity(service, 100, new Intent(),
                 PendingIntent.FLAG_IMMUTABLE);
         Notification notification = new Notification.Builder(service, FGS_CHANNEL_ID)
                 .setSmallIcon(service.getApplicationInfo().icon)
-                .setContentTitle(serviceName)
+                .setContentTitle(service.getApplicationInfo().loadLabel(service.getPackageManager()))
                 .setContentIntent(pi)
                 .build();
 
         Log.d(TAG, "Posting notification for service: " + service.getClass().getName());
-        service.startForeground(serviceName.hashCode(), notification);
+        service.startForeground(FGS_NOTIFICATION_ID, notification);
     }
 
     // GMS tries to clean up its own notification channels periodically.
     // Don't let it delete the FGS shim channel because that throws an exception and crashes GMS.
     // NotificationManager#deleteNotificationChannel(String)
     public static boolean skipDeleteNotificationChannel(String channelId) {
         return GmsCompat.isEnabled() && FGS_CHANNEL_ID.equals(channelId);
     }
 }

commit fc1c1b436dbc37df8f1415541fc297ca893300a7
Author: Danny Lin <danny@kdrag0n.dev>
Date:   Mon 2021-07-12 17:18:48-0700

    gmscompat: Skip notification posting in isolated processes
    
    In some cases, our service hook runs in isolated processes (e.g.
    sandboxed WebView services) and crashes because NotificationManager
    isn't available in that context:
    
    FATAL EXCEPTION: main
    Process: com.android.webview:sandboxed_process0:org.chromium.content.app.SandboxedProcessService0:0, PID: 6722
    java.lang.RuntimeException: Unable to create service org.chromium.content.app.SandboxedProcessService0: java.lang.NullPointerException: Attempt to invoke interface method 'void android.app.INotificationManager.createNotificationChannels(java.lang.String, android.content.pm.ParceledListSlice)' on a null object reference
            at android.app.ActivityThread.handleCreateService(ActivityThread.java:4201)
            at android.app.ActivityThread.access$1500(ActivityThread.java:239)
            at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1934)
            at android.os.Handler.dispatchMessage(Handler.java:106)
            at android.os.Looper.loop(Looper.java:223)
            at android.app.ActivityThread.main(ActivityThread.java:7668)
            at java.lang.reflect.Method.invoke(Native Method)
            at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:592)
            at com.android.internal.os.ChildZygoteInit.runZygoteServer(ChildZygoteInit.java:136)
            at com.android.internal.os.WebViewZygoteInit.main(WebViewZygoteInit.java:147)
            at java.lang.reflect.Method.invoke(Native Method)
            at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:592)
            at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:954)
    Caused by: java.lang.NullPointerException: Attempt to invoke interface method 'void android.app.INotificationManager.createNotificationChannels(java.lang.String, android.content.pm.ParceledListSlice)' on a null object reference
            at android.app.NotificationManager.createNotificationChannels(NotificationManager.java:834)
            at android.app.NotificationManager.createNotificationChannel(NotificationManager.java:822)
            at com.android.internal.gmscompat.GmsHooks.createFgsChannel(GmsHooks.java:83)
            at com.android.internal.gmscompat.GmsHooks.attachService(GmsHooks.java:102)
            at android.app.ActivityThread.handleCreateService(ActivityThread.java:4188)
            ... 12 more
    
    Isolated services don't need a foreground notification anyway, so just
    skip the hook.
    
    Change-Id: I0a8b161d3f2758949d02f3d28b25f9eae1b03c3c
---
 core/java/com/android/internal/gmscompat/GmsHooks.java | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/core/java/com/android/internal/gmscompat/GmsHooks.java b/core/java/com/android/internal/gmscompat/GmsHooks.java
index 94ed5e54e0ca9ded5f25cf4077c57d9b9ef9d05d..a4d2aae22e3b425f0fdb3baa39241c9bcb24c1f8 100644
--- a/core/java/com/android/internal/gmscompat/GmsHooks.java
+++ b/core/java/com/android/internal/gmscompat/GmsHooks.java
@@ -67,21 +67,23 @@ public final class GmsHooks {
         NotificationChannel channel = new NotificationChannel(FGS_CHANNEL_ID, name,
                 NotificationManager.IMPORTANCE_LOW);
         notificationManager.createNotificationChannel(channel);
 
         fgsChannelCreated = true;
     }
 
     // Post notification on foreground service start
     // ActivityThread#handleCreateService(CreateServiceData)
     public static void attachService(Service service) {
-        if (!GmsCompat.isEnabled()) {
+        // Isolated processes (e.g. WebView) don't have access to NotificationManager. They don't
+        // need a foreground notification anyway, so bail out early.
+        if (!GmsCompat.isEnabled() || Process.isIsolated()) {
             return;
         }
 
         // Channel
         createFgsChannel(service);
         // Notification
         PendingIntent pi = PendingIntent.getActivity(service, 100, new Intent(),
                 PendingIntent.FLAG_IMMUTABLE);
         Notification notification = new Notification.Builder(service, FGS_CHANNEL_ID)
                 .setSmallIcon(service.getApplicationInfo().icon)

commit 23304f75ae910f27f2b30fbe2de8b1c9bb340934
Author: Danny Lin <danny@kdrag0n.dev>
Date:   Thu 2021-07-08 03:19:08-0700

    gmscompat: Add baseline compatibility for unprivileged Play Services
    
    Tested functionality:
      - Account login (including 2FA with NFC security key)
      - Play Store
      - Firebase Cloud Messaging (Signal, Discord, Slack, Gmail)
      - Firebase database API (Swift Backup)
      - Firebase app indexing (GMS debug settings)
      - Google Play Games
      - Account settings
      - Google My Account
      - Autofill
      - SMS verification receiver (Signal)
      - Play license verification (both in-app purchases and paid apps)
      - Play Store app purchases
    
    Known issues:
      - Play feature delivery
      - SafetyNet doesn't pass
    
    To open Play Services and account settings:
          am start com.google.android.gms/.app.settings.GoogleSettingsIALink
    
    Change-Id: I80c702ac47590d28c86cd1a63a7765670ec9e045
---
 core/java/android/app/ActivityManager.java         |  6 ++
 .../android/app/ApplicationPackageManager.java     | 14 ++++
 core/java/android/app/Instrumentation.java         |  3 +
 core/java/android/app/NotificationManager.java     |  6 ++
 .../android/app/admin/DevicePolicyManager.java     | 17 +++++
 .../hardware/location/ContextHubManager.java       | 11 +++
 core/java/android/net/ConnectivityManager.java     |  5 ++
 core/java/android/net/NetworkScoreManager.java     | 13 ++++
 core/java/android/os/Build.java                    |  7 ++
 core/java/android/os/UserManager.java              | 26 +++++++
 core/java/android/provider/Settings.java           |  5 ++
 .../com/android/internal/gmscompat/GmsHooks.java   | 86 ++++++++++++++++++++++
 .../java/android/location/LocationManager.java     |  5 ++
 .../android/server/am/ActivityManagerService.java  |  5 ++
 .../java/android/telephony/TelephonyManager.java   | 29 ++++++++
 wifi/java/android/net/wifi/WifiManager.java        | 17 +++++
 16 files changed, 255 insertions(+)

diff --git a/core/java/android/app/ActivityManager.java b/core/java/android/app/ActivityManager.java
index 1059a6f2e8685b7be07aeb63847477f4156ada3f..1d7c17fbe25d7967a789a979c812010b29ef37f4 100644
--- a/core/java/android/app/ActivityManager.java
+++ b/core/java/android/app/ActivityManager.java
@@ -22,20 +22,21 @@ import static android.content.pm.ActivityInfo.RESIZE_MODE_RESIZEABLE;
 import android.Manifest;
 import android.annotation.DrawableRes;
 import android.annotation.IntDef;
 import android.annotation.IntRange;
 import android.annotation.NonNull;
 import android.annotation.Nullable;
 import android.annotation.RequiresPermission;
 import android.annotation.SystemApi;
 import android.annotation.SystemService;
 import android.annotation.TestApi;
+import android.app.compat.gms.GmsCompat;
 import android.compat.annotation.UnsupportedAppUsage;
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
 import android.content.pm.ActivityInfo;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.ConfigurationInfo;
 import android.content.pm.IPackageDataObserver;
 import android.content.pm.PackageManager;
 import android.content.pm.ParceledListSlice;
@@ -72,20 +73,21 @@ import android.os.WorkSource;
 import android.text.TextUtils;
 import android.util.ArrayMap;
 import android.util.DisplayMetrics;
 import android.util.Singleton;
 import android.util.Size;
 import android.view.Surface;
 import android.window.WindowContainerToken;
 
 import com.android.internal.app.LocalePicker;
 import com.android.internal.app.procstats.ProcessStats;
+import com.android.internal.gmscompat.GmsHooks;
 import com.android.internal.os.RoSystemProperties;
 import com.android.internal.os.TransferPipe;
 import com.android.internal.util.FastPrintWriter;
 import com.android.internal.util.MemInfoReader;
 import com.android.internal.util.Preconditions;
 import com.android.server.LocalServices;
 
 import org.xmlpull.v1.XmlPullParser;
 import org.xmlpull.v1.XmlSerializer;
 
@@ -4297,20 +4299,24 @@ public class ActivityManager {
     /**
      * Gets the userId of the current foreground user. Requires system permissions.
      * @hide
      */
     @SystemApi
     @RequiresPermission(anyOf = {
             "android.permission.INTERACT_ACROSS_USERS",
             "android.permission.INTERACT_ACROSS_USERS_FULL"
     })
     public static int getCurrentUser() {
+        if (GmsCompat.isEnabled()) {
+            return GmsHooks.getCurrentUser();
+        }
+
         UserInfo ui;
         try {
             ui = getService().getCurrentUser();
             return ui != null ? ui.id : 0;
         } catch (RemoteException e) {
             throw e.rethrowFromSystemServer();
         }
     }
 
     /**
diff --git a/core/java/android/app/ApplicationPackageManager.java b/core/java/android/app/ApplicationPackageManager.java
index c9031b711657b3adeeefef078b2ec3336340def6..d3c6639b7a55335d20a1359ef6c9deeb469bdc87 100644
--- a/core/java/android/app/ApplicationPackageManager.java
+++ b/core/java/android/app/ApplicationPackageManager.java
@@ -15,20 +15,21 @@
  */
 
 package android.app;
 
 import android.annotation.DrawableRes;
 import android.annotation.NonNull;
 import android.annotation.Nullable;
 import android.annotation.StringRes;
 import android.annotation.UserIdInt;
 import android.annotation.XmlRes;
+import android.app.compat.gms.GmsCompat;
 import android.compat.annotation.UnsupportedAppUsage;
 import android.content.ComponentName;
 import android.content.ContentResolver;
 import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
 import android.content.IntentSender;
 import android.content.pm.ActivityInfo;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.ChangedPackages;
@@ -94,20 +95,21 @@ import android.text.TextUtils;
 import android.util.ArrayMap;
 import android.util.ArraySet;
 import android.util.DebugUtils;
 import android.util.LauncherIcons;
 import android.util.Log;
 import android.view.Display;
 
 import com.android.internal.annotations.GuardedBy;
 import com.android.internal.annotations.Immutable;
 import com.android.internal.annotations.VisibleForTesting;
+import com.android.internal.gmscompat.GmsHooks;
 import com.android.internal.os.SomeArgs;
 import com.android.internal.util.UserIcons;
 
 import dalvik.system.VMRuntime;
 
 import libcore.util.EmptyArray;
 
 import java.lang.ref.WeakReference;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -174,36 +176,40 @@ public class ApplicationPackageManager extends PackageManager {
 
     @Override
     public PackageInfo getPackageInfo(String packageName, int flags)
             throws NameNotFoundException {
         return getPackageInfoAsUser(packageName, flags, getUserId());
     }
 
     @Override
     public PackageInfo getPackageInfo(VersionedPackage versionedPackage, int flags)
             throws NameNotFoundException {
+        flags = GmsHooks.getPackageInfoFlags(flags);
+
         final int userId = getUserId();
         try {
             PackageInfo pi = mPM.getPackageInfoVersioned(versionedPackage,
                     updateFlagsForPackage(flags, userId), userId);
             if (pi != null) {
                 return pi;
             }
         } catch (RemoteException e) {
             throw e.rethrowFromSystemServer();
         }
         throw new NameNotFoundException(versionedPackage.toString());
     }
 
     @Override
     public PackageInfo getPackageInfoAsUser(String packageName, int flags, int userId)
             throws NameNotFoundException {
+        flags = GmsHooks.getPackageInfoFlags(flags);
+
         PackageInfo pi =
                 getPackageInfoAsUserCached(
                         packageName,
                         updateFlagsForPackage(flags, userId),
                         userId);
         if (pi == null) {
             throw new NameNotFoundException(packageName);
         }
         return pi;
     }
@@ -530,20 +536,24 @@ public class ApplicationPackageManager extends PackageManager {
     /** @hide */
     @Override
     public @NonNull List<SharedLibraryInfo> getSharedLibraries(int flags) {
         return getSharedLibrariesAsUser(flags, getUserId());
     }
 
     /** @hide */
     @Override
     @SuppressWarnings("unchecked")
     public @NonNull List<SharedLibraryInfo> getSharedLibrariesAsUser(int flags, int userId) {
+        if (GmsCompat.isEnabled()) {
+            return GmsHooks.getSharedLibrariesAsUser();
+        }
+
         try {
             ParceledListSlice<SharedLibraryInfo> sharedLibs = mPM.getSharedLibraries(
                     mContext.getOpPackageName(), flags, userId);
             if (sharedLibs == null) {
                 return Collections.emptyList();
             }
             return sharedLibs.getList();
         } catch (RemoteException e) {
             throw e.rethrowFromSystemServer();
         }
@@ -1719,20 +1729,24 @@ public class ApplicationPackageManager extends PackageManager {
                 mCachedSafeMode = mPM.isSafeMode() ? 1 : 0;
             }
             return mCachedSafeMode != 0;
         } catch (RemoteException e) {
             throw e.rethrowFromSystemServer();
         }
     }
 
     @Override
     public void addOnPermissionsChangeListener(OnPermissionsChangedListener listener) {
+        if (GmsCompat.isEnabled()) {
+            return;
+        }
+
         synchronized (mPermissionListeners) {
             if (mPermissionListeners.get(listener) != null) {
                 return;
             }
             OnPermissionsChangeListenerDelegate delegate =
                     new OnPermissionsChangeListenerDelegate(listener, Looper.getMainLooper());
             try {
                 mPermissionManager.addOnPermissionsChangeListener(delegate);
                 mPermissionListeners.put(listener, delegate);
             } catch (RemoteException e) {
diff --git a/core/java/android/app/Instrumentation.java b/core/java/android/app/Instrumentation.java
index 721525d9af9d7b7466e0111a910d1feb956f0ed7..3d38d5ebbbdbfb988ec9d9ed53fdacafcd488a5b 100644
--- a/core/java/android/app/Instrumentation.java
+++ b/core/java/android/app/Instrumentation.java
@@ -50,20 +50,22 @@ import android.view.InputDevice;
 import android.view.KeyCharacterMap;
 import android.view.KeyEvent;
 import android.view.MotionEvent;
 import android.view.SurfaceControl;
 import android.view.ViewConfiguration;
 import android.view.Window;
 import android.view.WindowManagerGlobal;
 
 import com.android.internal.content.ReferrerIntent;
 
+import com.android.internal.gmscompat.GmsHooks;
+
 import java.io.File;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.util.ArrayList;
 import java.util.List;
 
 /**
  * Base class for implementing application instrumentation code.  When running
  * with instrumentation turned on, this class will be instantiated for you
  * before any of the application code, allowing you to monitor all of the
@@ -1182,20 +1184,21 @@ public class Instrumentation {
      * method.  The default implementation simply calls through to that method.
      *
      * <p>Note: This method will be called immediately after {@link #onCreate(Bundle)}.
      * Often instrumentation tests start their test thread in onCreate(); you
      * need to be careful of races between these.  (Well between it and
      * everything else, but let's start here.)
      *
      * @param app The application being created.
      */
     public void callApplicationOnCreate(Application app) {
+        GmsHooks.initApplicationBeforeOnCreate(app);
         app.onCreate();
     }
     
     /**
      * Perform instantiation of an {@link Activity} object.  This method is intended for use with
      * unit tests, such as android.test.ActivityUnitTestCase.  The activity will be useable
      * locally but will be missing some of the linkages necessary for use within the system.
      * 
      * @param clazz The Class of the desired Activity
      * @param context The base context for the activity to use
diff --git a/core/java/android/app/NotificationManager.java b/core/java/android/app/NotificationManager.java
index eef9c022fda84ad10246d4e0a6155927f0468aca..a37f80849c7f1c13e199c2612acf2649e5ab1df0 100644
--- a/core/java/android/app/NotificationManager.java
+++ b/core/java/android/app/NotificationManager.java
@@ -44,20 +44,22 @@ import android.os.StrictMode;
 import android.os.UserHandle;
 import android.provider.Settings.Global;
 import android.service.notification.Adjustment;
 import android.service.notification.Condition;
 import android.service.notification.StatusBarNotification;
 import android.service.notification.ZenModeConfig;
 import android.service.notification.ZenPolicy;
 import android.util.Log;
 import android.util.proto.ProtoOutputStream;
 
+import com.android.internal.gmscompat.GmsHooks;
+
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
 
 /**
@@ -894,20 +896,24 @@ public class NotificationManager {
     }
 
     /**
      * Deletes the given notification channel.
      *
      * <p>If you {@link #createNotificationChannel(NotificationChannel) create} a new channel with
      * this same id, the deleted channel will be un-deleted with all of the same settings it
      * had before it was deleted.
      */
     public void deleteNotificationChannel(String channelId) {
+        if (GmsHooks.skipDeleteNotificationChannel(channelId)) {
+            return;
+        }
+
         INotificationManager service = getService();
         try {
             service.deleteNotificationChannel(mContext.getPackageName(), channelId);
         } catch (RemoteException e) {
             throw e.rethrowFromSystemServer();
         }
     }
 
     /**
      * Returns the notification channel group settings for a given channel group id.
diff --git a/core/java/android/app/admin/DevicePolicyManager.java b/core/java/android/app/admin/DevicePolicyManager.java
index 9f6ac309e44d2913733fd65a35b9a99b910313d1..b57917332ada5becad57c57ac6867d1ffaf0da5c 100644
--- a/core/java/android/app/admin/DevicePolicyManager.java
+++ b/core/java/android/app/admin/DevicePolicyManager.java
@@ -33,20 +33,21 @@ import android.annotation.SuppressLint;
 import android.annotation.SystemApi;
 import android.annotation.SystemService;
 import android.annotation.TestApi;
 import android.annotation.UserHandleAware;
 import android.annotation.UserIdInt;
 import android.annotation.WorkerThread;
 import android.app.Activity;
 import android.app.IServiceConnection;
 import android.app.KeyguardManager;
 import android.app.admin.SecurityLog.SecurityEvent;
+import android.app.compat.gms.GmsCompat;
 import android.compat.annotation.UnsupportedAppUsage;
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
 import android.content.ServiceConnection;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.IPackageDataObserver;
 import android.content.pm.PackageManager;
 import android.content.pm.PackageManager.NameNotFoundException;
@@ -6565,20 +6566,24 @@ public class DevicePolicyManager {
     }
 
     /**
      * @return device owner component name, even if it's running on a different user.
      *
      * @hide
      */
     @SystemApi
     @RequiresPermission(android.Manifest.permission.MANAGE_USERS)
     public ComponentName getDeviceOwnerComponentOnAnyUser() {
+        if (GmsCompat.isEnabled()) {
+            return null;
+        }
+
         return getDeviceOwnerComponentInner(/* callingUserOnly =*/ false);
     }
 
     private boolean isDeviceOwnerAppOnAnyUserInner(String packageName, boolean callingUserOnly) {
         if (packageName == null) {
             return false;
         }
         final ComponentName deviceOwner = getDeviceOwnerComponentInner(callingUserOnly);
         if (deviceOwner == null) {
             return false;
@@ -6700,20 +6705,24 @@ public class DevicePolicyManager {
 
     /**
      * Returns the device owner name.  Note this method *will* return the device owner
      * name when it's running on a different user.
      *
      * @hide
      */
     @SystemApi
     @RequiresPermission(android.Manifest.permission.MANAGE_USERS)
     public String getDeviceOwnerNameOnAnyUser() {
+        if (GmsCompat.isEnabled()) {
+            return null;
+        }
+
         throwIfParentInstance("getDeviceOwnerNameOnAnyUser");
         if (mService != null) {
             try {
                 return mService.getDeviceOwnerName();
             } catch (RemoteException re) {
                 throw re.rethrowFromSystemServer();
             }
         }
         return null;
     }
@@ -7090,20 +7099,24 @@ public class DevicePolicyManager {
     /**
      * @hide
      * @param userId The user for whom to fetch the profile owner name, if any.
      * @return the human readable name of the organisation associated with this profile owner or
      *         null if one is not set.
      * @throws IllegalArgumentException if the userId is invalid.
      */
     @SystemApi
     @RequiresPermission(android.Manifest.permission.MANAGE_USERS)
     public @Nullable String getProfileOwnerNameAsUser(int userId) throws IllegalArgumentException {
+        if (GmsCompat.isEnabled()) {
+            return null;
+        }
+
         throwIfParentInstance("getProfileOwnerNameAsUser");
         if (mService != null) {
             try {
                 return mService.getProfileOwnerName(userId);
             } catch (RemoteException re) {
                 throw re.rethrowFromSystemServer();
             }
         }
         return null;
     }
@@ -10577,20 +10590,24 @@ public class DevicePolicyManager {
     /**
      * Returns whether the device has been provisioned.
      *
      * <p>Not for use by third-party applications.
      *
      * @hide
      */
     @SystemApi
     @RequiresPermission(android.Manifest.permission.MANAGE_USERS)
     public boolean isDeviceProvisioned() {
+        if (GmsCompat.isEnabled()) {
+            return true;
+        }
+
         try {
             return mService.isDeviceProvisioned();
         } catch (RemoteException re) {
             throw re.rethrowFromSystemServer();
         }
     }
 
     /**
       * Writes that the provisioning configuration has been applied.
       *
diff --git a/core/java/android/hardware/location/ContextHubManager.java b/core/java/android/hardware/location/ContextHubManager.java
index 1ed791d66f7472ecf405295172e53bb33fb6339f..2cca58608191edc87659208e59aa402f8592d4fc 100644
--- a/core/java/android/hardware/location/ContextHubManager.java
+++ b/core/java/android/hardware/location/ContextHubManager.java
@@ -18,33 +18,35 @@ package android.hardware.location;
 import android.annotation.CallbackExecutor;
 import android.annotation.IntDef;
 import android.annotation.NonNull;
 import android.annotation.Nullable;
 import android.annotation.RequiresFeature;
 import android.annotation.RequiresPermission;
 import android.annotation.SuppressLint;
 import android.annotation.SystemApi;
 import android.annotation.SystemService;
 import android.app.PendingIntent;
+import android.app.compat.gms.GmsCompat;
 import android.content.Context;
 import android.content.Intent;
 import android.content.pm.PackageManager;
 import android.os.Handler;
 import android.os.HandlerExecutor;
 import android.os.Looper;
 import android.os.RemoteException;
 import android.os.ServiceManager;
 import android.os.ServiceManager.ServiceNotFoundException;
 import android.util.Log;
 
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.util.Collections;
 import java.util.List;
 import java.util.Objects;
 import java.util.concurrent.Executor;
 
 /**
  * A class that exposes the Context hubs on a device to applications.
  *
  * Please note that this class is not expected to be used by unbundled applications. Also, calling
  * applications are expected to have LOCATION_HARDWARE or ACCESS_CONTEXT_HUB permissions to use this
  * class. Use of LOCATION_HARDWARE to enable access to these APIs is deprecated and may be removed
@@ -413,20 +415,24 @@ public final class ContextHubManager {
      *
      * @return the list of ContextHubInfo objects
      *
      * @see ContextHubInfo
      */
     @RequiresPermission(anyOf = {
             android.Manifest.permission.LOCATION_HARDWARE,
             android.Manifest.permission.ACCESS_CONTEXT_HUB
     })
     @NonNull public List<ContextHubInfo> getContextHubs() {
+        if (GmsCompat.isEnabled()) {
+            return Collections.emptyList();
+        }
+
         try {
             return mService.getContextHubs();
         } catch (RemoteException e) {
             throw e.rethrowFromSystemServer();
         }
     }
 
     /**
      * Helper function to generate a stub for a non-query transaction callback.
      *
@@ -951,17 +957,22 @@ public final class ContextHubManager {
             }
         }
     };
 
     /** @throws ServiceNotFoundException
      * @hide */
     public ContextHubManager(Context context, Looper mainLooper) throws ServiceNotFoundException {
         mMainLooper = mainLooper;
         mService = IContextHubService.Stub.asInterface(
                 ServiceManager.getServiceOrThrow(Context.CONTEXTHUB_SERVICE));
+
+        if (GmsCompat.isEnabled()) {
+            return;
+        }
+
         try {
             mService.registerCallback(mClientCallback);
         } catch (RemoteException e) {
             throw e.rethrowFromSystemServer();
         }
     }
 }
diff --git a/core/java/android/net/ConnectivityManager.java b/core/java/android/net/ConnectivityManager.java
index ed03f5198d6fd3d3258386b669f0a319e029df85..18bbe5fc279fe2dde4b425a0b78279c0847b8f8f 100644
--- a/core/java/android/net/ConnectivityManager.java
+++ b/core/java/android/net/ConnectivityManager.java
@@ -21,20 +21,21 @@ import android.annotation.CallbackExecutor;
 import android.annotation.IntDef;
 import android.annotation.NonNull;
 import android.annotation.Nullable;
 import android.annotation.RequiresPermission;
 import android.annotation.SdkConstant;
 import android.annotation.SdkConstant.SdkConstantType;
 import android.annotation.SystemApi;
 import android.annotation.SystemService;
 import android.annotation.TestApi;
 import android.app.PendingIntent;
+import android.app.compat.gms.GmsCompat;
 import android.compat.annotation.UnsupportedAppUsage;
 import android.content.Context;
 import android.content.Intent;
 import android.net.IpSecManager.UdpEncapsulationSocket;
 import android.net.SocketKeepalive.Callback;
 import android.net.TetheringManager.StartTetheringCallback;
 import android.net.TetheringManager.TetheringEventCallback;
 import android.net.TetheringManager.TetheringRequest;
 import android.os.Binder;
 import android.os.Build;
@@ -2406,20 +2407,24 @@ public class ConnectivityManager {
      *
      * @return a boolean - {@code true} indicating Tethering is supported.
      *
      * @deprecated Use {@link TetheringEventCallback#onTetheringSupported(boolean)} instead.
      * {@hide}
      */
     @SystemApi
     @RequiresPermission(anyOf = {android.Manifest.permission.TETHER_PRIVILEGED,
             android.Manifest.permission.WRITE_SETTINGS})
     public boolean isTetheringSupported() {
+        if (GmsCompat.isEnabled()) {
+            return false;
+        }
+
         return mTetheringManager.isTetheringSupported();
     }
 
     /**
      * Callback for use with {@link #startTethering} to find out whether tethering succeeded.
      *
      * @deprecated Use {@link TetheringManager.StartTetheringCallback} instead.
      * @hide
      */
     @SystemApi
diff --git a/core/java/android/net/NetworkScoreManager.java b/core/java/android/net/NetworkScoreManager.java
index a190c473f0a036abbbca16a1691691ff5866c57d..62ba8e1aa49743c96c7075d64d63b6039aebf765 100644
--- a/core/java/android/net/NetworkScoreManager.java
+++ b/core/java/android/net/NetworkScoreManager.java
@@ -19,20 +19,21 @@ package android.net;
 import android.Manifest.permission;
 import android.annotation.CallbackExecutor;
 import android.annotation.IntDef;
 import android.annotation.NonNull;
 import android.annotation.Nullable;
 import android.annotation.RequiresPermission;
 import android.annotation.SdkConstant;
 import android.annotation.SdkConstant.SdkConstantType;
 import android.annotation.SystemApi;
 import android.annotation.SystemService;
+import android.app.compat.gms.GmsCompat;
 import android.content.Context;
 import android.os.Binder;
 import android.os.RemoteException;
 import android.os.ServiceManager;
 import android.os.ServiceManager.ServiceNotFoundException;
 import android.util.Log;
 
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.util.Collection;
@@ -240,20 +241,24 @@ public class NetworkScoreManager {
      * determine the current scorer and offer the user the ability to select a different scorer via
      * the {@link #ACTION_CHANGE_ACTIVE} intent.
      * @return the full package name of the current active scorer, or null if there is no active
      *         scorer.
      * @throws SecurityException if the caller doesn't hold either {@link permission#SCORE_NETWORKS}
      *                           or {@link permission#REQUEST_NETWORK_SCORES} permissions.
      */
     @RequiresPermission(anyOf = {android.Manifest.permission.SCORE_NETWORKS,
                                  android.Manifest.permission.REQUEST_NETWORK_SCORES})
     public String getActiveScorerPackage() {
+        if (GmsCompat.isEnabled()) {
+            return null;
+        }
+
         try {
             return mService.getActiveScorerPackage();
         } catch (RemoteException e) {
             throw e.rethrowFromSystemServer();
         }
     }
 
     /**
      * Returns metadata about the active scorer or <code>null</code> if there is no active scorer.
      *
@@ -441,39 +446,47 @@ public class NetworkScoreManager {
      * @param scoreCache implementation of {@link INetworkScoreCache} to store the scores
      * @param filterType the {@link ScoreUpdateFilter} to apply
      * @throws SecurityException if the caller does not hold the
      *         {@link permission#REQUEST_NETWORK_SCORES} permission.
      * @throws IllegalArgumentException if a score cache is already registered for this type.
      * @hide
      */
     @RequiresPermission(android.Manifest.permission.REQUEST_NETWORK_SCORES)
     public void registerNetworkScoreCache(int networkType, INetworkScoreCache scoreCache,
             @ScoreUpdateFilter int filterType) {
+        if (GmsCompat.isEnabled()) {
+            return;
+        }
+
         try {
             mService.registerNetworkScoreCache(networkType, scoreCache, filterType);
         } catch (RemoteException e) {
             throw e.rethrowFromSystemServer();
         }
     }
 
     /**
      * Unregister a network score cache.
      *
      * @param networkType the type of network this cache can handle. See {@link NetworkKey#type}.
      * @param scoreCache implementation of {@link INetworkScoreCache} to store the scores.
      * @throws SecurityException if the caller does not hold the
      *         {@link permission#REQUEST_NETWORK_SCORES} permission.
      * @throws IllegalArgumentException if a score cache is already registered for this type.
      * @hide
      */
     @RequiresPermission(android.Manifest.permission.REQUEST_NETWORK_SCORES)
     public void unregisterNetworkScoreCache(int networkType, INetworkScoreCache scoreCache) {
+        if (GmsCompat.isEnabled()) {
+            return;
+        }
+
         try {
             mService.unregisterNetworkScoreCache(networkType, scoreCache);
         } catch (RemoteException e) {
             throw e.rethrowFromSystemServer();
         }
     }
 
     /**
      * Base class for network score cache callback. Should be extended by applications and set
      * when calling {@link #registerNetworkScoreCallback(int, int, Executor, NetworkScoreCallback)}.
diff --git a/core/java/android/os/Build.java b/core/java/android/os/Build.java
index f9dabcf4b23e9772b1d947826709999e0a217347..1b37c72242c6bb28253f90e7b86dc719c38937f3 100755
--- a/core/java/android/os/Build.java
+++ b/core/java/android/os/Build.java
@@ -17,27 +17,30 @@
 package android.os;
 
 import android.Manifest;
 import android.annotation.NonNull;
 import android.annotation.RequiresPermission;
 import android.annotation.SuppressAutoDoc;
 import android.annotation.SystemApi;
 import android.annotation.TestApi;
 import android.app.ActivityThread;
 import android.app.Application;
+import android.app.compat.gms.GmsCompat;
 import android.compat.annotation.UnsupportedAppUsage;
 import android.content.Context;
 import android.sysprop.TelephonyProperties;
 import android.text.TextUtils;
 import android.util.Slog;
 import android.view.View;
 
+import com.android.internal.gmscompat.GmsHooks;
+
 import dalvik.system.VMRuntime;
 
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Objects;
 import java.util.stream.Collectors;
 
 /**
  * Information about the current build, extracted from system properties.
  */
@@ -160,20 +163,24 @@ public class Build {
      *     <li>If the calling app's target SDK is API level 28 or lower and the app does not have
      *     the READ_PHONE_STATE permission, or if the calling app is targeting API level 29 or
      *     higher, then a SecurityException is thrown.</li>
      * </ul>
      *
      * @return The serial number if specified.
      */
     @SuppressAutoDoc // No support for device / profile owner.
     @RequiresPermission(Manifest.permission.READ_PRIVILEGED_PHONE_STATE)
     public static String getSerial() {
+        if (GmsCompat.isEnabled()) {
+            return GmsHooks.getSerial();
+        }
+
         IDeviceIdentifiersPolicyService service = IDeviceIdentifiersPolicyService.Stub
                 .asInterface(ServiceManager.getService(Context.DEVICE_IDENTIFIERS_SERVICE));
         try {
             Application application = ActivityThread.currentApplication();
             String callingPackage = application != null ? application.getPackageName() : null;
             return service.getSerialForPackage(callingPackage, null);
         } catch (RemoteException e) {
             e.rethrowFromSystemServer();
         }
         return UNKNOWN;
diff --git a/core/java/android/os/UserManager.java b/core/java/android/os/UserManager.java
index 2465b0e418766501f92d2251a7db8991f03ae0a4..11f1ce399b8d2ead556a43a8f0c1eebb9497c646 100644
--- a/core/java/android/os/UserManager.java
+++ b/core/java/android/os/UserManager.java
@@ -28,20 +28,21 @@ import android.annotation.StringDef;
 import android.annotation.SystemApi;
 import android.annotation.SystemService;
 import android.annotation.TestApi;
 import android.annotation.UserHandleAware;
 import android.annotation.UserIdInt;
 import android.annotation.WorkerThread;
 import android.app.Activity;
 import android.app.ActivityManager;
 import android.app.PropertyInvalidatedCache;
 import android.app.admin.DevicePolicyManager;
+import android.app.compat.gms.GmsCompat;
 import android.compat.annotation.UnsupportedAppUsage;
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
 import android.content.IntentSender;
 import android.content.pm.UserInfo;
 import android.content.pm.UserInfo.UserInfoFlag;
 import android.content.res.Configuration;
 import android.content.res.Resources;
@@ -49,20 +50,21 @@ import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 import android.graphics.Rect;
 import android.graphics.drawable.Drawable;
 import android.location.LocationManager;
 import android.provider.Settings;
 import android.telephony.TelephonyManager;
 import android.util.AndroidException;
 import android.view.WindowManager.LayoutParams;
 
 import com.android.internal.R;
+import com.android.internal.gmscompat.GmsHooks;
 import com.android.internal.os.RoSystemProperties;
 import com.android.internal.util.FrameworkStatsLog;
 
 import java.io.IOException;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Set;
 
@@ -2023,34 +2025,42 @@ public class UserManager {
 
     /**
      * Checks if a user is a guest user.
      * @return whether user is a guest user.
      * @hide
      */
     @UnsupportedAppUsage
     @RequiresPermission(anyOf = {Manifest.permission.MANAGE_USERS,
             Manifest.permission.CREATE_USERS})
     public boolean isGuestUser(@UserIdInt int userId) {
+        if (GmsCompat.isEnabled()) {
+            return false;
+        }
+
         UserInfo user = getUserInfo(userId);
         return user != null && user.isGuest();
     }
 
     /**
      * Used to check if this process is running under a guest user. A guest user may be transient.
      *
      * @return whether this process is running under a guest user.
      * @hide
      */
     @SystemApi
     @RequiresPermission(anyOf = {Manifest.permission.MANAGE_USERS,
             Manifest.permission.CREATE_USERS})
     public boolean isGuestUser() {
+        if (GmsCompat.isEnabled()) {
+            return false;
+        }
+
         UserInfo user = getUserInfo(UserHandle.myUserId());
         return user != null && user.isGuest();
     }
 
 
     /**
      * Checks if the calling app is running in a demo user. When running in a demo user,
      * apps can be more helpful to the user, or explain their features in more detail.
      *
      * @return whether the caller is a demo user.
@@ -3162,20 +3172,24 @@ public class UserManager {
         }
     }
 
     /**
      * Return the number of users currently created on the device.
      * <p>This API is not for use by third-party apps. It requires the {@code MANAGE_USERS}
      * permission.</p>
      */
     @RequiresPermission(android.Manifest.permission.MANAGE_USERS)
     public int getUserCount() {
+        if (GmsCompat.isEnabled()) {
+            return 1;
+        }
+
         List<UserInfo> users = getUsers();
         return users != null ? users.size() : 1;
     }
 
     /**
      * Returns information for all users on this device, including ones marked for deletion.
      * To retrieve only users that are alive, use {@link #getUsers(boolean)}.
      *
      * @return the list of users that exist on the device.
      * @hide
@@ -3237,20 +3251,24 @@ public class UserManager {
     /**
      * Returns serial numbers of all users on this device.
      *
      * @param excludeDying specify if the list should exclude users being removed.
      * @return the list of serial numbers of users that exist on the device.
      * @hide
      */
     @SystemApi
     @RequiresPermission(android.Manifest.permission.MANAGE_USERS)
     public long[] getSerialNumbersOfUsers(boolean excludeDying) {
+        if (GmsCompat.isEnabled()) {
+            return GmsHooks.getSerialNumbersOfUsers(this);
+        }
+
         List<UserInfo> users = getUsers(excludeDying);
         long[] result = new long[users.size()];
         for (int i = 0; i < result.length; i++) {
             result[i] = users.get(i).serialNumber;
         }
         return result;
     }
 
     /**
      * @return the user's account name, null if not found.
@@ -3553,39 +3571,47 @@ public class UserManager {
 
     /**
      * Returns the parent of the profile which this method is called from
      * or null if called from a user that is not a profile.
      *
      * @hide
      */
     @UnsupportedAppUsage
     @RequiresPermission(android.Manifest.permission.MANAGE_USERS)
     public UserInfo getProfileParent(@UserIdInt int userId) {
+        if (GmsCompat.isEnabled()) {
+            return null;
+        }
+
         try {
             return mService.getProfileParent(userId);
         } catch (RemoteException re) {
             throw re.rethrowFromSystemServer();
         }
     }
 
     /**
      * Get the parent of a user profile.
      *
      * @param user the handle of the user profile
      *
      * @return the parent of the user or {@code null} if the user is not profile
      *
      * @hide
      */
     @SystemApi
     @RequiresPermission(android.Manifest.permission.MANAGE_USERS)
     public @Nullable UserHandle getProfileParent(@NonNull UserHandle user) {
+        if (GmsCompat.isEnabled()) {
+            return null;
+        }
+
         UserInfo info = getProfileParent(user.getIdentifier());
 
         if (info == null) {
             return null;
         }
 
         return UserHandle.of(info.id);
     }
 
     /**
diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index a9698f64476ab71efda6375da0689be16bacab96..794f065b4388ae3a82bb9e1ebfc1ea15c28d250a 100755
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -29,20 +29,21 @@ import android.annotation.SystemApi;
 import android.annotation.TestApi;
 import android.annotation.UserIdInt;
 import android.app.ActivityThread;
 import android.app.AppOpsManager;
 import android.app.Application;
 import android.app.AutomaticZenRule;
 import android.app.NotificationChannel;
 import android.app.NotificationManager;
 import android.app.SearchManager;
 import android.app.WallpaperManager;
+import android.app.compat.gms.GmsCompat;
 import android.compat.annotation.UnsupportedAppUsage;
 import android.content.ComponentName;
 import android.content.ContentResolver;
 import android.content.ContentValues;
 import android.content.Context;
 import android.content.IContentProvider;
 import android.content.Intent;
 import android.content.pm.ActivityInfo;
 import android.content.pm.PackageManager;
 import android.content.pm.ResolveInfo;
@@ -2643,20 +2644,24 @@ public final class Settings {
             mCallGetCommand = getCommand;
             mCallSetCommand = setCommand;
             mCallListCommand = listCommand;
             mCallSetAllCommand = setAllCommand;
             mProviderHolder = providerHolder;
         }
 
         public boolean putStringForUser(ContentResolver cr, String name, String value,
                 String tag, boolean makeDefault, final int userHandle,
                 boolean overrideableByRestore) {
+            if (GmsCompat.isEnabled()) {
+                return true;
+            }
+
             try {
                 Bundle arg = new Bundle();
                 arg.putString(Settings.NameValueTable.VALUE, value);
                 arg.putInt(CALL_METHOD_USER_KEY, userHandle);
                 if (tag != null) {
                     arg.putString(CALL_METHOD_TAG_KEY, tag);
                 }
                 if (makeDefault) {
                     arg.putBoolean(CALL_METHOD_MAKE_DEFAULT_KEY, true);
                 }
diff --git a/core/java/com/android/internal/gmscompat/GmsHooks.java b/core/java/com/android/internal/gmscompat/GmsHooks.java
index a4d2aae22e3b425f0fdb3baa39241c9bcb24c1f8..72d7149526ce413443ad4251f42076ea843493b1 100644
--- a/core/java/com/android/internal/gmscompat/GmsHooks.java
+++ b/core/java/com/android/internal/gmscompat/GmsHooks.java
@@ -9,48 +9,62 @@
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 package com.android.internal.gmscompat;
 
+import android.annotation.SuppressLint;
+import android.app.ActivityThread;
+import android.app.Application;
 import android.app.Notification;
 import android.app.NotificationChannel;
 import android.app.NotificationManager;
 import android.app.PendingIntent;
 import android.app.Service;
 import android.app.compat.gms.GmsCompat;
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.content.pm.SharedLibraryInfo;
+import android.os.Build;
+import android.os.Process;
+import android.os.UserManager;
+import android.provider.Settings;
 import android.util.Log;
+import android.webkit.WebView;
+
+import java.util.Collections;
+import java.util.List;
 
 /**
  * API shims for Google Play Services compatibility. Hooks that are more complicated than a simple
  * constant return value should be delegated to this class for easier maintenance.
  *
  * @hide
  */
 public final class GmsHooks {
     private static final String TAG = "GmsHooks";
 
     // Foreground service notifications
     private static final String FGS_CHANNEL_ID = "service_shim";
     private static final int FGS_NOTIFICATION_ID = 529977835;
     private static boolean fgsChannelCreated = false;
 
     // Static only
     private GmsHooks() { }
 
+
     /*
      * Foreground service notifications to keep GMS services alive
      */
 
     // Make all services foreground to keep them alive
     // ContextImpl#startService(Intent)
     public static ComponentName startService(Context context, Intent service) {
         return context.startForegroundService(service);
     }
 
@@ -94,11 +108,83 @@ public final class GmsHooks {
         Log.d(TAG, "Posting notification for service: " + service.getClass().getName());
         service.startForeground(FGS_NOTIFICATION_ID, notification);
     }
 
     // GMS tries to clean up its own notification channels periodically.
     // Don't let it delete the FGS shim channel because that throws an exception and crashes GMS.
     // NotificationManager#deleteNotificationChannel(String)
     public static boolean skipDeleteNotificationChannel(String channelId) {
         return GmsCompat.isEnabled() && FGS_CHANNEL_ID.equals(channelId);
     }
+
+
+    /**
+     * API shims
+     */
+
+    // Report a single user on the system
+    // UserManager#getSerialNumbersOfUsers(boolean)
+    public static long[] getSerialNumbersOfUsers(UserManager userManager) {
+        return new long[] { userManager.getSerialNumberForUser(Process.myUserHandle()) };
+    }
+
+    // Current user is always active
+    // ActivityManager#getCurrentUser()
+    public static int getCurrentUser() {
+        return Process.myUserHandle().getIdentifier();
+    }
+
+    /**
+     * Use the per-app SSAID as a random serial number for SafetyNet. This doesn't necessarily make
+     * pass, but at least it retusn a valid "failed" response and stops spamming device key
+     * requests.
+     *
+     * This isn't a privacy risk because all unprivileged apps already have access to random SSAIDs.
+     */
+    // Build#getSerial()
+    @SuppressLint("HardwareIds")
+    public static String getSerial() {
+        Application app = ActivityThread.currentApplication();
+        if (app == null) {
+            return Build.UNKNOWN;
+        }
+
+        String ssaid = Settings.Secure.getString(app.getContentResolver(),
+                Settings.Secure.ANDROID_ID);
+        String serial = ssaid.toUpperCase();
+        Log.d(TAG, "Generating serial number from SSAID: " + serial);
+        return serial;
+    }
+
+    // Report no shared libraries
+    // ApplicationPackageManager#getSharedLibrariesAsUser(int, int)
+    public static List<SharedLibraryInfo> getSharedLibrariesAsUser() {
+        // TODO: Report standard Pixel libraries to fix GCam installation?
+        return Collections.emptyList();
+    }
+
+    // Only get package info for current user
+    // ApplicationPackageManager#getPackageInfo(VersionedPackage, int)
+    // ApplicationPackageManager#getPackageInfoAsUser(String, int, int)
+    public static int getPackageInfoFlags(int flags) {
+        if (!GmsCompat.isEnabled()) {
+            return flags;
+        }
+
+        // Remove MATCH_ANY_USER flag to avoid permission denial
+        return flags & ~PackageManager.MATCH_ANY_USER;
+    }
+
+    // Fix RuntimeException: Using WebView from more than one process at once with the same data
+    // directory is not supported. https://crbug.com/558377
+    // Instrumentation#newApplication(ClassLoader, String, Context)
+    public static void initApplicationBeforeOnCreate(Application app) {
+        if (!GmsCompat.isEnabled() || app == null) {
+            return;
+        }
+
+        String processName = Application.getProcessName();
+        if (!app.getPackageName().equals(processName)) {
+            WebView.setDataDirectorySuffix("process-shim--" + processName);
+        }
+    }
 }
diff --git a/location/java/android/location/LocationManager.java b/location/java/android/location/LocationManager.java
index b77a249d0fe9098c0be7507a87871598b326c3c9..0e940da0fb5c5da1eb4c7abc2ea6f07e6d6620df 100644
--- a/location/java/android/location/LocationManager.java
+++ b/location/java/android/location/LocationManager.java
@@ -30,20 +30,21 @@ import android.annotation.NonNull;
 import android.annotation.Nullable;
 import android.annotation.RequiresFeature;
 import android.annotation.RequiresPermission;
 import android.annotation.SystemApi;
 import android.annotation.SystemService;
 import android.annotation.TestApi;
 import android.app.AlarmManager;
 import android.app.AppOpsManager;
 import android.app.PendingIntent;
 import android.app.PropertyInvalidatedCache;
+import android.app.compat.gms.GmsCompat;
 import android.compat.Compatibility;
 import android.compat.annotation.ChangeId;
 import android.compat.annotation.EnabledAfter;
 import android.compat.annotation.UnsupportedAppUsage;
 import android.content.Context;
 import android.content.pm.PackageManager;
 import android.os.Binder;
 import android.os.Build;
 import android.os.Bundle;
 import android.os.CancellationSignal;
@@ -406,20 +407,24 @@ public class LocationManager {
     }
 
     /**
      * Set whether the extra location controller package is currently enabled on the device.
      *
      * @hide
      */
     @SystemApi
     @RequiresPermission(Manifest.permission.LOCATION_HARDWARE)
     public void setExtraLocationControllerPackageEnabled(boolean enabled) {
+        if (GmsCompat.isEnabled()) {
+            return;
+        }
+
         try {
             mService.setExtraLocationControllerPackageEnabled(enabled);
         } catch (RemoteException e) {
             e.rethrowFromSystemServer();
         }
     }
 
     /**
      * Returns whether extra location controller package is currently enabled on the device.
      *
diff --git a/services/core/java/com/android/server/am/ActivityManagerService.java b/services/core/java/com/android/server/am/ActivityManagerService.java
index 81a44b431a8e83a4874bb650d15a5f8ab08564ed..bfc1770c5a54c08fa9eb210bab144cf9e4d33665 100644
--- a/services/core/java/com/android/server/am/ActivityManagerService.java
+++ b/services/core/java/com/android/server/am/ActivityManagerService.java
@@ -179,20 +179,21 @@ import android.app.IUidObserver;
 import android.app.IUserSwitchObserver;
 import android.app.Instrumentation;
 import android.app.Notification;
 import android.app.NotificationManager;
 import android.app.PendingIntent;
 import android.app.ProcessMemoryState;
 import android.app.ProfilerInfo;
 import android.app.PropertyInvalidatedCache;
 import android.app.WaitResult;
 import android.app.backup.IBackupManager;
+import android.app.compat.gms.GmsCompat;
 import android.app.usage.UsageEvents;
 import android.app.usage.UsageEvents.Event;
 import android.app.usage.UsageStatsManager;
 import android.app.usage.UsageStatsManagerInternal;
 import android.appwidget.AppWidgetManager;
 import android.content.AutofillOptions;
 import android.content.BroadcastReceiver;
 import android.content.ComponentCallbacks2;
 import android.content.ComponentName;
 import android.content.ContentCaptureOptions;
@@ -15109,20 +15110,24 @@ public class ActivityManagerService extends IActivityManager.Stub
 
     @Override
     public int handleIncomingUser(int callingPid, int callingUid, int userId, boolean allowAll,
             boolean requireFull, String name, String callerPackage) {
         return mUserController.handleIncomingUser(callingPid, callingUid, userId, allowAll,
                 requireFull ? ALLOW_FULL_ONLY : ALLOW_NON_FULL, name, callerPackage);
     }
 
     boolean isSingleton(String componentProcessName, ApplicationInfo aInfo,
             String className, int flags) {
+        if (GmsCompat.isGmsApp(aInfo)) {
+            return false;
+        }
+
         boolean result = false;
         // For apps that don't have pre-defined UIDs, check for permission
         if (UserHandle.getAppId(aInfo.uid) >= FIRST_APPLICATION_UID) {
             if ((flags & ServiceInfo.FLAG_SINGLE_USER) != 0) {
                 if (ActivityManager.checkUidPermission(
                         INTERACT_ACROSS_USERS,
                         aInfo.uid) != PackageManager.PERMISSION_GRANTED) {
                     ComponentName comp = new ComponentName(aInfo.packageName, className);
                     String msg = "Permission Denial: Component " + comp.flattenToShortString()
                             + " requests FLAG_SINGLE_USER, but app does not hold "
diff --git a/telephony/java/android/telephony/TelephonyManager.java b/telephony/java/android/telephony/TelephonyManager.java
index 10c3e6db5205104750ad5279ed49b419ff206f8e..8bf2d41289b39cfe46bd86c8c3ca2f973c4afa32 100644
--- a/telephony/java/android/telephony/TelephonyManager.java
+++ b/telephony/java/android/telephony/TelephonyManager.java
@@ -31,20 +31,21 @@ import android.annotation.Nullable;
 import android.annotation.RequiresPermission;
 import android.annotation.SdkConstant;
 import android.annotation.SdkConstant.SdkConstantType;
 import android.annotation.SuppressAutoDoc;
 import android.annotation.SuppressLint;
 import android.annotation.SystemApi;
 import android.annotation.SystemService;
 import android.annotation.TestApi;
 import android.annotation.WorkerThread;
 import android.app.PendingIntent;
+import android.app.compat.gms.GmsCompat;
 import android.app.role.RoleManager;
 import android.compat.Compatibility;
 import android.compat.annotation.ChangeId;
 import android.compat.annotation.EnabledAfter;
 import android.compat.annotation.UnsupportedAppUsage;
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
 import android.database.Cursor;
 import android.net.ConnectivityManager;
@@ -1925,20 +1926,24 @@ public class TelephonyManager {
      *     higher, then a SecurityException is thrown.</li>
      * </ul>
      *
      * @deprecated Use {@link #getImei} which returns IMEI for GSM or {@link #getMeid} which returns
      * MEID for CDMA.
      */
     @Deprecated
     @SuppressAutoDoc // No support for device / profile owner or carrier privileges (b/72967236).
     @RequiresPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE)
     public String getDeviceId() {
+        if (GmsCompat.isEnabled()) {
+            return null;
+        }
+
         try {
             ITelephony telephony = getITelephony();
             if (telephony == null)
                 return null;
             return telephony.getDeviceIdWithFeature(mContext.getOpPackageName(),
                     mContext.getAttributionTag());
         } catch (RemoteException ex) {
             return null;
         } catch (NullPointerException ex) {
             return null;
@@ -1980,20 +1985,24 @@ public class TelephonyManager {
      *
      * @param slotIndex of which deviceID is returned
      *
      * @deprecated Use {@link #getImei} which returns IMEI for GSM or {@link #getMeid} which returns
      * MEID for CDMA.
      */
     @Deprecated
     @SuppressAutoDoc // No support for device / profile owner or carrier privileges (b/72967236).
     @RequiresPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE)
     public String getDeviceId(int slotIndex) {
+        if (GmsCompat.isEnabled()) {
+            return null;
+        }
+
         // FIXME this assumes phoneId == slotIndex
         try {
             IPhoneSubInfo info = getSubscriberInfoService();
             if (info == null)
                 return null;
             return info.getDeviceIdForPhone(slotIndex, mContext.getOpPackageName(),
                     mContext.getAttributionTag());
         } catch (RemoteException ex) {
             return null;
         } catch (NullPointerException ex) {
@@ -2161,20 +2170,24 @@ public class TelephonyManager {
      *     <li>If the calling app's target SDK is API level 28 or lower and the app does not have
      *     the READ_PHONE_STATE permission, or if the calling app is targeting API level 29 or
      *     higher, then a SecurityException is thrown.</li>
      * </ul>
      *
      * @param slotIndex of which MEID is returned
      */
     @SuppressAutoDoc // No support for device / profile owner or carrier privileges (b/72967236).
     @RequiresPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE)
     public String getMeid(int slotIndex) {
+        if (GmsCompat.isEnabled()) {
+            return null;
+        }
+
         ITelephony telephony = getITelephony();
         if (telephony == null) return null;
 
         try {
             String meid = telephony.getMeidForSlot(slotIndex, getOpPackageName(),
                     getAttributionTag());
             if (TextUtils.isEmpty(meid)) {
                 Log.d(TAG, "getMeid: return null because MEID is not available");
                 return null;
             }
@@ -3018,20 +3031,24 @@ public class TelephonyManager {
      * @see #NETWORK_TYPE_LTE
      * @see #NETWORK_TYPE_EHRPD
      * @see #NETWORK_TYPE_HSPAP
      * @see #NETWORK_TYPE_NR
      *
      * @hide
      */
     @RequiresPermission(android.Manifest.permission.READ_PHONE_STATE)
     @UnsupportedAppUsage(maxTargetSdk = Build.VERSION_CODES.P)
     public int getNetworkType(int subId) {
+        if (GmsCompat.isEnabled()) {
+            return NETWORK_TYPE_UNKNOWN;
+        }
+
         try {
             ITelephony telephony = getITelephony();
             if (telephony != null) {
                 return telephony.getNetworkTypeForSubscriber(subId, getOpPackageName(),
                         getAttributionTag());
             } else {
                 // This can happen when the ITelephony interface is not up yet.
                 return NETWORK_TYPE_UNKNOWN;
             }
         } catch (RemoteException ex) {
@@ -3926,20 +3943,24 @@ public class TelephonyManager {
      *     the READ_PHONE_STATE permission, or if the calling app is targeting API level 29 or
      *     higher, then a SecurityException is thrown.</li>
      * </ul>
      *
      * @param subId for which Sim Serial number is returned
      * @hide
      */
     @RequiresPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE)
     @UnsupportedAppUsage
     public String getSimSerialNumber(int subId) {
+        if (GmsCompat.isEnabled()) {
+            return null;
+        }
+
         try {
             IPhoneSubInfo info = getSubscriberInfoService();
             if (info == null)
                 return null;
             return info.getIccSerialNumberForSubscriber(subId, mContext.getOpPackageName(),
                     mContext.getAttributionTag());
         } catch (RemoteException ex) {
             return null;
         } catch (NullPointerException ex) {
             // This could happen before phone restarts due to crashing
@@ -4055,20 +4076,24 @@ public class TelephonyManager {
      * Gets all the UICC slots. The objects in the array can be null if the slot info is not
      * available, which is possible between phone process starting and getting slot info from modem.
      *
      * @return UiccSlotInfo array.
      *
      * @hide
      */
     @SystemApi
     @RequiresPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE)
     public UiccSlotInfo[] getUiccSlotsInfo() {
+        if (GmsCompat.isEnabled()) {
+            return null;
+        }
+
         try {
             ITelephony telephony = getITelephony();
             if (telephony == null) {
                 return null;
             }
             return telephony.getUiccSlotsInfo();
         } catch (RemoteException e) {
             return null;
         }
     }
@@ -4219,20 +4244,24 @@ public class TelephonyManager {
      *     the READ_PHONE_STATE permission, or if the calling app is targeting API level 29 or
      *     higher, then a SecurityException is thrown.</li>
      * </ul>
      *
      * @param subId whose subscriber id is returned
      * @hide
      */
     @RequiresPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE)
     @UnsupportedAppUsage(maxTargetSdk = Build.VERSION_CODES.P)
     public String getSubscriberId(int subId) {
+        if (GmsCompat.isEnabled()) {
+            return null;
+        }
+
         try {
             IPhoneSubInfo info = getSubscriberInfoService();
             if (info == null)
                 return null;
             return info.getSubscriberIdForSubscriber(subId, mContext.getOpPackageName(),
                     mContext.getAttributionTag());
         } catch (RemoteException ex) {
             return null;
         } catch (NullPointerException ex) {
             // This could happen before phone restarts due to crashing
diff --git a/wifi/java/android/net/wifi/WifiManager.java b/wifi/java/android/net/wifi/WifiManager.java
index 4a61db894b8902fede8ee120e14099e117f76552..52f6186de63f877a7a526487fe37261c00580514 100644
--- a/wifi/java/android/net/wifi/WifiManager.java
+++ b/wifi/java/android/net/wifi/WifiManager.java
@@ -25,20 +25,21 @@ import android.annotation.IntDef;
 import android.annotation.IntRange;
 import android.annotation.NonNull;
 import android.annotation.Nullable;
 import android.annotation.RequiresPermission;
 import android.annotation.SdkConstant;
 import android.annotation.SdkConstant.SdkConstantType;
 import android.annotation.SuppressLint;
 import android.annotation.SystemApi;
 import android.annotation.SystemService;
 import android.app.ActivityManager;
+import android.app.compat.gms.GmsCompat;
 import android.compat.annotation.UnsupportedAppUsage;
 import android.content.Context;
 import android.content.pm.ParceledListSlice;
 import android.net.ConnectivityManager;
 import android.net.DhcpInfo;
 import android.net.MacAddress;
 import android.net.Network;
 import android.net.NetworkStack;
 import android.net.wifi.hotspot2.IProvisioningCallback;
 import android.net.wifi.hotspot2.OsuProvider;
@@ -1425,20 +1426,24 @@ public class WifiManager {
      * @hide
      */
     @SystemApi
     @RequiresPermission(anyOf = {
             android.Manifest.permission.NETWORK_SETTINGS,
             android.Manifest.permission.NETWORK_SETUP_WIZARD
     })
     @NonNull
     public List<Pair<WifiConfiguration, Map<Integer, List<ScanResult>>>> getAllMatchingWifiConfigs(
             @NonNull List<ScanResult> scanResults) {
+        if (GmsCompat.isEnabled()) {
+            return Collections.emptyList();
+        }
+
         List<Pair<WifiConfiguration, Map<Integer, List<ScanResult>>>> configs = new ArrayList<>();
         try {
             Map<String, Map<Integer, List<ScanResult>>> results =
                     mService.getAllMatchingPasspointProfilesForScanResults(scanResults);
             if (results.isEmpty()) {
                 return configs;
             }
             List<WifiConfiguration> wifiConfigurations =
                     mService.getWifiConfigsForPasspointProfiles(
                             new ArrayList<>(results.keySet()));
@@ -1497,20 +1502,24 @@ public class WifiManager {
      * @hide
      */
     @SystemApi
     @RequiresPermission(anyOf = {
             android.Manifest.permission.NETWORK_SETTINGS,
             android.Manifest.permission.NETWORK_SETUP_WIZARD
     })
     @NonNull
     public Map<OsuProvider, List<ScanResult>> getMatchingOsuProviders(
             @Nullable List<ScanResult> scanResults) {
+        if (GmsCompat.isEnabled()) {
+            return Collections.emptyMap();
+        }
+
         if (scanResults == null) {
             return new HashMap<>();
         }
         try {
             return mService.getMatchingOsuProviders(scanResults);
         } catch (RemoteException e) {
             throw e.rethrowFromSystemServer();
         }
     }
 
@@ -1527,20 +1536,24 @@ public class WifiManager {
      * @hide
      */
     @SystemApi
     @RequiresPermission(anyOf = {
             android.Manifest.permission.NETWORK_SETTINGS,
             android.Manifest.permission.NETWORK_SETUP_WIZARD
     })
     @NonNull
     public Map<OsuProvider, PasspointConfiguration> getMatchingPasspointConfigsForOsuProviders(
             @NonNull Set<OsuProvider> osuProviders) {
+        if (GmsCompat.isEnabled()) {
+            return Collections.emptyMap();
+        }
+
         try {
             return mService.getMatchingPasspointConfigsForOsuProviders(
                     new ArrayList<>(osuProviders));
         } catch (RemoteException e) {
             throw e.rethrowFromSystemServer();
         }
     }
 
     /**
      * Add a new network description to the set of configured networks.
@@ -4982,20 +4995,24 @@ public class WifiManager {
      * Get {@link Network} object of current wifi network, or null if not connected.
      * @hide
      */
     @Nullable
     @SystemApi
     @RequiresPermission(anyOf = {
             android.Manifest.permission.NETWORK_SETTINGS,
             android.Manifest.permission.NETWORK_SETUP_WIZARD
     })
     public Network getCurrentNetwork() {
+        if (GmsCompat.isEnabled()) {
+            return null;
+        }
+
         try {
             return mService.getCurrentNetwork();
         } catch (RemoteException e) {
             throw e.rethrowFromSystemServer();
         }
     }
 
     /**
      * Deprecated
      * returns false

commit fbf8a8827b6f8af59190cbdb41869d1a3de429e5
Author: Danny Lin <danny@kdrag0n.dev>
Date:   Sat 2021-07-10 01:58:47-0700

    gmscompat: Add REQUEST_INSTALL_PACKAGES permission to Play Store
    
    We have a hook to request user action for package installs from Play
    Store, but it still needs the REQUEST_INSTALL_PACKAGES permission to
    work.
    
    Change-Id: I83f7ad20f90067dc68bb145fdaf5ab5a89972a92
---
 core/java/android/content/pm/PackageParser.java             | 13 +++++++++----
 .../android/content/pm/parsing/ParsingPackageUtils.java     |  3 +++
 2 files changed, 12 insertions(+), 4 deletions(-)

diff --git a/core/java/android/content/pm/PackageParser.java b/core/java/android/content/pm/PackageParser.java
index 736f50f458ef8375ff300b3dfd6c8d8e1e00229e..89212e06589f4413a8018a107d6c539cbe94ffd5 100644
--- a/core/java/android/content/pm/PackageParser.java
+++ b/core/java/android/content/pm/PackageParser.java
@@ -87,20 +87,21 @@ import android.util.PackageUtils;
 import android.util.Pair;
 import android.util.Slog;
 import android.util.SparseArray;
 import android.util.TypedValue;
 import android.util.apk.ApkSignatureVerifier;
 import android.view.Display;
 import android.view.Gravity;
 
 import com.android.internal.R;
 import com.android.internal.annotations.VisibleForTesting;
+import com.android.internal.gmscompat.GmsInfo;
 import com.android.internal.os.ClassLoaderFactory;
 import com.android.internal.util.ArrayUtils;
 import com.android.internal.util.XmlUtils;
 
 import libcore.io.IoUtils;
 import libcore.util.EmptyArray;
 import libcore.util.HexEncoding;
 
 import org.xmlpull.v1.XmlPullParser;
 import org.xmlpull.v1.XmlPullParserException;
@@ -251,46 +252,50 @@ public class PackageParser {
     /** @hide */
     public static final String APEX_FILE_EXTENSION = ".apex";
 
     /** @hide */
     public static class NewPermissionInfo {
         @UnsupportedAppUsage
         public final String name;
         @UnsupportedAppUsage
         public final int sdkVersion;
         public final int fileVersion;
+        public final String targetPackage;
 
-        public NewPermissionInfo(String name, int sdkVersion, int fileVersion) {
+        public NewPermissionInfo(String name, int sdkVersion, int fileVersion, String targetPackage) {
             this.name = name;
             this.sdkVersion = sdkVersion;
             this.fileVersion = fileVersion;
+            this.targetPackage = targetPackage;
         }
     }
 
     /**
      * List of new permissions that have been added since 1.0.
      * NOTE: These must be declared in SDK version order, with permissions
      * added to older SDKs appearing before those added to newer SDKs.
      * If sdkVersion is 0, then this is not a permission that we want to
      * automatically add to older apps, but we do want to allow it to be
      * granted during a platform update.
      * @hide
      */
     @UnsupportedAppUsage
     public static final PackageParser.NewPermissionInfo NEW_PERMISSIONS[] =
         new PackageParser.NewPermissionInfo[] {
             new PackageParser.NewPermissionInfo(android.Manifest.permission.OTHER_SENSORS,
-                    android.os.Build.VERSION_CODES.CUR_DEVELOPMENT + 1, 0),
+                    android.os.Build.VERSION_CODES.CUR_DEVELOPMENT + 1, 0, null),
+            new PackageParser.NewPermissionInfo(android.Manifest.permission.REQUEST_INSTALL_PACKAGES,
+                    android.os.Build.VERSION_CODES.CUR_DEVELOPMENT + 1, 0, GmsInfo.PACKAGE_PLAY_STORE),
             new PackageParser.NewPermissionInfo(android.Manifest.permission.WRITE_EXTERNAL_STORAGE,
-                    android.os.Build.VERSION_CODES.DONUT, 0),
+                    android.os.Build.VERSION_CODES.DONUT, 0, null),
             new PackageParser.NewPermissionInfo(android.Manifest.permission.READ_PHONE_STATE,
-                    android.os.Build.VERSION_CODES.DONUT, 0)
+                    android.os.Build.VERSION_CODES.DONUT, 0, null),
     };
 
     /**
      * @deprecated callers should move to explicitly passing around source path.
      */
     @Deprecated
     public String mArchiveSourcePath;
 
     public String[] mSeparateProcesses;
     private boolean mOnlyCoreApps;
diff --git a/core/java/android/content/pm/parsing/ParsingPackageUtils.java b/core/java/android/content/pm/parsing/ParsingPackageUtils.java
index ab0ed51fb909f554a38974f89749ca2c88c6e52a..c33fc0b13fda25a31d6fbc5f6338994cf250a57d 100644
--- a/core/java/android/content/pm/parsing/ParsingPackageUtils.java
+++ b/core/java/android/content/pm/parsing/ParsingPackageUtils.java
@@ -2521,20 +2521,23 @@ public class ParsingPackageUtils {
 
     private static void convertNewPermissions(ParsingPackage pkg) {
         final int NP = PackageParser.NEW_PERMISSIONS.length;
         StringBuilder newPermsMsg = null;
         for (int ip = 0; ip < NP; ip++) {
             final PackageParser.NewPermissionInfo npi
                     = PackageParser.NEW_PERMISSIONS[ip];
             if (pkg.getTargetSdkVersion() >= npi.sdkVersion) {
                 break;
             }
+            if (npi.targetPackage != null && !pkg.getPackageName().equals(npi.targetPackage)) {
+                continue;
+            }
             if (!pkg.getRequestedPermissions().contains(npi.name)) {
                 if (newPermsMsg == null) {
                     newPermsMsg = new StringBuilder(128);
                     newPermsMsg.append(pkg.getPackageName());
                     newPermsMsg.append(": compat added ");
                 } else {
                     newPermsMsg.append(' ');
                 }
                 newPermsMsg.append(npi.name);
                 pkg.addRequestedPermission(npi.name)

commit a7bc52443c5e4f28154a4d0c50654da9567d89f4
Author: Danny Lin <danny@kdrag0n.dev>
Date:   Mon 2021-07-12 16:00:37-0700

    gmscompat: Handle user action requests for package install sessions
    
    This makes Play Store app installation work to an extent by handling the
    user action requests required for unprivileged apps. However, Play Store
    often fails to receive the "installation succeeded" event, causing it to
    hang on "Installing..." until it times out.
    
    Change-Id: Ie230cc9438706ac0668f6c21d632b375dec2ac68
---
 core/java/android/app/LoadedApk.java               |  5 +++
 .../com/android/internal/gmscompat/GmsHooks.java   | 36 ++++++++++++++++++++++
 2 files changed, 41 insertions(+)

diff --git a/core/java/android/app/LoadedApk.java b/core/java/android/app/LoadedApk.java
index ffd02c9256066b78e13a9693959485bca58fba74..aee8bff039c520e9b9ddf8dc97ec813ec29f3296 100644
--- a/core/java/android/app/LoadedApk.java
+++ b/core/java/android/app/LoadedApk.java
@@ -52,20 +52,21 @@ import android.security.net.config.NetworkSecurityConfigProvider;
 import android.sysprop.VndkProperties;
 import android.text.TextUtils;
 import android.util.AndroidRuntimeException;
 import android.util.ArrayMap;
 import android.util.Log;
 import android.util.Slog;
 import android.util.SparseArray;
 import android.view.Display;
 import android.view.DisplayAdjustments;
 
+import com.android.internal.gmscompat.GmsHooks;
 import com.android.internal.util.ArrayUtils;
 
 import dalvik.system.BaseDexClassLoader;
 import dalvik.system.VMRuntime;
 
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
 import java.lang.ref.WeakReference;
 import java.lang.reflect.InvocationTargetException;
@@ -1469,20 +1470,24 @@ public final class LoadedApk {
             final LoadedApk.ReceiverDispatcher mStrongRef;
 
             InnerReceiver(LoadedApk.ReceiverDispatcher rd, boolean strong) {
                 mDispatcher = new WeakReference<LoadedApk.ReceiverDispatcher>(rd);
                 mStrongRef = strong ? rd : null;
             }
 
             @Override
             public void performReceive(Intent intent, int resultCode, String data,
                     Bundle extras, boolean ordered, boolean sticky, int sendingUser) {
+                if (GmsHooks.performReceive(intent)) {
+                    return;
+                }
+
                 final LoadedApk.ReceiverDispatcher rd;
                 if (intent == null) {
                     Log.wtf(TAG, "Null intent received");
                     rd = null;
                 } else {
                     rd = mDispatcher.get();
                 }
                 if (ActivityThread.DEBUG_BROADCAST) {
                     int seq = intent.getIntExtra("seq", -1);
                     Slog.i(ActivityThread.TAG, "Receiving broadcast " + intent.getAction()
diff --git a/core/java/com/android/internal/gmscompat/GmsHooks.java b/core/java/com/android/internal/gmscompat/GmsHooks.java
index 72d7149526ce413443ad4251f42076ea843493b1..d3cef1969f0a13d587f3126a14fa888c851f689e 100644
--- a/core/java/com/android/internal/gmscompat/GmsHooks.java
+++ b/core/java/com/android/internal/gmscompat/GmsHooks.java
@@ -21,20 +21,21 @@ import android.app.ActivityThread;
 import android.app.Application;
 import android.app.Notification;
 import android.app.NotificationChannel;
 import android.app.NotificationManager;
 import android.app.PendingIntent;
 import android.app.Service;
 import android.app.compat.gms.GmsCompat;
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
+import android.content.pm.PackageInstaller;
 import android.content.pm.PackageManager;
 import android.content.pm.SharedLibraryInfo;
 import android.os.Build;
 import android.os.Process;
 import android.os.UserManager;
 import android.provider.Settings;
 import android.util.Log;
 import android.webkit.WebView;
 
 import java.util.Collections;
@@ -180,11 +181,46 @@ public final class GmsHooks {
     public static void initApplicationBeforeOnCreate(Application app) {
         if (!GmsCompat.isEnabled() || app == null) {
             return;
         }
 
         String processName = Application.getProcessName();
         if (!app.getPackageName().equals(processName)) {
             WebView.setDataDirectorySuffix("process-shim--" + processName);
         }
     }
+
+    // Request user action for package install sessions
+    // LoadedApk.ReceiverDispatcher.InnerReceiver#performReceive(Intent, int, String, Bundle, boolean, boolean, int)
+    public static boolean performReceive(Intent intent) {
+        if (!GmsCompat.isEnabled()) {
+            return false;
+        }
+
+        // Validate - we only want to handle user action requests
+        if (!(intent.hasExtra(PackageInstaller.EXTRA_SESSION_ID) &&
+                intent.hasExtra(PackageInstaller.EXTRA_STATUS) &&
+                intent.hasExtra(Intent.EXTRA_INTENT))) {
+            return false;
+        }
+        if (intent.getIntExtra(PackageInstaller.EXTRA_STATUS, 0) !=
+                PackageInstaller.STATUS_PENDING_USER_ACTION) {
+            return false;
+        }
+
+        Application app = ActivityThread.currentApplication();
+        if (app == null) {
+            return false;
+        }
+
+        // Use the intent
+        Log.i(TAG, "Requesting user confirmation for package install session");
+        Intent confirmIntent = intent.getParcelableExtra(Intent.EXTRA_INTENT);
+        // Make it work with the Application context
+        confirmIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+        // TODO: post notification if app is in the background
+        app.startActivity(confirmIntent);
+
+        // Don't dispatch it, otherwise Play Store abandons the session
+        return true;
+    }
 }

commit d7728ec6216f119e5d5236c48c1a8ddbcb2904a3
Author: Danny Lin <danny@kdrag0n.dev>
Date:   Sat 2021-07-10 02:11:04-0700

    gmscompat: Provide a dummy implementation of AppIntegrityManager
    
    Newer versions of GMS crash if this service isn't available:
    
    FATAL EXCEPTION: [com.google.android.gms.chimera.GmsIntentOperationService$ChimeraService-Executor] idle
    Process: com.google.android.gms, PID: 23019
    java.lang.NullPointerException: Attempt to invoke virtual method 'java.lang.String android.content.integrity.AppIntegrityManager.getCurrentRuleSetProvider()' on a null object reference
           at com.google.android.gms.appintegrity.service.AppIntegrityModuleInitIntentOperation.e(:com.google.android.gms@212415046@21.24.15 (150400-381273646):13)
           at rpe.onHandleIntent(:com.google.android.gms@212415046@21.24.15 (150400-381273646):8)
           at com.google.android.chimera.IntentOperation.onHandleIntent(:com.google.android.gms@212415046@21.24.15 (150400-381273646):2)
           at roy.onHandleIntent(:com.google.android.gms@212415046@21.24.15 (150400-381273646):4)
           at eck.run(:com.google.android.gms@212415046@21.24.15 (150400-381273646):5)
           at ecj.run(:com.google.android.gms@212415046@21.24.15 (150400-381273646):11)
           at bvgf.run(:com.google.android.gms@212415046@21.24.15 (150400-381273646):2)
           at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
           at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
           at java.lang.Thread.run(Thread.java:923)
    
    Change-Id: Ic43702b78f7986d7739218fb6d0df2a26f7df270
---
 core/java/android/app/SystemServiceRegistry.java            |  5 +++++
 .../java/android/content/integrity/AppIntegrityManager.java | 13 +++++++++++++
 2 files changed, 18 insertions(+)

diff --git a/core/java/android/app/SystemServiceRegistry.java b/core/java/android/app/SystemServiceRegistry.java
index e599a5ce81ef093c9bde139003d19d5607992ac5..a9fb1130fa0798c7f541c9832a9fa3dd0e302e54 100644
--- a/core/java/android/app/SystemServiceRegistry.java
+++ b/core/java/android/app/SystemServiceRegistry.java
@@ -18,20 +18,21 @@ package android.app;
 
 import android.accounts.AccountManager;
 import android.accounts.IAccountManager;
 import android.annotation.NonNull;
 import android.annotation.Nullable;
 import android.annotation.SystemApi;
 import android.app.ContextImpl.ServiceInitializationState;
 import android.app.admin.DevicePolicyManager;
 import android.app.admin.IDevicePolicyManager;
 import android.app.blob.BlobStoreManagerFrameworkInitializer;
+import android.app.compat.gms.GmsCompat;
 import android.app.contentsuggestions.ContentSuggestionsManager;
 import android.app.contentsuggestions.IContentSuggestionsManager;
 import android.app.job.JobSchedulerFrameworkInitializer;
 import android.app.prediction.AppPredictionManager;
 import android.app.role.RoleControllerManager;
 import android.app.role.RoleManager;
 import android.app.slice.SliceManager;
 import android.app.timedetector.TimeDetector;
 import android.app.timedetector.TimeDetectorImpl;
 import android.app.timezone.RulesManager;
@@ -1316,20 +1317,24 @@ public final class SystemServiceRegistry {
                                 Context.FILE_INTEGRITY_SERVICE);
                         return new FileIntegrityManager(ctx.getOuterContext(),
                                 IFileIntegrityService.Stub.asInterface(b));
                     }});
         //CHECKSTYLE:ON IndentationCheck
         registerService(Context.APP_INTEGRITY_SERVICE, AppIntegrityManager.class,
                 new CachedServiceFetcher<AppIntegrityManager>() {
                     @Override
                     public AppIntegrityManager createService(ContextImpl ctx)
                             throws ServiceNotFoundException {
+                        if (GmsCompat.isEnabled()) {
+                            return new AppIntegrityManager(null);
+                        }
+
                         IBinder b = ServiceManager.getServiceOrThrow(Context.APP_INTEGRITY_SERVICE);
                         return new AppIntegrityManager(IAppIntegrityManager.Stub.asInterface(b));
                     }});
         registerService(Context.DREAM_SERVICE, DreamManager.class,
                 new CachedServiceFetcher<DreamManager>() {
                     @Override
                     public DreamManager createService(ContextImpl ctx)
                             throws ServiceNotFoundException {
                         return new DreamManager(ctx);
                     }});
diff --git a/core/java/android/content/integrity/AppIntegrityManager.java b/core/java/android/content/integrity/AppIntegrityManager.java
index 2869abb53b3704d90f48a7e85522f81eba248deb..52e949c5d5ef4817b2e27b9ce834d4e586f31493 100644
--- a/core/java/android/content/integrity/AppIntegrityManager.java
+++ b/core/java/android/content/integrity/AppIntegrityManager.java
@@ -13,20 +13,21 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 package android.content.integrity;
 
 import android.annotation.NonNull;
 import android.annotation.SystemApi;
 import android.annotation.SystemService;
 import android.annotation.TestApi;
+import android.app.compat.gms.GmsCompat;
 import android.content.Context;
 import android.content.IntentSender;
 import android.content.pm.ParceledListSlice;
 import android.os.RemoteException;
 
 import java.util.List;
 
 /**
  * Class for pushing rules used to check the integrity of app installs.
  *
@@ -68,43 +69,55 @@ public class AppIntegrityManager {
     /**
      * Update the rules to evaluate during install time.
      *
      * @param updateRequest request containing the data of the rule set update
      * @param statusReceiver Called when the state of the session changes. Intents sent to this
      *     receiver contain {@link #EXTRA_STATUS}. Refer to the individual status codes on how to
      *     handle them.
      */
     public void updateRuleSet(
             @NonNull RuleSet updateRequest, @NonNull IntentSender statusReceiver) {
+        if (GmsCompat.isEnabled()) {
+            return;
+        }
+
         try {
             mManager.updateRuleSet(
                     updateRequest.getVersion(),
                     new ParceledListSlice<>(updateRequest.getRules()),
                     statusReceiver);
         } catch (RemoteException e) {
             throw e.rethrowAsRuntimeException();
         }
     }
 
     /** Get the current version of the rule set. */
     @NonNull
     public String getCurrentRuleSetVersion() {
+        if (GmsCompat.isEnabled()) {
+            return "";
+        }
+
         try {
             return mManager.getCurrentRuleSetVersion();
         } catch (RemoteException e) {
             throw e.rethrowAsRuntimeException();
         }
     }
 
     /** Get the name of the package that provided the current rule set. */
     @NonNull
     public String getCurrentRuleSetProvider() {
+        if (GmsCompat.isEnabled()) {
+            return "";
+        }
+
         try {
             return mManager.getCurrentRuleSetProvider();
         } catch (RemoteException e) {
             throw e.rethrowAsRuntimeException();
         }
     }
 
     /**
      * Get current RuleSet on device.
      *

commit c883ab8036e5d9ef8715c51d9f0f6dab731e1c7d
Author: Danny Lin <danny@kdrag0n.dev>
Date:   Mon 2021-07-12 16:53:06-0700

    gmscompat: Automatically force GMS apps to be queryable
    
    GMS apps need to be queryable from all apps by design, so set the flag
    automatically instead of relying on the user to install them with `adb
    install --force-queryable`.
    
    Change-Id: I2795f3c5aac56e3cac0c024d09af4dc2a8efde7d
---
 services/core/java/com/android/server/pm/AppsFilter.java | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/services/core/java/com/android/server/pm/AppsFilter.java b/services/core/java/com/android/server/pm/AppsFilter.java
index 10f77144e02275bbf12414e4819f9690f524380a..244e24fbb74fb2f66d97b17c79d271734eaa0fab 100644
--- a/services/core/java/com/android/server/pm/AppsFilter.java
+++ b/services/core/java/com/android/server/pm/AppsFilter.java
@@ -17,20 +17,21 @@
 package com.android.server.pm;
 
 import static android.os.Trace.TRACE_TAG_PACKAGE_MANAGER;
 import static android.provider.DeviceConfig.NAMESPACE_PACKAGE_MANAGER_SERVICE;
 
 import static com.android.internal.annotations.VisibleForTesting.Visibility.PRIVATE;
 
 import android.Manifest;
 import android.annotation.NonNull;
 import android.annotation.Nullable;
+import android.app.compat.gms.GmsCompat;
 import android.content.Intent;
 import android.content.IntentFilter;
 import android.content.pm.PackageManager;
 import android.content.pm.PackageManagerInternal;
 import android.content.pm.PackageParser;
 import android.content.pm.UserInfo;
 import android.content.pm.parsing.component.ParsedComponent;
 import android.content.pm.parsing.component.ParsedInstrumentation;
 import android.content.pm.parsing.component.ParsedIntentInfo;
 import android.content.pm.parsing.component.ParsedMainComponent;
@@ -561,20 +562,22 @@ public class AppsFilter {
         }
 
         if (mProtectedBroadcasts.addAll(newPkg.getProtectedBroadcasts())) {
             mQueriesViaComponentRequireRecompute = true;
         }
 
         final boolean newIsForceQueryable =
                 mForceQueryable.contains(newPkgSetting.appId)
                         /* shared user that is already force queryable */
                         || newPkgSetting.forceQueryableOverride /* adb override */
+                        || GmsCompat.isGmsApp(newPkg.getPackageName(),
+                            newPkg.getSigningDetails().signatures, newPkg.isPrivileged())
                         || (newPkgSetting.isSystem() && (mSystemAppsQueryable
                         || newPkg.isForceQueryable()
                         || ArrayUtils.contains(mForceQueryableByDevicePackageNames,
                         newPkg.getPackageName())));
         if (newIsForceQueryable
                 || (mSystemSigningDetails != null
                 && isSystemSigned(mSystemSigningDetails, newPkgSetting))) {
             mForceQueryable.add(newPkgSetting.appId);
         }
 

commit 72dc18c1d46f7b71f0e48976a81af733f486a0e1
Author: Daniel Micay <danielmicay@gmail.com>
Date:   Sun 2021-07-18 15:56:20-0400

    gmscompat: add hook for isIccLockEnabled
---
 telephony/java/android/telephony/TelephonyManager.java | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/telephony/java/android/telephony/TelephonyManager.java b/telephony/java/android/telephony/TelephonyManager.java
index 8bf2d41289b39cfe46bd86c8c3ca2f973c4afa32..1f698bf6f50589ccab2d5d3904e5fcd932ceb885 100644
--- a/telephony/java/android/telephony/TelephonyManager.java
+++ b/telephony/java/android/telephony/TelephonyManager.java
@@ -13314,20 +13314,24 @@ public class TelephonyManager {
      * @return {@code true} if ICC lock enabled, {@code false} if ICC lock disabled.
      *
      * @throws SecurityException if the caller doesn't have the permission.
      *
      * @hide
      */
     @WorkerThread
     @RequiresPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE)
     @SystemApi
     public boolean isIccLockEnabled() {
+        if (GmsCompat.isEnabled()) {
+            return false;
+        }
+
         try {
             ITelephony telephony = getITelephony();
             if (telephony != null) {
                 return telephony.isIccLockEnabled(getSubId());
             }
         } catch (RemoteException e) {
             Log.e(TAG, "isIccLockEnabled RemoteException", e);
         }
         return false;
     }

commit bf2951c2c1a37429f2b0fb6d53e16f2307fcd13b
Author: Danny Lin <danny@kdrag0n.dev>
Date:   Sun 2021-07-18 16:28:31-0700

    gmscompat: Fix crash when getting package info
    
    Sometimes, ActivityManagerService will call GmsCompat#isGmsApp on
    ApplicationInfo instances not assigned to the calling user while
    handling IPC calls. Allow it to do this by using system_server's
    credentials for the PackageInfo signature check.
    
    This fixes the following crash:
    
    FATAL EXCEPTION: AsyncTask #1
    Process: com.android.settings.intelligence, PID: 9551
    java.lang.RuntimeException: An error occurred while executing doInBackground()
            at android.os.AsyncTask$4.done(AsyncTask.java:415)
            at java.util.concurrent.FutureTask.finishCompletion(FutureTask.java:383)
            at java.util.concurrent.FutureTask.setException(FutureTask.java:252)
            at java.util.concurrent.FutureTask.run(FutureTask.java:271)
            at android.os.AsyncTask$SerialExecutor$1.run(AsyncTask.java:305)
            at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
            at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
            at java.lang.Thread.run(Thread.java:923)
    Caused by: java.lang.SecurityException: You need INTERACT_ACROSS_USERS or MANAGE_USERS permission to: check isUserUnlockingOrUnlocked
            at android.os.Parcel.createExceptionOrNull(Parcel.java:2373)
            at android.os.Parcel.createException(Parcel.java:2357)
            at android.os.Parcel.readException(Parcel.java:2340)
            at android.os.Parcel.readException(Parcel.java:2282)
            at android.app.IActivityManager$Stub$Proxy.getContentProvider(IActivityManager.java:5728)
            at android.app.ActivityThread.acquireProvider(ActivityThread.java:6822)
            at android.app.ContextImpl$ApplicationContentResolver.acquireUnstableProvider(ContextImpl.java:2941)
            at android.content.ContentResolver.acquireUnstableProvider(ContentResolver.java:2481)
            at android.content.ContentResolver.query(ContentResolver.java:1167)
            at android.content.ContentResolver.query(ContentResolver.java:1115)
            at android.content.ContentResolver.query(ContentResolver.java:1071)
            at com.android.settings.intelligence.search.indexing.PreIndexDataCollector.getIndexablesForXmlResourceUri(PreIndexDataCollector.java:136)
            at com.android.settings.intelligence.search.indexing.PreIndexDataCollector.addIndexablesFromRemoteProvider(PreIndexDataCollector.java:114)
            at com.android.settings.intelligence.search.indexing.PreIndexDataCollector.collectIndexableData(PreIndexDataCollector.java:94)
            at com.android.settings.intelligence.search.indexing.DatabaseIndexingManager.getIndexDataFromProviders(DatabaseIndexingManager.java:127)
            at com.android.settings.intelligence.search.indexing.DatabaseIndexingManager.performIndexing(DatabaseIndexingManager.java:111)
            at com.android.settings.intelligence.search.indexing.DatabaseIndexingManager$IndexingTask.doInBackground(DatabaseIndexingManager.java:341)
            at com.android.settings.intelligence.search.indexing.DatabaseIndexingManager$IndexingTask.doInBackground(DatabaseIndexingManager.java:323)
            at android.os.AsyncTask$3.call(AsyncTask.java:394)
            at java.util.concurrent.FutureTask.run(FutureTask.java:266)
            ... 4 more
    Caused by: android.os.RemoteException: Remote stack trace:
            at com.android.server.pm.UserManagerService.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(UserManagerService.java:1513)
            at com.android.server.pm.UserManagerService.isUserUnlockingOrUnlocked(UserManagerService.java:1451)
            at com.android.server.pm.PackageManagerService.updateFlags(PackageManagerService.java:5235)
            at com.android.server.pm.PackageManagerService.updateFlagsForPackage(PackageManagerService.java:5265)
            at com.android.server.pm.PackageManagerService.getPackageInfoInternal(PackageManagerService.java:4528)
    
    Change-Id: Ic448b46f5c4a8799bd849b2a69ec03814ed7ad44
---
 core/java/android/app/compat/gms/GmsCompat.java | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/core/java/android/app/compat/gms/GmsCompat.java b/core/java/android/app/compat/gms/GmsCompat.java
index 22dab9ab29f7e98bda5d15862f56431f9207a37e..abc21df13c4526e38fe0bf6c48f9eba595fa6741 100644
--- a/core/java/android/app/compat/gms/GmsCompat.java
+++ b/core/java/android/app/compat/gms/GmsCompat.java
@@ -19,20 +19,21 @@ package android.app.compat.gms;
 import android.annotation.SystemApi;
 import android.app.ActivityThread;
 import android.compat.Compatibility;
 import android.compat.annotation.ChangeId;
 import android.compat.annotation.Disabled;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.IPackageManager;
 import android.content.pm.PackageInfo;
 import android.content.pm.PackageManager;
 import android.content.pm.Signature;
+import android.os.Binder;
 import android.os.Process;
 import android.os.RemoteException;
 import android.os.UserHandle;
 import android.util.Log;
 
 import com.android.internal.compat.CompatibilityChangeInfo;
 import com.android.internal.gmscompat.GmsInfo;
 
 /**
  * This class provides helpers for Google Play Services compatibility. It allows the following apps
@@ -126,24 +127,27 @@ public final class GmsCompat {
         return validCert;
     }
 
     /** @hide */
     public static boolean isGmsApp(ApplicationInfo app) {
         int userId = UserHandle.getUserId(app.uid);
         IPackageManager pm = ActivityThread.getPackageManager();
 
         // Fetch PackageInfo to get signing certificates
         PackageInfo pkg;
+        long token = Binder.clearCallingIdentity();
         try {
             pkg = pm.getPackageInfo(app.packageName, PackageManager.GET_SIGNING_CERTIFICATES, userId);
         } catch (RemoteException e) {
             throw e.rethrowFromSystemServer();
+        } finally {
+            Binder.restoreCallingIdentity(token);
         }
 
         // Get all applicable certificates, even if GMS switches to multiple signing certificates
         // in the future
         Signature[] signatures = pkg.signingInfo.hasMultipleSigners() ?
                 pkg.signingInfo.getApkContentsSigners() :
                 pkg.signingInfo.getSigningCertificateHistory();
         return isGmsApp(app.packageName, signatures, app.isPrivilegedApp());
     }
 

commit 468a7eda87e329b2918e641cdb4987fa01826dc5
Author: Danny Lin <danny@kdrag0n.dev>
Date:   Mon 2021-07-19 17:17:50-0700

    gmscompat: Make notification channel more user-friendly
    
    Change-Id: I2bfaaf8cbca808e616dcbfb333a2cf43f774c2b9
---
 core/java/com/android/internal/gmscompat/GmsHooks.java | 16 +++++++++++++---
 core/res/res/values/strings.xml                        | 12 ++++++++++--
 core/res/res/values/symbols.xml                        |  5 ++++-
 3 files changed, 27 insertions(+), 6 deletions(-)

diff --git a/core/java/com/android/internal/gmscompat/GmsHooks.java b/core/java/com/android/internal/gmscompat/GmsHooks.java
index d3cef1969f0a13d587f3126a14fa888c851f689e..fd68b2e8e07938773af3c42744e1bbb2e5ce2191 100644
--- a/core/java/com/android/internal/gmscompat/GmsHooks.java
+++ b/core/java/com/android/internal/gmscompat/GmsHooks.java
@@ -14,51 +14,55 @@
  * limitations under the License.
  */
 
 package com.android.internal.gmscompat;
 
 import android.annotation.SuppressLint;
 import android.app.ActivityThread;
 import android.app.Application;
 import android.app.Notification;
 import android.app.NotificationChannel;
+import android.app.NotificationChannelGroup;
 import android.app.NotificationManager;
 import android.app.PendingIntent;
 import android.app.Service;
 import android.app.compat.gms.GmsCompat;
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
 import android.content.pm.PackageInstaller;
 import android.content.pm.PackageManager;
 import android.content.pm.SharedLibraryInfo;
 import android.os.Build;
 import android.os.Process;
 import android.os.UserManager;
 import android.provider.Settings;
 import android.util.Log;
 import android.webkit.WebView;
 
+import com.android.internal.R;
+
 import java.util.Collections;
 import java.util.List;
 
 /**
  * API shims for Google Play Services compatibility. Hooks that are more complicated than a simple
  * constant return value should be delegated to this class for easier maintenance.
  *
  * @hide
  */
 public final class GmsHooks {
     private static final String TAG = "GmsHooks";
 
     // Foreground service notifications
-    private static final String FGS_CHANNEL_ID = "service_shim";
+    private static final String FGS_GROUP_ID = "gmscompat_fgs_group";
+    private static final String FGS_CHANNEL_ID = "gmscompat_fgs_channel";
     private static final int FGS_NOTIFICATION_ID = 529977835;
     private static boolean fgsChannelCreated = false;
 
     // Static only
     private GmsHooks() { }
 
 
     /*
      * Foreground service notifications to keep GMS services alive
      */
@@ -70,24 +74,30 @@ public final class GmsHooks {
     }
 
     private static void createFgsChannel(Service service) {
         if (fgsChannelCreated) {
             return;
         }
 
         NotificationManager notificationManager = (NotificationManager)
                 service.getSystemService(Context.NOTIFICATION_SERVICE);
 
-        CharSequence name = service.getText(
-                com.android.internal.R.string.foreground_service_gms_shim_category);
+        NotificationChannelGroup group = new NotificationChannelGroup(FGS_GROUP_ID,
+                service.getText(R.string.foreground_service_gmscompat_group));
+        notificationManager.createNotificationChannelGroup(group);
+
+        CharSequence name = service.getText(R.string.foreground_service_gmscompat_channel);
         NotificationChannel channel = new NotificationChannel(FGS_CHANNEL_ID, name,
                 NotificationManager.IMPORTANCE_LOW);
+        channel.setGroup(FGS_GROUP_ID);
+        channel.setDescription(service.getString(R.string.foreground_service_gmscompat_description));
+        channel.setShowBadge(false);
         notificationManager.createNotificationChannel(channel);
 
         fgsChannelCreated = true;
     }
 
     // Post notification on foreground service start
     // ActivityThread#handleCreateService(CreateServiceData)
     public static void attachService(Service service) {
         // Isolated processes (e.g. WebView) don't have access to NotificationManager. They don't
         // need a foreground notification anyway, so bail out early.
diff --git a/core/res/res/values/strings.xml b/core/res/res/values/strings.xml
index dc83ca8fc5721302b8bfb152939f3b4aa7788982..896e19bd838bd6321aae66cb1c46237c37e0597e 100644
--- a/core/res/res/values/strings.xml
+++ b/core/res/res/values/strings.xml
@@ -729,22 +729,30 @@
         data usage</string>
 
     <!-- Separator for foreground service notification content listing all apps when there
         are multiple apps running.  The left and right side may both already be compound
         (constructed using this separator).  Should be kept as short as possible, this is
         for summary text in the notification where there is not a lot of space.
         [CHAR LIMIT=NONE] -->
     <string name="foreground_service_multiple_separator"><xliff:g id="left_side">%1$s</xliff:g>,
         <xliff:g id="right_side">%2$s</xliff:g></string>
 
-    <!-- Name for foreground service notification category created by GmsCompat  -->
-    <string name="foreground_service_gms_shim_category">Services</string>
+    <!-- Name for foreground service notification channel group created by GmsCompat  -->
+    <string name="foreground_service_gmscompat_group">Compatibility</string>
+
+    <!-- Name for foreground service notification channel created by GmsCompat  -->
+    <string name="foreground_service_gmscompat_channel">Services</string>
+
+    <!-- Description for foreground service notification channel created by GmsCompat  -->
+    <string name="foreground_service_gmscompat_description">These notifications are created by the
+        Google Play Services compatibility layer in order to keep services running in the
+        background.\n\nDisable this category to hide the unnecessary notifications.</string>
 
     <!-- Displayed to the user to tell them that they have started up the phone in "safe mode" -->
     <string name="safeMode">Safe mode</string>
 
     <!-- Label for the Android system components when they are shown to the user. -->
     <string name="android_system_label">Android System</string>
 
     <!-- "Switch" is a verb; it means to change user profile by tapping another user profile name. -->
     <string name="user_owner_label">Switch to personal profile</string>
 
diff --git a/core/res/res/values/symbols.xml b/core/res/res/values/symbols.xml
index 299b9631123b9c733d4fd96df1063f73fe1a9198..4a24086e0938a83b842ee1a911336277ce429905 100644
--- a/core/res/res/values/symbols.xml
+++ b/core/res/res/values/symbols.xml
@@ -3450,21 +3450,24 @@
   <java-symbol type="string" name="config_defaultSystemCaptionsService" />
   <java-symbol type="string" name="config_defaultSystemCaptionsManagerService" />
   <java-symbol type="string" name="config_retailDemoPackage" />
   <java-symbol type="string" name="config_retailDemoPackageSignature" />
 
   <java-symbol type="string" name="notification_channel_foreground_service" />
   <java-symbol type="string" name="foreground_service_app_in_background" />
   <java-symbol type="string" name="foreground_service_apps_in_background" />
   <java-symbol type="string" name="foreground_service_tap_for_details" />
   <java-symbol type="string" name="foreground_service_multiple_separator" />
-  <java-symbol type="string" name="foreground_service_gms_shim_category" />
+
+  <java-symbol type="string" name="foreground_service_gmscompat_group" />
+  <java-symbol type="string" name="foreground_service_gmscompat_channel" />
+  <java-symbol type="string" name="foreground_service_gmscompat_description" />
 
   <java-symbol type="bool" name="config_enableCredentialFactoryResetProtection" />
 
   <!-- ETWS primary messages -->
   <java-symbol type="string" name="etws_primary_default_message_earthquake" />
   <java-symbol type="string" name="etws_primary_default_message_tsunami" />
   <java-symbol type="string" name="etws_primary_default_message_earthquake_and_tsunami" />
   <java-symbol type="string" name="etws_primary_default_message_test" />
   <java-symbol type="string" name="etws_primary_default_message_others" />
 

commit 2053152f212bc91a33b4a1acbd30742fc49659e8
Author: Danny Lin <danny@kdrag0n.dev>
Date:   Fri 2021-07-30 18:24:37-0700

    gmscompat: Improve foreground service notification UX
    
    - Description = "Tap to hide" to make it obvious that these
      notifications are unnecessary and can be disabled
    - Open notification channel settings on tap to simplify disabling
    - Clarify what the notification is for with "%s is running"
      (app_running_notification_title)
    
    Change-Id: I81d029b9924715bb1f31bf1c0d3ae6e562b9cb9d
---
 .../com/android/internal/gmscompat/GmsHooks.java   | 23 ++++++++++++++--------
 core/res/res/values/strings.xml                    |  5 ++++-
 core/res/res/values/symbols.xml                    |  3 ++-
 3 files changed, 21 insertions(+), 10 deletions(-)

diff --git a/core/java/com/android/internal/gmscompat/GmsHooks.java b/core/java/com/android/internal/gmscompat/GmsHooks.java
index fd68b2e8e07938773af3c42744e1bbb2e5ce2191..4bc9c45650e18581849aaf38c749482682f7df91 100644
--- a/core/java/com/android/internal/gmscompat/GmsHooks.java
+++ b/core/java/com/android/internal/gmscompat/GmsHooks.java
@@ -66,60 +66,67 @@ public final class GmsHooks {
     /*
      * Foreground service notifications to keep GMS services alive
      */
 
     // Make all services foreground to keep them alive
     // ContextImpl#startService(Intent)
     public static ComponentName startService(Context context, Intent service) {
         return context.startForegroundService(service);
     }
 
-    private static void createFgsChannel(Service service) {
+    private static void createFgsChannel(Context context) {
         if (fgsChannelCreated) {
             return;
         }
 
         NotificationManager notificationManager = (NotificationManager)
-                service.getSystemService(Context.NOTIFICATION_SERVICE);
+                context.getSystemService(Context.NOTIFICATION_SERVICE);
 
         NotificationChannelGroup group = new NotificationChannelGroup(FGS_GROUP_ID,
-                service.getText(R.string.foreground_service_gmscompat_group));
+                context.getText(R.string.foreground_service_gmscompat_group));
         notificationManager.createNotificationChannelGroup(group);
 
-        CharSequence name = service.getText(R.string.foreground_service_gmscompat_channel);
+        CharSequence name = context.getText(R.string.foreground_service_gmscompat_channel);
         NotificationChannel channel = new NotificationChannel(FGS_CHANNEL_ID, name,
                 NotificationManager.IMPORTANCE_LOW);
         channel.setGroup(FGS_GROUP_ID);
-        channel.setDescription(service.getString(R.string.foreground_service_gmscompat_description));
+        channel.setDescription(context.getString(R.string.foreground_service_gmscompat_channel_desc));
         channel.setShowBadge(false);
         notificationManager.createNotificationChannel(channel);
 
         fgsChannelCreated = true;
     }
 
     // Post notification on foreground service start
     // ActivityThread#handleCreateService(CreateServiceData)
     public static void attachService(Service service) {
         // Isolated processes (e.g. WebView) don't have access to NotificationManager. They don't
         // need a foreground notification anyway, so bail out early.
         if (!GmsCompat.isEnabled() || Process.isIsolated()) {
             return;
         }
 
         // Channel
         createFgsChannel(service);
+
+        // Intent: notification channel settings
+        Intent intent = new Intent(Settings.ACTION_CHANNEL_NOTIFICATION_SETTINGS);
+        intent.putExtra(Settings.EXTRA_APP_PACKAGE, service.getPackageName());
+        intent.putExtra(Settings.EXTRA_CHANNEL_ID, FGS_CHANNEL_ID);
+        PendingIntent pi = PendingIntent.getActivity(service, 0, intent, PendingIntent.FLAG_IMMUTABLE);
+
         // Notification
-        PendingIntent pi = PendingIntent.getActivity(service, 100, new Intent(),
-                PendingIntent.FLAG_IMMUTABLE);
+        CharSequence appName = service.getApplicationInfo().loadLabel(service.getPackageManager());
         Notification notification = new Notification.Builder(service, FGS_CHANNEL_ID)
                 .setSmallIcon(service.getApplicationInfo().icon)
-                .setContentTitle(service.getApplicationInfo().loadLabel(service.getPackageManager()))
+                .setContentTitle(service.getString(R.string.app_running_notification_title, appName))
+                .setContentText(service.getText(R.string.foreground_service_gmscompat_notif_desc))
                 .setContentIntent(pi)
                 .build();
 
         Log.d(TAG, "Posting notification for service: " + service.getClass().getName());
         service.startForeground(FGS_NOTIFICATION_ID, notification);
     }
 
     // GMS tries to clean up its own notification channels periodically.
     // Don't let it delete the FGS shim channel because that throws an exception and crashes GMS.
     // NotificationManager#deleteNotificationChannel(String)
diff --git a/core/res/res/values/strings.xml b/core/res/res/values/strings.xml
index 896e19bd838bd6321aae66cb1c46237c37e0597e..2658162b0fb2b93cd202feddf7ded512dbd15369 100644
--- a/core/res/res/values/strings.xml
+++ b/core/res/res/values/strings.xml
@@ -736,24 +736,27 @@
     <string name="foreground_service_multiple_separator"><xliff:g id="left_side">%1$s</xliff:g>,
         <xliff:g id="right_side">%2$s</xliff:g></string>
 
     <!-- Name for foreground service notification channel group created by GmsCompat  -->
     <string name="foreground_service_gmscompat_group">Compatibility</string>
 
     <!-- Name for foreground service notification channel created by GmsCompat  -->
     <string name="foreground_service_gmscompat_channel">Services</string>
 
     <!-- Description for foreground service notification channel created by GmsCompat  -->
-    <string name="foreground_service_gmscompat_description">These notifications are created by the
+    <string name="foreground_service_gmscompat_channel_desc">These notifications are created by the
         Google Play Services compatibility layer in order to keep services running in the
         background.\n\nDisable this category to hide the unnecessary notifications.</string>
 
+    <!-- Description for foreground service notifications created by GmsCompat  -->
+    <string name="foreground_service_gmscompat_notif_desc">Tap to hide</string>
+
     <!-- Displayed to the user to tell them that they have started up the phone in "safe mode" -->
     <string name="safeMode">Safe mode</string>
 
     <!-- Label for the Android system components when they are shown to the user. -->
     <string name="android_system_label">Android System</string>
 
     <!-- "Switch" is a verb; it means to change user profile by tapping another user profile name. -->
     <string name="user_owner_label">Switch to personal profile</string>
 
     <!-- "Switch" is a verb; it means to change user profile by tapping another user profile name. -->
diff --git a/core/res/res/values/symbols.xml b/core/res/res/values/symbols.xml
index 4a24086e0938a83b842ee1a911336277ce429905..e41a286becb6942ac81eb6f8e9e4abb8c81bd72b 100644
--- a/core/res/res/values/symbols.xml
+++ b/core/res/res/values/symbols.xml
@@ -3453,21 +3453,22 @@
   <java-symbol type="string" name="config_retailDemoPackageSignature" />
 
   <java-symbol type="string" name="notification_channel_foreground_service" />
   <java-symbol type="string" name="foreground_service_app_in_background" />
   <java-symbol type="string" name="foreground_service_apps_in_background" />
   <java-symbol type="string" name="foreground_service_tap_for_details" />
   <java-symbol type="string" name="foreground_service_multiple_separator" />
 
   <java-symbol type="string" name="foreground_service_gmscompat_group" />
   <java-symbol type="string" name="foreground_service_gmscompat_channel" />
-  <java-symbol type="string" name="foreground_service_gmscompat_description" />
+  <java-symbol type="string" name="foreground_service_gmscompat_channel_desc" />
+  <java-symbol type="string" name="foreground_service_gmscompat_notif_desc" />
 
   <java-symbol type="bool" name="config_enableCredentialFactoryResetProtection" />
 
   <!-- ETWS primary messages -->
   <java-symbol type="string" name="etws_primary_default_message_earthquake" />
   <java-symbol type="string" name="etws_primary_default_message_tsunami" />
   <java-symbol type="string" name="etws_primary_default_message_earthquake_and_tsunami" />
   <java-symbol type="string" name="etws_primary_default_message_test" />
   <java-symbol type="string" name="etws_primary_default_message_others" />
 

commit e9cb38ad19d880aac20af8167d28d3dd81f2dfbd
Author: Danny Lin <danny@kdrag0n.dev>
Date:   Fri 2021-07-30 18:28:44-0700

    gmscompat: Fix AppOpsManager#startOpNoThrow() crash
    
    E AndroidRuntime: FATAL EXCEPTION: FlpThread
    E AndroidRuntime: Process: com.google.android.gms.persistent, PID: 15448
    E AndroidRuntime: java.lang.SecurityException: uid 10165 does not have android.permission.UPDATE_APP_OPS_STATS.
    E AndroidRuntime:       at android.os.Parcel.createExceptionOrNull(Parcel.java:2373)
    E AndroidRuntime:       at android.os.Parcel.createException(Parcel.java:2357)
    E AndroidRuntime:       at android.os.Parcel.readException(Parcel.java:2340)
    E AndroidRuntime:       at android.os.Parcel.readException(Parcel.java:2282)
    E AndroidRuntime:       at com.android.internal.app.IAppOpsService$Stub$Proxy.startOperation(IAppOpsService.java:1148)
    E AndroidRuntime:       at android.app.AppOpsManager.startOpNoThrow(AppOpsManager.java:7980)
    E AndroidRuntime:       at android.app.AppOpsManager.startOpNoThrow(AppOpsManager.java:7945)
    E AndroidRuntime:       at udb.k(:com.google.android.gms@212418046@21.24.18 (150400-383468479):2)
    E AndroidRuntime:       at uds.p(:com.google.android.gms@212418046@21.24.18 (150400-383468479):20)
    E AndroidRuntime:       at uds.jj(:com.google.android.gms@212418046@21.24.18 (150400-383468479):3)
    E AndroidRuntime:       at bpev.s(:com.google.android.gms@212418046@21.24.18 (150400-383468479):22)
    E AndroidRuntime:       at bpep.run(:com.google.android.gms@212418046@21.24.18 (150400-383468479):5)
    E AndroidRuntime:       at android.os.Handler.handleCallback(Handler.java:938)
    E AndroidRuntime:       at android.os.Handler.dispatchMessage(Handler.java:99)
    E AndroidRuntime:       at aica.ja(:com.google.android.gms@212418046@21.24.18 (150400-383468479):0)
    E AndroidRuntime:       at aica.dispatchMessage(:com.google.android.gms@212418046@21.24.18 (150400-383468479):10)
    E AndroidRuntime:       at bqtt.ja(:com.google.android.gms@212418046@21.24.18 (150400-383468479):1)
    E AndroidRuntime:       at aica.dispatchMessage(:com.google.android.gms@212418046@21.24.18 (150400-383468479):10)
    E AndroidRuntime:       at android.os.Looper.loop(Looper.java:223)
    E AndroidRuntime:       at android.os.HandlerThread.run(HandlerThread.java:67)
    E AndroidRuntime:       Suppressed: bvgr:
    E AndroidRuntime:               at tk_trace.location_base-GoogleLocationManagerChimeraService-IGoogleLocationManagerService_58(Unknown Source:0)
    E AndroidRuntime:       Suppressed: bvgr:
    E AndroidRuntime:               at tk_trace.location_base-GoogleLocationManagerChimeraService-IGoogleLocationManagerService_58(Unknown Source:0)
    E AndroidRuntime: Caused by: android.os.RemoteException: Remote stack trace:
    E AndroidRuntime:       at android.app.ContextImpl.enforce(ContextImpl.java:2024)
    E AndroidRuntime:       at android.app.ContextImpl.enforcePermission(ContextImpl.java:2033)
    E AndroidRuntime:       at com.android.server.appop.AppOpsService.verifyIncomingUid(AppOpsService.java:3750)
    E AndroidRuntime:       at com.android.server.appop.AppOpsService.startOperation(AppOpsService.java:3448)
    E AndroidRuntime:       at com.android.internal.app.IAppOpsService$Stub.onTransact(IAppOpsService.java:473)
    
    Change-Id: Iba07954e02f0b29133088a77b3633ac46e38a010
---
 core/java/android/app/AppOpsManager.java | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/core/java/android/app/AppOpsManager.java b/core/java/android/app/AppOpsManager.java
index 6baabb69e02874ff0b13108c9210cce879c05bb3..06fcadab2b1c23ac2a0a6c43daa91801ea55d3cc 100644
--- a/core/java/android/app/AppOpsManager.java
+++ b/core/java/android/app/AppOpsManager.java
@@ -19,20 +19,21 @@ package android.app;
 import android.Manifest;
 import android.annotation.CallbackExecutor;
 import android.annotation.IntDef;
 import android.annotation.IntRange;
 import android.annotation.NonNull;
 import android.annotation.Nullable;
 import android.annotation.RequiresPermission;
 import android.annotation.SystemApi;
 import android.annotation.SystemService;
 import android.annotation.TestApi;
+import android.app.compat.gms.GmsCompat;
 import android.app.usage.UsageStatsManager;
 import android.compat.Compatibility;
 import android.compat.annotation.ChangeId;
 import android.compat.annotation.EnabledAfter;
 import android.compat.annotation.UnsupportedAppUsage;
 import android.content.ComponentName;
 import android.content.ContentResolver;
 import android.content.Context;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageManager;
@@ -7958,20 +7959,24 @@ public class AppOpsManager {
      * @param message Description why op was started
      *
      * @return Returns {@link #MODE_ALLOWED} if the operation is allowed, or
      * {@link #MODE_IGNORED} if it is not allowed and should be silently ignored (without
      * causing the app to crash).
      *
      * @hide
      */
     public int startOpNoThrow(int op, int uid, @NonNull String packageName,
             boolean startIfModeDefault, @Nullable String attributionTag, @Nullable String message) {
+        if (GmsCompat.isEnabled() && uid != Process.myUid()) {
+            return MODE_ALLOWED;
+        }
+
         try {
             collectNoteOpCallsForValidation(op);
             int collectionMode = getNotedOpCollectionMode(uid, packageName, op);
             boolean shouldCollectMessage = Process.myUid() == Process.SYSTEM_UID ? true : false;
             if (collectionMode == COLLECT_ASYNC) {
                 if (message == null) {
                     // Set stack trace as default message
                     message = getFormattedStackTrace();
                     shouldCollectMessage = true;
                 }

commit f2967ce00835281bfc36a0969b493810917bfb58
Author: Danny Lin <danny@kdrag0n.dev>
Date:   Fri 2021-07-30 18:37:17-0700

    gmscompat: Add support for running GMS in secondary users
    
    Tested functionality:
      - Account login (including 2FA with NFC security key)
      - Play Store
      - Firebase Cloud Messaging (Signal, Discord)
      - Firebase database API (Swift Backup)
      - Firebase app indexing (GMS debug settings)
      - Google Play Games
      - Account settings
      - Google My Account
      - SMS verification receiver (Signal)
      - Play license verification (both in-app purchases and paid apps)
    
    Change-Id: I8af352307da4b32c7e9944a5a219f70b307010d5
---
 core/java/android/app/ContextImpl.java                 |  8 ++++++++
 core/java/android/os/UserManager.java                  | 10 ++++++++++
 core/java/com/android/internal/gmscompat/GmsHooks.java |  8 ++++++++
 telephony/java/android/telephony/TelephonyManager.java |  8 ++++++++
 4 files changed, 34 insertions(+)

diff --git a/core/java/android/app/ContextImpl.java b/core/java/android/app/ContextImpl.java
index d67c20e3cfff46c7e2a188091496ef3964986db4..a4033f741c5df25caef812d02d84002dc6e57e56 100644
--- a/core/java/android/app/ContextImpl.java
+++ b/core/java/android/app/ContextImpl.java
@@ -1279,20 +1279,22 @@ class ContextImpl extends Context {
                     mMainThread.getApplicationThread(), getAttributionTag(), intent, resolvedType,
                     rd, initialCode, initialData, initialExtras, receiverPermissions, appOp,
                     options, true, false, getUserId());
         } catch (RemoteException e) {
             throw e.rethrowFromSystemServer();
         }
     }
 
     @Override
     public void sendBroadcastAsUser(Intent intent, UserHandle user) {
+        user = GmsHooks.getUserHandle(user);
+
         String resolvedType = intent.resolveTypeIfNeeded(getContentResolver());
         try {
             intent.prepareToLeaveProcess(this);
             ActivityManager.getService().broadcastIntentWithFeature(
                     mMainThread.getApplicationThread(), getAttributionTag(), intent, resolvedType,
                     null, Activity.RESULT_OK, null, null, null, AppOpsManager.OP_NONE, null, false,
                     false, user.getIdentifier());
         } catch (RemoteException e) {
             throw e.rethrowFromSystemServer();
         }
@@ -1300,37 +1302,41 @@ class ContextImpl extends Context {
 
     @Override
     public void sendBroadcastAsUser(Intent intent, UserHandle user,
             String receiverPermission) {
         sendBroadcastAsUser(intent, user, receiverPermission, AppOpsManager.OP_NONE);
     }
 
     @Override
     public void sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission,
             Bundle options) {
+        user = GmsHooks.getUserHandle(user);
+
         String resolvedType = intent.resolveTypeIfNeeded(getContentResolver());
         String[] receiverPermissions = receiverPermission == null ? null
                 : new String[] {receiverPermission};
         try {
             intent.prepareToLeaveProcess(this);
             ActivityManager.getService().broadcastIntentWithFeature(
                     mMainThread.getApplicationThread(), getAttributionTag(), intent, resolvedType,
                     null, Activity.RESULT_OK, null, null, receiverPermissions,
                     AppOpsManager.OP_NONE, options, false, false, user.getIdentifier());
         } catch (RemoteException e) {
             throw e.rethrowFromSystemServer();
         }
     }
 
     @Override
     public void sendBroadcastAsUser(Intent intent, UserHandle user,
             String receiverPermission, int appOp) {
+        user = GmsHooks.getUserHandle(user);
+
         String resolvedType = intent.resolveTypeIfNeeded(getContentResolver());
         String[] receiverPermissions = receiverPermission == null ? null
                 : new String[] {receiverPermission};
         try {
             intent.prepareToLeaveProcess(this);
             ActivityManager.getService().broadcastIntentWithFeature(
                     mMainThread.getApplicationThread(), getAttributionTag(), intent, resolvedType,
                     null, Activity.RESULT_OK, null, null, receiverPermissions, appOp, null, false,
                     false, user.getIdentifier());
         } catch (RemoteException e) {
@@ -1351,20 +1357,22 @@ class ContextImpl extends Context {
             String receiverPermission, int appOp, BroadcastReceiver resultReceiver,
             Handler scheduler, int initialCode, String initialData, Bundle initialExtras) {
         sendOrderedBroadcastAsUser(intent, user, receiverPermission, appOp,
                 null, resultReceiver, scheduler, initialCode, initialData, initialExtras);
     }
 
     @Override
     public void sendOrderedBroadcastAsUser(Intent intent, UserHandle user,
             String receiverPermission, int appOp, Bundle options, BroadcastReceiver resultReceiver,
             Handler scheduler, int initialCode, String initialData, Bundle initialExtras) {
+        user = GmsHooks.getUserHandle(user);
+
         IIntentReceiver rd = null;
         if (resultReceiver != null) {
             if (mPackageInfo != null) {
                 if (scheduler == null) {
                     scheduler = mMainThread.getHandler();
                 }
                 rd = mPackageInfo.getReceiverDispatcher(
                     resultReceiver, getOuterContext(), scheduler,
                     mMainThread.getInstrumentation(), false);
             } else {
diff --git a/core/java/android/os/UserManager.java b/core/java/android/os/UserManager.java
index 11f1ce399b8d2ead556a43a8f0c1eebb9497c646..f5ace0f327a2c790273194a566a70b5818f620bd 100644
--- a/core/java/android/os/UserManager.java
+++ b/core/java/android/os/UserManager.java
@@ -1830,20 +1830,25 @@ public class UserManager {
     }
 
     /**
      * Used to check if this process is running under the system user. The system user
      * is the initial user that is implicitly created on first boot and hosts most of the
      * system services.
      *
      * @return whether this process is running under the system user.
      */
     public boolean isSystemUser() {
+        if (GmsCompat.isEnabled()) {
+            // com.android.vending: java.lang.IllegalStateException: This method must be called in primary profile
+            return true;
+        }
+
         return UserHandle.myUserId() == UserHandle.USER_SYSTEM;
     }
 
     /**
      * Used to check if this process is running as an admin user. An admin user is allowed to
      * modify or configure certain settings that aren't available to non-admin users,
      * create and delete additional users, etc. There can be more than one admin users.
      *
      * @return whether this process is running under an admin user.
      * @hide
@@ -4168,20 +4173,25 @@ public class UserManager {
 
     /**
      * Returns a serial number on this device for a given userId. User handles can be recycled
      * when deleting and creating users, but serial numbers are not reused until the device is wiped.
      * @param userId
      * @return a serial number associated with that user, or -1 if the userId is not valid.
      * @hide
      */
     @UnsupportedAppUsage
     public int getUserSerialNumber(@UserIdInt int userId) {
+        if (GmsCompat.isEnabled()) {
+            // com.google.android.gms.persistent: java.lang.IllegalStateException - com.google.android.gms.gcm.GcmProxyIntentOperation.b
+            return 0;
+        }
+
         try {
             return mService.getUserSerialNumber(userId);
         } catch (RemoteException re) {
             throw re.rethrowFromSystemServer();
         }
     }
 
     /**
      * Returns a userId on this device for a given user serial number. User handles can be
      * recycled when deleting and creating users, but serial numbers are not reused until the device
diff --git a/core/java/com/android/internal/gmscompat/GmsHooks.java b/core/java/com/android/internal/gmscompat/GmsHooks.java
index 4bc9c45650e18581849aaf38c749482682f7df91..8fbff89a599ab22303bdcec623773be23ba0d5c7 100644
--- a/core/java/com/android/internal/gmscompat/GmsHooks.java
+++ b/core/java/com/android/internal/gmscompat/GmsHooks.java
@@ -27,20 +27,21 @@ import android.app.PendingIntent;
 import android.app.Service;
 import android.app.compat.gms.GmsCompat;
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
 import android.content.pm.PackageInstaller;
 import android.content.pm.PackageManager;
 import android.content.pm.SharedLibraryInfo;
 import android.os.Build;
 import android.os.Process;
+import android.os.UserHandle;
 import android.os.UserManager;
 import android.provider.Settings;
 import android.util.Log;
 import android.webkit.WebView;
 
 import com.android.internal.R;
 
 import java.util.Collections;
 import java.util.List;
 
@@ -233,11 +234,18 @@ public final class GmsHooks {
         Log.i(TAG, "Requesting user confirmation for package install session");
         Intent confirmIntent = intent.getParcelableExtra(Intent.EXTRA_INTENT);
         // Make it work with the Application context
         confirmIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
         // TODO: post notification if app is in the background
         app.startActivity(confirmIntent);
 
         // Don't dispatch it, otherwise Play Store abandons the session
         return true;
     }
+
+    // Redirect cross-user interactions to current user
+    // ContextImpl#sendOrderedBroadcastAsUser
+    // ContextImpl#sendBroadcastAsUser
+    public static UserHandle getUserHandle(UserHandle user) {
+        return GmsCompat.isEnabled() ? Process.myUserHandle() : user;
+    }
 }
diff --git a/telephony/java/android/telephony/TelephonyManager.java b/telephony/java/android/telephony/TelephonyManager.java
index 1f698bf6f50589ccab2d5d3904e5fcd932ceb885..97c9b2aa48ba106ea5b65ad9d51e53f3d39e057c 100644
--- a/telephony/java/android/telephony/TelephonyManager.java
+++ b/telephony/java/android/telephony/TelephonyManager.java
@@ -4512,20 +4512,28 @@ public class TelephonyManager {
     @UnsupportedAppUsage
     public String getLine1Number(int subId) {
         String number = null;
         try {
             ITelephony telephony = getITelephony();
             if (telephony != null)
                 number = telephony.getLine1NumberForDisplay(subId, mContext.getOpPackageName(),
                          mContext.getAttributionTag());
         } catch (RemoteException ex) {
         } catch (NullPointerException ex) {
+        } catch (SecurityException ex) {
+            if (GmsCompat.isEnabled()) {
+                // Google Play Services settings -> Account services -> Google Pay -> Add a payment method
+                // com.google.android.gms: java.lang.SecurityException: getLine1NumberForDisplay: Neither user 1010142 nor current process has android.permission.READ_PHONE_STATE, android.permission.READ_SMS, or android.permission.READ_PHONE_NUMBERS
+                return null;
+            } else {
+                throw ex;
+            }
         }
         if (number != null) {
             return number;
         }
         try {
             IPhoneSubInfo info = getSubscriberInfoService();
             if (info == null)
                 return null;
             return info.getLine1NumberForSubscriber(subId, mContext.getOpPackageName(),
                     mContext.getAttributionTag());

commit 7201348bb416e82c83c412034a5f3aa7ef4e5b16 (HEAD, tag: RQ3A.210805.001.A1.2021.08.03.03, m/master)
Author: Danny Lin <danny@kdrag0n.dev>
Date:   Fri 2021-07-30 19:36:38-0700

    gmscompat: Unify log tags
    
    This makes it significantly easier to grep logs for all
    GmsCompat-related messages at once.
    
    Change-Id: Ia5c42ecc5a740a55f53bbfd437d4f09a5eaea9bc
---
 core/java/android/app/compat/gms/GmsCompat.java        | 2 +-
 core/java/com/android/internal/gmscompat/GmsHooks.java | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/core/java/android/app/compat/gms/GmsCompat.java b/core/java/android/app/compat/gms/GmsCompat.java
index abc21df13c4526e38fe0bf6c48f9eba595fa6741..2b35ad7f16613f86e98ad5c6f4b2211057f4e0bf 100644
--- a/core/java/android/app/compat/gms/GmsCompat.java
+++ b/core/java/android/app/compat/gms/GmsCompat.java
@@ -44,21 +44,21 @@ import com.android.internal.gmscompat.GmsInfo;
  *     - All apps depending on Google Play Services
  *
  * All GMS compatibility hooks should call methods on GmsCompat. Hooks that are more complicated
  * than returning a simple constant value should also be implemented in GmsHooks to reduce
  * maintenance overhead.
  *
  * @hide
  */
 @SystemApi(client = SystemApi.Client.MODULE_LIBRARIES)
 public final class GmsCompat {
-    private static final String TAG = "GmsCompat";
+    private static final String TAG = "GmsCompat/Core";
 
     /**
      * Whether to enable Google Play Services compatibility for this app.
      *
      * This compatibility change is special because the system enables it automatically for certain
      * apps, but it still needs to be declared with a change ID.
      *
      * We don't have a bug for this in Google's issue tracker, so the change ID is a
      * randomly-generated long.
      */
diff --git a/core/java/com/android/internal/gmscompat/GmsHooks.java b/core/java/com/android/internal/gmscompat/GmsHooks.java
index 8fbff89a599ab22303bdcec623773be23ba0d5c7..52c7a7b8f209c1eda730c4e265dc60a83bf3539f 100644
--- a/core/java/com/android/internal/gmscompat/GmsHooks.java
+++ b/core/java/com/android/internal/gmscompat/GmsHooks.java
@@ -45,21 +45,21 @@ import com.android.internal.R;
 import java.util.Collections;
 import java.util.List;
 
 /**
  * API shims for Google Play Services compatibility. Hooks that are more complicated than a simple
  * constant return value should be delegated to this class for easier maintenance.
  *
  * @hide
  */
 public final class GmsHooks {
-    private static final String TAG = "GmsHooks";
+    private static final String TAG = "GmsCompat/Hooks";
 
     // Foreground service notifications
     private static final String FGS_GROUP_ID = "gmscompat_fgs_group";
     private static final String FGS_CHANNEL_ID = "gmscompat_fgs_channel";
     private static final int FGS_NOTIFICATION_ID = 529977835;
     private static boolean fgsChannelCreated = false;
 
     // Static only
     private GmsHooks() { }
 
